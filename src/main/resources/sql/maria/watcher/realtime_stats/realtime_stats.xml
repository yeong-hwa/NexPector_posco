<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="realtime_status">

  <select id="serverStatusQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
	/* realtime_status.serverStatusQry */
	  SELECT
		  CASE
		  WHEN B_CON_INFO = 'Y'
			THEN 'CONN'
		  ELSE 'DISCONN'
		  END      AS  CONN_INFO,
		  COUNT(*) AS  CNT,
		  SUM(ALM_CNT) ALM_CNT
		FROM
		  (SELECT
			 A.*,
			 (SELECT COUNT(*)
			  FROM TB_ALM
			  WHERE N_MON_ID = A.N_MON_ID AND N_ALM_STATUS > 1) ALM_CNT
		   FROM TB_MON_INFO A
		   WHERE N_MON_ID IN (SELECT N_MON_ID
							  FROM TB_USER_MON_LIST
							  WHERE S_USER_ID = #{SESSION_USER_ID})
		  ) A
		WHERE
		  N_GROUP_CODE IN (SELECT N_GROUP_CODE
						   FROM (
								  SELECT hierarchy_connect_by_parent_svr_group(n_group_code) AS n_group_code
								  FROM (
										 SELECT
										   <if test="N_GROUP_CODE == -1">@start_with := 0,</if>
							               <if test="N_GROUP_CODE != -1">@start_with := #{N_GROUP_CODE},</if>
										   @n_group_code := @start_with,
										   @level := 0
									   ) vars, tb_svr_group
								  WHERE @n_group_code IS NOT NULL
								) TREE_DATA
		  )
			<if test="N_STYLE_CODE != '' and N_STYLE_CODE != null">
				AND N_STYLE_CODE = #{N_STYLE_CODE}
			</if>
			<if test="N_TYPE_CODE != '' and N_TYPE_CODE != null">
				AND N_TYPE_CODE = #{N_TYPE_CODE}
			</if>
		GROUP BY
				B_CON_INFO
  </select>

  <select id="compoSvrGrpLstQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
	  /* realtime_status.compoSvrGrpLstQry */
	  SELECT *
		FROM (
			   SELECT
				 N_GROUP_CODE,
				 S_GROUP_NAME,
				 (SELECT COUNT(*) CNT
				  FROM TB_MON_INFO
				  WHERE N_GROUP_CODE = A.N_GROUP_CODE AND N_MON_ID IN (SELECT N_MON_ID
																	   FROM TB_USER_MON_LIST
																	   WHERE S_USER_ID = #{SESSION_USER_ID})) CNT
			   FROM
				 TB_SVR_GROUP A
			   WHERE
				 N_UP_CODE <if test="N_GROUP_CODE == -1"> IS NULL </if><if test="N_GROUP_CODE != -1"> = #{N_GROUP_CODE}</if>
			   AND F_USE = 'Y'
			   ORDER BY
			   CNT DESC
			 ) A
		LIMIT 10
  </select>

  <select id="serverStatusQry123" resultType="java.util.HashMap" parameterType="java.util.HashMap">
	  /* realtime_status.serverStatusQry123 */
    SELECT
    		CASE
    			WHEN B_CON_INFO = 'Y' THEN 'CONN'
    			ELSE 'DISCONN'
    		END AS CONN_INFO
    		, COUNT(*) AS CNT
    		, (SELECT COUNT(*) FROM TB_ALM WHERE N_ALM_STATUS > 1) ALM_CNT
    FROM
			TB_MON_INFO
    <where>
		<if test="N_STYLE_CODE != '' and N_STYLE_CODE != null">
			AND N_STYLE_CODE = #{N_STYLE_CODE}
		</if>
	</where>
	GROUP BY
			B_CON_INFO
  </select>

	<select id="latelyHalfyearStatsQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		/* realtime_status.latelyHalfyearStatsQry */
		SELECT
		  date_format(date_add(now(), INTERVAL -1 MONTH), '%Y-%m') MON,
		  COALESCE(SUM(MINOR), 0)                                  MINOR,
		  COALESCE(SUM(MAJOR), 0)                                  MAJOR,
		  COALESCE(SUM(CRITICAL), 0)                               CRITICAL
		FROM
		  (
			SELECT
			  CASE WHEN N_ALM_RATING = '3'
				THEN 1
			  ELSE 0 END MINOR,
			  CASE WHEN N_ALM_RATING = '2'
				THEN 1
			  ELSE 0 END MAJOR,
			  CASE WHEN N_ALM_RATING = '1'
				THEN 1
			  ELSE 0 END CRITICAL
			FROM TB_ALM_HISTORY
			WHERE D_UPDATE_TIME >= str_to_date(date_format(date_add(now(), INTERVAL -1 MONTH), '%Y%m01'), '%Y%m%d%H%i%s')
				  <![CDATA[
				  AND D_UPDATE_TIME < str_to_date(date_format(date_add(now(), INTERVAL -0 MONTH), '%Y%m01'), '%Y%m%d%H%i%s')
				  ]]>
				  AND N_MON_ID IN (SELECT N_MON_ID
								   FROM TB_MON_INFO
								   WHERE N_GROUP_CODE IN (SELECT N_GROUP_CODE
														  FROM (SELECT hierarchy_connect_by_parent_svr_group(
																		   n_group_code) AS n_group_code
																FROM (
																	   SELECT
																		 <if test="N_GROUP_CODE == -1">@start_with := 0,</if>
															             <if test="N_GROUP_CODE != -1">@start_with := #{N_GROUP_CODE},</if>
																		 @n_group_code := @start_with,
																		 @LEVEL := 0
																	 ) vars, tb_svr_group
																WHERE @n_group_code IS NOT NULL) TREE
								   )
				  )
				  AND N_MON_ID IN (SELECT N_MON_ID
								   FROM TB_USER_MON_LIST
								   WHERE S_USER_ID = #{SESSION_USER_ID})

		  ) A
           UNION
          SELECT
			  date_format(date_add(now(), INTERVAL -2 MONTH), '%Y-%m') MON,
			  COALESCE(SUM(MINOR), 0)                                  MINOR,
			  COALESCE(SUM(MAJOR), 0)                                  MAJOR,
			  COALESCE(SUM(CRITICAL), 0)                               CRITICAL
			FROM
			  (
				SELECT
				  CASE WHEN N_ALM_RATING = '3'
					THEN 1
				  ELSE 0 END MINOR,
				  CASE WHEN N_ALM_RATING = '2'
					THEN 1
				  ELSE 0 END MAJOR,
				  CASE WHEN N_ALM_RATING = '1'
					THEN 1
				  ELSE 0 END CRITICAL
				FROM TB_ALM_HISTORY
				WHERE D_UPDATE_TIME >= str_to_date(date_format(date_add(now(), INTERVAL -2 MONTH), '%Y%m01'), '%Y%m%d%H%i%s')
					  <![CDATA[
					  AND D_UPDATE_TIME < str_to_date(date_format(date_add(now(), INTERVAL -1 MONTH), '%Y%m01'), '%Y%m%d%H%i%s')
					  ]]>
					  AND N_MON_ID IN (SELECT N_MON_ID
									   FROM TB_MON_INFO
									   WHERE N_GROUP_CODE IN (SELECT N_GROUP_CODE
															  FROM (SELECT hierarchy_connect_by_parent_svr_group(
																			   n_group_code) AS n_group_code
																	FROM (
																		   SELECT
																			 <if test="N_GROUP_CODE == -1">@start_with := 0,</if>
																			 <if test="N_GROUP_CODE != -1">@start_with := #{N_GROUP_CODE},</if>
																			 @n_group_code := @start_with,
																			 @LEVEL := 0
																		 ) vars, tb_svr_group
																	WHERE @n_group_code IS NOT NULL) TREE
									   )
					  )
					  AND N_MON_ID IN (SELECT N_MON_ID
									   FROM TB_USER_MON_LIST
									   WHERE S_USER_ID = #{SESSION_USER_ID})

			  ) A
            UNION
            SELECT
			  date_format(date_add(now(), INTERVAL -3 MONTH), '%Y-%m') MON,
			  COALESCE(SUM(MINOR), 0)                                  MINOR,
			  COALESCE(SUM(MAJOR), 0)                                  MAJOR,
			  COALESCE(SUM(CRITICAL), 0)                               CRITICAL
			FROM
			  (
				SELECT
				  CASE WHEN N_ALM_RATING = '3'
					THEN 1
				  ELSE 0 END MINOR,
				  CASE WHEN N_ALM_RATING = '2'
					THEN 1
				  ELSE 0 END MAJOR,
				  CASE WHEN N_ALM_RATING = '1'
					THEN 1
				  ELSE 0 END CRITICAL
				FROM TB_ALM_HISTORY
				WHERE D_UPDATE_TIME >= str_to_date(date_format(date_add(now(), INTERVAL -3 MONTH), '%Y%m01'), '%Y%m%d%H%i%s')
					  <![CDATA[
					  AND D_UPDATE_TIME < str_to_date(date_format(date_add(now(), INTERVAL -2 MONTH), '%Y%m01'), '%Y%m%d%H%i%s')
					  ]]>
					  AND N_MON_ID IN (SELECT N_MON_ID
									   FROM TB_MON_INFO
									   WHERE N_GROUP_CODE IN (SELECT N_GROUP_CODE
															  FROM (SELECT hierarchy_connect_by_parent_svr_group(
																			   n_group_code) AS n_group_code
																	FROM (
																		   SELECT
																			 <if test="N_GROUP_CODE == -1">@start_with := 0,</if>
																			 <if test="N_GROUP_CODE != -1">@start_with := #{N_GROUP_CODE},</if>
																			 @n_group_code := @start_with,
																			 @LEVEL := 0
																		 ) vars, tb_svr_group
																	WHERE @n_group_code IS NOT NULL) TREE
									   )
					  )
					  AND N_MON_ID IN (SELECT N_MON_ID
									   FROM TB_USER_MON_LIST
									   WHERE S_USER_ID = #{SESSION_USER_ID})

			  ) A
            UNION
            SELECT
			  date_format(date_add(now(), INTERVAL -4 MONTH), '%Y-%m') MON,
			  COALESCE(SUM(MINOR), 0)                                  MINOR,
			  COALESCE(SUM(MAJOR), 0)                                  MAJOR,
			  COALESCE(SUM(CRITICAL), 0)                               CRITICAL
			FROM
			  (
				SELECT
				  CASE WHEN N_ALM_RATING = '3'
					THEN 1
				  ELSE 0 END MINOR,
				  CASE WHEN N_ALM_RATING = '2'
					THEN 1
				  ELSE 0 END MAJOR,
				  CASE WHEN N_ALM_RATING = '1'
					THEN 1
				  ELSE 0 END CRITICAL
				FROM TB_ALM_HISTORY
				WHERE D_UPDATE_TIME >= str_to_date(date_format(date_add(now(), INTERVAL -4 MONTH), '%Y%m01'), '%Y%m%d%H%i%s')
					  <![CDATA[
					  AND D_UPDATE_TIME < str_to_date(date_format(date_add(now(), INTERVAL -3 MONTH), '%Y%m01'), '%Y%m%d%H%i%s')
					  ]]>
					  AND N_MON_ID IN (SELECT N_MON_ID
									   FROM TB_MON_INFO
									   WHERE N_GROUP_CODE IN (SELECT N_GROUP_CODE
															  FROM (SELECT hierarchy_connect_by_parent_svr_group(
																			   n_group_code) AS n_group_code
																	FROM (
																		   SELECT
																			 <if test="N_GROUP_CODE == -1">@start_with := 0,</if>
																			 <if test="N_GROUP_CODE != -1">@start_with := #{N_GROUP_CODE},</if>
																			 @n_group_code := @start_with,
																			 @LEVEL := 0
																		 ) vars, tb_svr_group
																	WHERE @n_group_code IS NOT NULL) TREE
									   )
					  )
					  AND N_MON_ID IN (SELECT N_MON_ID
									   FROM TB_USER_MON_LIST
									   WHERE S_USER_ID = #{SESSION_USER_ID})

			  ) A
            UNION
            SELECT
			  date_format(date_add(now(), INTERVAL -5 MONTH), '%Y-%m') MON,
			  COALESCE(SUM(MINOR), 0)                                  MINOR,
			  COALESCE(SUM(MAJOR), 0)                                  MAJOR,
			  COALESCE(SUM(CRITICAL), 0)                               CRITICAL
			FROM
			  (
				SELECT
				  CASE WHEN N_ALM_RATING = '3'
					THEN 1
				  ELSE 0 END MINOR,
				  CASE WHEN N_ALM_RATING = '2'
					THEN 1
				  ELSE 0 END MAJOR,
				  CASE WHEN N_ALM_RATING = '1'
					THEN 1
				  ELSE 0 END CRITICAL
				FROM TB_ALM_HISTORY
				WHERE D_UPDATE_TIME >= str_to_date(date_format(date_add(now(), INTERVAL -5 MONTH), '%Y%m01'), '%Y%m%d%H%i%s')
					  <![CDATA[
					  AND D_UPDATE_TIME < str_to_date(date_format(date_add(now(), INTERVAL -4 MONTH), '%Y%m01'), '%Y%m%d%H%i%s')
					  ]]>
					  AND N_MON_ID IN (SELECT N_MON_ID
									   FROM TB_MON_INFO
									   WHERE N_GROUP_CODE IN (SELECT N_GROUP_CODE
															  FROM (SELECT hierarchy_connect_by_parent_svr_group(
																			   n_group_code) AS n_group_code
																	FROM (
																		   SELECT
																			 <if test="N_GROUP_CODE == -1">@start_with := 0,</if>
																			 <if test="N_GROUP_CODE != -1">@start_with := #{N_GROUP_CODE},</if>
																			 @n_group_code := @start_with,
																			 @LEVEL := 0
																		 ) vars, tb_svr_group
																	WHERE @n_group_code IS NOT NULL) TREE
									   )
					  )
					  AND N_MON_ID IN (SELECT N_MON_ID
									   FROM TB_USER_MON_LIST
									   WHERE S_USER_ID = #{SESSION_USER_ID})

			  ) A
            UNION
            SELECT
			  date_format(date_add(now(), INTERVAL -6 MONTH), '%Y-%m') MON,
			  COALESCE(SUM(MINOR), 0)                                  MINOR,
			  COALESCE(SUM(MAJOR), 0)                                  MAJOR,
			  COALESCE(SUM(CRITICAL), 0)                               CRITICAL
			FROM
			  (
				SELECT
				  CASE WHEN N_ALM_RATING = '3'
					THEN 1
				  ELSE 0 END MINOR,
				  CASE WHEN N_ALM_RATING = '2'
					THEN 1
				  ELSE 0 END MAJOR,
				  CASE WHEN N_ALM_RATING = '1'
					THEN 1
				  ELSE 0 END CRITICAL
				FROM TB_ALM_HISTORY
				WHERE D_UPDATE_TIME >= str_to_date(date_format(date_add(now(), INTERVAL -6 MONTH), '%Y%m01'), '%Y%m%d%H%i%s')
					  <![CDATA[
					  AND D_UPDATE_TIME < str_to_date(date_format(date_add(now(), INTERVAL -5 MONTH), '%Y%m01'), '%Y%m%d%H%i%s')
					  ]]>
					  AND N_MON_ID IN (SELECT N_MON_ID
									   FROM TB_MON_INFO
									   WHERE N_GROUP_CODE IN (SELECT N_GROUP_CODE
															  FROM (SELECT hierarchy_connect_by_parent_svr_group(
																			   n_group_code) AS n_group_code
																	FROM (
																		   SELECT
																			 <if test="N_GROUP_CODE == -1">@start_with := 0,</if>
																			 <if test="N_GROUP_CODE != -1">@start_with := #{N_GROUP_CODE},</if>
																			 @n_group_code := @start_with,
																			 @LEVEL := 0
																		 ) vars, tb_svr_group
																	WHERE @n_group_code IS NOT NULL) TREE
									   )
					  )
					  AND N_MON_ID IN (SELECT N_MON_ID
									   FROM TB_USER_MON_LIST
									   WHERE S_USER_ID = #{SESSION_USER_ID})

			  ) A

  </select>

  <select id="latelyMonthServerErrorQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
	  /* realtime_status.latelyMonthServerErrorQry */
	  SELECT *
		FROM (
			   SELECT
				 N_MON_ID,
				 S_MON_NAME,
				 (SELECT COUNT(*)
				  FROM TB_ALM
				  WHERE N_MON_ID = A.N_MON_ID AND D_UPDATE_TIME BETWEEN date_add(now(), INTERVAL -30 DAY) AND now()) CNT
			   FROM
				 (SELECT *
				  FROM TB_MON_INFO
				  WHERE N_MON_ID IN (SELECT N_MON_ID
									 FROM TB_USER_MON_LIST
									 WHERE S_USER_ID = #{SESSION_USER_ID})) A
			   <if test="N_GROUP_CODE != '-1'">
				WHERE
						N_GROUP_CODE = #{N_GROUP_CODE}
				</if>
			 ) A
			   ORDER BY
				 CNT DESC			 
		LIMIT 10
  </select>

  <select id="latelyWeekServerErrorQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
	  /* realtime_status.latelyWeekServerErrorQry */
	  SELECT *
		FROM (
			   SELECT
				 N_MON_ID,
				 S_MON_NAME,
				 (SELECT COUNT(*)
				  FROM TB_ALM
				  WHERE N_MON_ID = A.N_MON_ID AND D_UPDATE_TIME BETWEEN date_add(now(), INTERVAL -7 DAY) AND now()) CNT
			   FROM
				 (SELECT *
				  FROM TB_MON_INFO
				  WHERE N_MON_ID IN (SELECT N_MON_ID
									 FROM TB_USER_MON_LIST
									 WHERE S_USER_ID = #{SESSION_USER_ID})) A
			   <if test="N_GROUP_CODE != '-1'">
			   WHERE N_GROUP_CODE = #{N_GROUP_CODE}
			   </if>

			 ) A
			   ORDER BY
				 CNT DESC			 
		LIMIT 10
  </select>

  <select id="thisweekServerErrorQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
	  /* realtime_status.thisweekServerErrorQry */
	        SELECT
				   korean_week_day_name_before_day(0) WEEK
				   , date_format(date_add(now(), INTERVAL -0 DAY), '%Y-%m-%d %H:%i:%s')
				   , COALESCE(SUM(MINOR),0) MINOR, COALESCE(SUM(MAJOR),0) MAJOR, COALESCE(SUM(CRITICAL),0) CRITICAL
			FROM
				   (
						  SELECT CASE WHEN N_ALM_RATING = '1' THEN 1 ELSE 0 END MINOR,CASE WHEN N_ALM_RATING = '2' THEN 1 ELSE 0 END MAJOR,CASE WHEN N_ALM_RATING = '3' THEN 1 ELSE 0 END CRITICAL
						  FROM TB_ALM_HISTORY
						  WHERE D_UPDATE_TIME >= date_add(now(), INTERVAL -1 DAY)
							AND D_UPDATE_TIME &lt; date_add(now(), INTERVAL -0 DAY)
	                        <if test="N_GROUP_CODE != '-1'">
							AND N_MON_ID IN (SELECT N_MON_ID FROM TB_MON_INFO WHERE N_GROUP_CODE = #{N_GROUP_CODE})
							</if>
							AND N_MON_ID IN (SELECT N_MON_ID FROM TB_USER_MON_LIST WHERE S_USER_ID = #{SESSION_USER_ID})
			) A
            UNION
	        SELECT
				   korean_week_day_name_before_day(1) WEEK
				   , date_format(date_add(now(), INTERVAL -1 DAY), '%Y-%m-%d %H:%i:%s')
				   , COALESCE(SUM(MINOR),0) MINOR, COALESCE(SUM(MAJOR),0) MAJOR, COALESCE(SUM(CRITICAL),0) CRITICAL
			FROM
				   (
						  SELECT CASE WHEN N_ALM_RATING = '1' THEN 1 ELSE 0 END MINOR,CASE WHEN N_ALM_RATING = '2' THEN 1 ELSE 0 END MAJOR,CASE WHEN N_ALM_RATING = '3' THEN 1 ELSE 0 END CRITICAL
						  FROM TB_ALM_HISTORY
						  WHERE D_UPDATE_TIME >= date_add(now(), INTERVAL -2 DAY)
							AND D_UPDATE_TIME &lt; date_add(now(), INTERVAL -1 DAY)
	                        <if test="N_GROUP_CODE != '-1'">
							AND N_MON_ID IN (SELECT N_MON_ID FROM TB_MON_INFO WHERE N_GROUP_CODE = #{N_GROUP_CODE})
							</if>
							AND N_MON_ID IN (SELECT N_MON_ID FROM TB_USER_MON_LIST WHERE S_USER_ID = #{SESSION_USER_ID})
			) A
            UNION
	        SELECT
				   korean_week_day_name_before_day(2) WEEK
				   , date_format(date_add(now(), INTERVAL -2 DAY), '%Y-%m-%d %H:%i:%s')
				   , COALESCE(SUM(MINOR),0) MINOR, COALESCE(SUM(MAJOR),0) MAJOR, COALESCE(SUM(CRITICAL),0) CRITICAL
			FROM
				   (
						  SELECT CASE WHEN N_ALM_RATING = '1' THEN 1 ELSE 0 END MINOR,CASE WHEN N_ALM_RATING = '2' THEN 1 ELSE 0 END MAJOR,CASE WHEN N_ALM_RATING = '3' THEN 1 ELSE 0 END CRITICAL
						  FROM TB_ALM_HISTORY
						  WHERE D_UPDATE_TIME >= date_add(now(), INTERVAL -3 DAY)
							AND D_UPDATE_TIME &lt; date_add(now(), INTERVAL -2 DAY)
	                        <if test="N_GROUP_CODE != '-1'">
							AND N_MON_ID IN (SELECT N_MON_ID FROM TB_MON_INFO WHERE N_GROUP_CODE = #{N_GROUP_CODE})
							</if>
							AND N_MON_ID IN (SELECT N_MON_ID FROM TB_USER_MON_LIST WHERE S_USER_ID = #{SESSION_USER_ID})
			) A
            UNION
            SELECT
				   korean_week_day_name_before_day(3) WEEK
				   , date_format(date_add(now(), INTERVAL -3 DAY), '%Y-%m-%d %H:%i:%s')
				   , COALESCE(SUM(MINOR),0) MINOR, COALESCE(SUM(MAJOR),0) MAJOR, COALESCE(SUM(CRITICAL),0) CRITICAL
			FROM
				   (
						  SELECT CASE WHEN N_ALM_RATING = '1' THEN 1 ELSE 0 END MINOR,CASE WHEN N_ALM_RATING = '2' THEN 1 ELSE 0 END MAJOR,CASE WHEN N_ALM_RATING = '3' THEN 1 ELSE 0 END CRITICAL
						  FROM TB_ALM_HISTORY
						  WHERE D_UPDATE_TIME >= date_add(now(), INTERVAL -4 DAY)
							AND D_UPDATE_TIME &lt; date_add(now(), INTERVAL -3 DAY)
	                        <if test="N_GROUP_CODE != '-1'">
							AND N_MON_ID IN (SELECT N_MON_ID FROM TB_MON_INFO WHERE N_GROUP_CODE = #{N_GROUP_CODE})
							</if>
							AND N_MON_ID IN (SELECT N_MON_ID FROM TB_USER_MON_LIST WHERE S_USER_ID = #{SESSION_USER_ID})
			) A
            UNION
            SELECT
				   korean_week_day_name_before_day(4) WEEK
				   , date_format(date_add(now(), INTERVAL -4 DAY), '%Y-%m-%d %H:%i:%s')
				   , COALESCE(SUM(MINOR),0) MINOR, COALESCE(SUM(MAJOR),0) MAJOR, COALESCE(SUM(CRITICAL),0) CRITICAL
			FROM
				   (
						  SELECT CASE WHEN N_ALM_RATING = '1' THEN 1 ELSE 0 END MINOR,CASE WHEN N_ALM_RATING = '2' THEN 1 ELSE 0 END MAJOR,CASE WHEN N_ALM_RATING = '3' THEN 1 ELSE 0 END CRITICAL
						  FROM TB_ALM_HISTORY
						  WHERE D_UPDATE_TIME >= date_add(now(), INTERVAL -5 DAY)
							AND D_UPDATE_TIME &lt; date_add(now(), INTERVAL -4 DAY)
	                        <if test="N_GROUP_CODE != '-1'">
							AND N_MON_ID IN (SELECT N_MON_ID FROM TB_MON_INFO WHERE N_GROUP_CODE = #{N_GROUP_CODE})
							</if>
							AND N_MON_ID IN (SELECT N_MON_ID FROM TB_USER_MON_LIST WHERE S_USER_ID = #{SESSION_USER_ID})
			) A
            UNION
            SELECT
				   korean_week_day_name_before_day(5) WEEK
				   , date_format(date_add(now(), INTERVAL -5 DAY), '%Y-%m-%d %H:%i:%s')
				   , COALESCE(SUM(MINOR),0) MINOR, COALESCE(SUM(MAJOR),0) MAJOR, COALESCE(SUM(CRITICAL),0) CRITICAL
			FROM
				   (
						  SELECT CASE WHEN N_ALM_RATING = '1' THEN 1 ELSE 0 END MINOR,CASE WHEN N_ALM_RATING = '2' THEN 1 ELSE 0 END MAJOR,CASE WHEN N_ALM_RATING = '3' THEN 1 ELSE 0 END CRITICAL
						  FROM TB_ALM_HISTORY
						  WHERE D_UPDATE_TIME >= date_add(now(), INTERVAL -6 DAY)
							AND D_UPDATE_TIME &lt; date_add(now(), INTERVAL -5 DAY)
	                        <if test="N_GROUP_CODE != '-1'">
							AND N_MON_ID IN (SELECT N_MON_ID FROM TB_MON_INFO WHERE N_GROUP_CODE = #{N_GROUP_CODE})
							</if>
							AND N_MON_ID IN (SELECT N_MON_ID FROM TB_USER_MON_LIST WHERE S_USER_ID = #{SESSION_USER_ID})
			) A
            UNION
    		SELECT
				   korean_week_day_name_before_day(6) WEEK
				   , date_format(date_add(now(), INTERVAL -6 DAY), '%Y-%m-%d %H:%i:%s')
				   , COALESCE(SUM(MINOR),0) MINOR, COALESCE(SUM(MAJOR),0) MAJOR, COALESCE(SUM(CRITICAL),0) CRITICAL
			FROM
				   (
						  SELECT CASE WHEN N_ALM_RATING = '1' THEN 1 ELSE 0 END MINOR,CASE WHEN N_ALM_RATING = '2' THEN 1 ELSE 0 END MAJOR,CASE WHEN N_ALM_RATING = '3' THEN 1 ELSE 0 END CRITICAL
						  FROM TB_ALM_HISTORY
						  WHERE D_UPDATE_TIME >= date_add(now(), INTERVAL -7 DAY)
							AND D_UPDATE_TIME &lt; date_add(now(), INTERVAL -6 DAY)
	                        <if test="N_GROUP_CODE != '-1'">
							AND N_MON_ID IN (SELECT N_MON_ID FROM TB_MON_INFO WHERE N_GROUP_CODE = #{N_GROUP_CODE})
							</if>
							AND N_MON_ID IN (SELECT N_MON_ID FROM TB_USER_MON_LIST WHERE S_USER_ID = #{SESSION_USER_ID})
			) A
		ORDER BY
				order_date ASC

  </select>

	<select id="realtimeResourceTop5_SvrGroup" resultType="java.lang.String" parameterType="java.util.HashMap">
		/* realtime_status.realtimeResourceTop5_SvrGroup */
		SELECT -1 N_GROUP_CODE FROM dual
		UNION ALL
		SELECT
				N_GROUP_CODE
		FROM
				TB_SVR_GROUP
		WHERE
				F_USE = 'Y'
	</select>

	<select id="realtimeResourceTop5" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		/* realtime_status.realtimeResourceTop5 */
		SELECT *
		FROM (
			   SELECT
				 A.N_MON_ID,
				 A.S_MON_NAME,
				 COALESCE(B.N_PER_USE, 0) N_PER_USE,
				 CASE 
					WHEN COALESCE(B.N_PER_USE, 0) <![CDATA[ >= ]]> 80 THEN '#F96705'
					ELSE '#25F01D'
				 END AS N_PER_USE_COLOR
			   FROM
				 TB_MON_INFO A
				 LEFT OUTER JOIN TB_MON_REAL_RESOURCE B
				   ON A.N_MON_ID = B.N_MON_ID
			   WHERE
				 A.N_GROUP_CODE IN (
					SELECT n_group_code
					   FROM (
							  SELECT hierarchy_connect_by_parent_svr_group(n_group_code) AS n_group_code
							  FROM (
									 SELECT
									  <if test="N_GROUP_CODE == -1">@start_with := 0,</if>
									  <if test="N_GROUP_CODE != -1">@start_with := #{N_GROUP_CODE},</if>
									   @n_group_code := @start_with,
									   @level := 0
								   ) vars, tb_svr_group
							  WHERE @n_group_code IS NOT NULL
							) TREE
				 )
				 AND B.S_MAP_KEY = (SELECT S_MAP_KEY
									FROM TB_MON_MAP
									WHERE N_MON_TYPE = #{N_MON_TYPE}
									LIMIT 1)
		         AND A.N_MON_ID IN (SELECT N_MON_ID FROM TB_USER_MON_LIST WHERE S_USER_ID = #{SESSION_USER_ID})
			 ) A
			 ORDER BY
			 N_PER_USE DESC			 
		LIMIT 10
	</select>

	<select id="realtimeGroupBySvrStatusQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		/* realtime_status.realtimeGroupBySvrStatusQry */

			SELECT
					<if test="S_GROUP_FULL_CODE == '-1'">
						(SELECT S_GROUP_NAME FROM TB_SVR_GROUP WHERE N_GROUP_CODE = A.GROUP_CODE AND F_USE = 'Y') GROUP_NAME
					</if>
					<if test="S_GROUP_FULL_CODE != '-1'">
						(SELECT S_GROUP_NAME FROM TB_SVR_GROUP WHERE N_GROUP_CODE = (CASE WHEN INSTR(A.GROUP_CODE, '/') = 0 THEN A.GROUP_CODE ELSE SUBSTR(A.GROUP_CODE, LENGTH(A.GROUP_CODE) - INSTR(A.GROUP_CODE, '/')-1) END) AND F_USE = 'Y') GROUP_NAME
					</if>
					, GROUP_CODE S_GROUP_FULL_CODE
					, NORMAL, ERROR
			FROM
				(
					SELECT
					  SUBSTR(A.PARENT_CODE, 1
						  <if test="S_GROUP_FULL_CODE == '-1'">
						  , CASE WHEN INSTR(A.PARENT_CODE, '/') = 0 THEN LENGTH(A.PARENT_CODE) ELSE INSTR(A.PARENT_CODE, '/') - 1 END
		                  </if>
		                  <if test="S_GROUP_FULL_CODE != '-1'">
						  , CASE WHEN INSTR(A.PARENT_CODE,'/',  LENGTH('${S_GROUP_FULL_CODE}' + '/')+1) = 0 THEN LENGTH(A.PARENT_CODE) ELSE INSTR(A.PARENT_CODE,'/', LENGTH('${S_GROUP_FULL_CODE}' + '/')+1)-1 END
						  </if>) GROUP_CODE,
					  COALESCE(SUM(NORMAL), 0) NORMAL,
					  COALESCE(SUM(ERROR), 0)  ERROR
					FROM
					  (
						SELECT
						  tsg.n_group_code,
						  tsg.s_group_name,
						  tsg.n_up_code,
						  tsg.f_use,
						  CAST(dc.lev AS CHAR)                                 AS DEPTH,
						  hierarchy_sys_connect_by_path('/', tsg.n_group_code) AS PARENT_CODE
						FROM (
							   SELECT
								 hierarchy_connect_by_parent_svr_group(n_group_code) AS n_group_code,
								 @level                                              AS lev
							   FROM (
									  SELECT
										<if test="N_GROUP_CODE == -1">@start_with := 0,</if>
									    <if test="N_GROUP_CODE != -1">@start_with := #{N_GROUP_CODE},</if>
										@n_group_code := @start_with,
										@level := 0
									) vars, tb_svr_group
							   WHERE @n_group_code IS NOT NULL
							 ) dc LEFT JOIN tb_svr_group tsg ON dc.n_group_code = tsg.n_group_code
					  ) A
					  , (
						  SELECT
							N_GROUP_CODE,
							COALESCE(SUM(NORMAL), 0) NORMAL,
							COALESCE(SUM(ERROR), 0)  ERROR
						  FROM
							(
							  SELECT
								N_GROUP_CODE,
								CASE WHEN B_CON_INFO = 'Y'
								  THEN 1
								ELSE 0 END NORMAL,
								CASE WHEN B_CON_INFO = 'N'
								  THEN 1
								ELSE 0 END ERROR
							  FROM
								TB_MON_INFO A
							) A
						  GROUP BY
							N_GROUP_CODE
						) B
					WHERE A.N_GROUP_CODE = B.N_GROUP_CODE
                      <if test="S_GROUP_FULL_CODE != '-1'">
					  AND A.PARENT_CODE LIKE concat('${S_GROUP_FULL_CODE}', '%')
					  </if>
					GROUP BY
					  SUBSTR(A.PARENT_CODE, 1
						  <if test="S_GROUP_FULL_CODE == '-1'">
						  , CASE WHEN INSTR(A.PARENT_CODE, '/') = 0 THEN LENGTH(A.PARENT_CODE) ELSE INSTR(A.PARENT_CODE, '/') - 1 END
		                  </if>
		                  <if test="S_GROUP_FULL_CODE != '-1'">
						  , CASE WHEN INSTR(A.PARENT_CODE,'/',  LENGTH('${S_GROUP_FULL_CODE}' + '/')+1) = 0 THEN LENGTH(A.PARENT_CODE) ELSE INSTR(A.PARENT_CODE,'/', LENGTH('${S_GROUP_FULL_CODE}' + '/')+1)-1 END
						  </if>)
				) A
  </select>

	<!-- 메인 화면 실시간 장애 현황 -->
	<select id="realtimeErrorStatsQry2" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		/* realtime_status.realtimeErrorStatsQry2 */
		SELECT
			A.S_ALM_KEY, A.N_MON_ID, A.S_MAP_KEY, A.D_UPDATE_TIME, A.N_ALM_STATUS, A.N_ALM_RATING
			, A.S_ALM_RATING_NAME, A.S_MON_NAME, A.N_GROUP_CODE, A.N_TYPE_CODE, A.S_ALM_MSG AS TOOL_S_ALM_MSG
			, IF(SIGN(LENGTH(A.S_ALM_MSG) - 100) = 1, concat(SUBSTR(A.S_ALM_MSG, 1, 100), '...'), A.S_ALM_MSG) AS S_ALM_MSG
		FROM (
			SELECT
				A.S_ALM_KEY, A.N_MON_ID, A.S_MAP_KEY, DATE_FORMAT(A.D_UPDATE_TIME, '%Y-%m-%d %H:%i:%s') D_UPDATE_TIME
				, A.N_ALM_STATUS, A.N_ALM_RATING
				, (SELECT S_ALM_RATING_NAME FROM TB_ALM_RATING_CODE WHERE N_ALM_RATING = A.N_ALM_RATING) AS S_ALM_RATING_NAME
				, B.S_MON_NAME
				, B.N_GROUP_CODE
<!-- 				, CONCAT( 
					(SELECT S_ALM_MSG FROM TB_ALM_CODE WHERE N_ALM_TYPE = A.N_ALM_TYPE AND N_ALM_CODE = A.N_ALM_CODE) 
					, ' [' 
					, IFNULL((SELECT S_MSG FROM TB_ALM_HISTORY WHERE N_MON_ID = A.N_MON_ID AND S_ALM_KEY = A.S_ALM_KEY AND D_UPDATE_TIME = A.D_UPDATE_TIME AND N_ALM_STATUS = A.N_ALM_STATUS AND N_ALM_RATING = A.N_ALM_RATING LIMIT 1)
					, '') 
					, ']' 
				) AS S_ ALM_MSG -->
				, f_make_only_alm_msg(A.S_ALM_KEY, A.N_ALM_STATUS, A.D_UPDATE_TIME) S_ALM_MSG
				, (SELECT N_TYPE_CODE FROM TB_MON_INFO WHERE N_MON_ID = A.N_MON_ID) AS N_TYPE_CODE
			FROM TB_ALM A, TB_MON_INFO B
			<![CDATA[
			WHERE A.N_ALM_STATUS > 1 AND A.N_MON_ID = B.N_MON_ID
			]]>
			AND B.N_GROUP_CODE IN 
			(
				SELECT n_group_code 
				FROM (
					SELECT hierarchy_connect_by_parent_svr_group(n_group_code) AS n_group_code
					FROM (
						SELECT
						<if test="N_GROUP_CODE == 0">@start_with := 0,</if>
						<if test="N_GROUP_CODE == -1">@start_with := 0,</if>
						<if test="N_GROUP_CODE > 0">@start_with := #{N_GROUP_CODE},</if>
						@n_group_code := @start_with,
						@level := 0
					) vars, tb_svr_group
					WHERE @n_group_code IS NOT NULL
				) TREE
			)
			AND A.N_MON_ID IN (SELECT N_MON_ID FROM TB_USER_MON_LIST WHERE S_USER_ID = #{SESSION_USER_ID})
			<if test="ERR_STATS_N_TYPE_CODE != '' and ERR_STATS_N_TYPE_CODE != null  and ERR_STATS_N_TYPE_CODE != 'undefined' ">
			AND	A.N_MON_ID IN (SELECT N_MON_ID FROM TB_MON_INFO WHERE N_TYPE_CODE = #{ERR_STATS_N_TYPE_CODE})
			</if>
		) A
		ORDER BY D_UPDATE_TIME DESC
		LIMIT 0, 99
	</select>

  <!-- 메인화면 실시간 장애 현황 카운트 -->
  <select id="realtimeErrorStatsCntQry2" resultType="java.util.HashMap" parameterType="java.util.HashMap">
	  /* realtime_status.realtimeErrorStatsCntQry2 */
	  SELECT
		  COALESCE(SUM(CNT), 0) ERR_CNT,
		  COUNT(*)              ERR_SVR_CNT
		FROM
		  (
			SELECT
			  N_MON_ID,
			  (SELECT N_TYPE_CODE
			   FROM TB_MON_INFO
			   WHERE N_MON_ID = A.N_MON_ID) N_TYPE_CODE,
			  COUNT(*)                      CNT
			FROM
			  TB_ALM A
			WHERE 1 = 1
				  AND N_ALM_STATUS > 1
				  AND N_MON_ID IN (SELECT N_MON_ID
								   FROM TB_MON_INFO
								   WHERE N_GROUP_CODE IN (SELECT N_GROUP_CODE
														  FROM (
																 SELECT hierarchy_connect_by_parent_svr_group(n_group_code) AS n_group_code
																 FROM (
																		SELECT
																		  <if test="N_GROUP_CODE == -1">@start_with := 0,</if>
									                                      <if test="N_GROUP_CODE != -1">@start_with := #{N_GROUP_CODE},</if>
																		  @n_group_code := @start_with,
																		  @level := 0
																	  ) vars, tb_svr_group
																 WHERE @n_group_code IS NOT NULL
															   ) TREE
								   )
				  )
				  AND N_MON_ID IN (SELECT N_MON_ID
								   FROM TB_USER_MON_LIST
								   WHERE S_USER_ID = #{SESSION_USER_ID})
		    <if test="ERR_STATS_N_TYPE_CODE != '' and ERR_STATS_N_TYPE_CODE != null  and ERR_STATS_N_TYPE_CODE != 'undefined' ">
			AND	A.N_MON_ID IN (SELECT N_MON_ID FROM TB_MON_INFO WHERE N_TYPE_CODE = #{ERR_STATS_N_TYPE_CODE})
			</if>
			GROUP BY N_MON_ID
		  ) A
  </select>

  <select id="realtimeErrorStatsCntQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
	  /* realtime_status.realtimeErrorStatsCntQry */
	  SELECT
		  N_MON_ID,
		  (SELECT N_TYPE_CODE
		   FROM TB_MON_INFO
		   WHERE N_MON_ID = A.N_MON_ID) N_TYPE_CODE,
		  COUNT(*)                      CNT
		FROM
		  TB_ALM A
		WHERE
		  N_ALM_STATUS > 1
		  AND N_MON_ID IN (SELECT N_MON_ID
						   FROM TB_MON_INFO
						   WHERE N_GROUP_CODE IN (SELECT N_GROUP_CODE
												  FROM (
														 SELECT
														   hierarchy_connect_by_parent_svr_group(n_group_code) AS n_group_code
														 FROM (
																SELECT
																  <if test="N_GROUP_CODE == -1">@start_with := 0,</if>
									                              <if test="N_GROUP_CODE != -1">@start_with := #{N_GROUP_CODE},</if>
																  @n_group_code := @start_with,
																  @level := 0
															  ) vars, tb_svr_group
														 WHERE @n_group_code IS NOT NULL
													   ) TREE)
		  )
		GROUP BY N_MON_ID
  </select>

  <select id="allSvrGroupQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
	/* realtime_status.allSvrGroupQry */
  	SELECT -1 N_GROUP_CODE FROM dual
  	UNION ALL
  	SELECT N_GROUP_CODE FROM TB_SVR_GROUP
  </select>

  <select id="groupByMapCompoQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
	  /* realtime_status.groupByMapCompoQry */
			SELECT
					<if test="S_GROUP_FULL_CODE == '-1'">
						(SELECT S_GROUP_NAME FROM TB_SVR_GROUP WHERE N_GROUP_CODE =A.GROUP_CODE AND F_USE = 'Y') GROUP_NAME
					</if>
					<if test="S_GROUP_FULL_CODE != '-1'">
						(SELECT S_GROUP_NAME FROM TB_SVR_GROUP WHERE N_GROUP_CODE = (CASE WHEN INSTR(A.GROUP_CODE, '/', -1) = 0 THEN A.GROUP_CODE ELSE SUBSTR(A.GROUP_CODE, LENGTH(A.GROUP_CODE) - (INSTR(A.GROUP_CODE, '/', -1)-2)) END) AND F_USE = 'Y') GROUP_NAME
					</if>
					, GROUP_CODE S_GROUP_FULL_CODE
					, COALESCE((SELECT N_POS_LEFT FROM TB_SVR_GROUP_POSITION WHERE N_GROUP_CODE = '${N_GROUP_CODE}' AND S_GROUP_FULL_CODE = A.GROUP_CODE),0) N_POS_LEFT
					, COALESCE((SELECT N_POS_TOP FROM TB_SVR_GROUP_POSITION WHERE N_GROUP_CODE = '${N_GROUP_CODE}' AND S_GROUP_FULL_CODE = A.GROUP_CODE),0) N_POS_TOP
					, NORMAL, ERROR
			FROM
				(
					SELECT
							SUBSTR(A.PARENT_CODE, 1
									<if test="S_GROUP_FULL_CODE == '-1'">
										, CASE WHEN INSTR(A.PARENT_CODE, '/') = 0 THEN LENGTH(A.PARENT_CODE) ELSE INSTR(A.PARENT_CODE, '/')-1 END
									</if>
									<if test="S_GROUP_FULL_CODE != '-1'">
										, CASE WHEN INSTR(A.PARENT_CODE,'/',  LENGTH('${S_GROUP_FULL_CODE}' || '/')+1) = 0 THEN LENGTH(A.PARENT_CODE) ELSE INSTR(A.PARENT_CODE,'/', LENGTH('${S_GROUP_FULL_CODE}' || '/')+1)-1 END
									</if>) GROUP_CODE
							, COALESCE(SUM(NORMAL),0) NORMAL, COALESCE(SUM(ERROR),0) ERROR
					FROM
							(
								SELECT
								  tsg.n_group_code,
								  tsg.s_group_name,
								  tsg.n_up_code,
								  tsg.f_use,
								  CAST(dc.lev AS CHAR)                                 AS DEPTH,
								  hierarchy_sys_connect_by_path('/', tsg.n_group_code) AS PARENT_CODE
								FROM (
									   SELECT
										 hierarchy_connect_by_parent_svr_group(n_group_code) AS n_group_code,
										 @level                                              AS lev
									   FROM (
											  SELECT
												<if test="N_GROUP_CODE == -1">@start_with := 0,</if>
	                                            <if test="N_GROUP_CODE != -1">@start_with := #{N_GROUP_CODE},</if>
												@n_group_code := @start_with,
												@LEVEL := 0
											) vars, tb_svr_group
									   WHERE @n_group_code IS NOT NULL
									 ) dc LEFT JOIN tb_svr_group tsg ON dc.n_group_code = tsg.n_group_code
							  ) A
							,(
								SELECT
										N_GROUP_CODE, COALESCE(SUM(NORMAL),0) NORMAL, COALESCE(SUM(ERROR),0) ERROR
								FROM
										(
											SELECT
													N_GROUP_CODE
													, COALESCE((SELECT MAX(CASE WHEN N_ALM_STATUS = 0 THEN 1 ELSE 0 END) FROM TB_ALM WHERE N_MON_ID = A.N_MON_ID),1) NORMAL
													, (SELECT MAX(CASE WHEN N_ALM_STATUS != 0 THEN 1 ELSE 0 END) FROM TB_ALM WHERE N_MON_ID = A.N_MON_ID) ERROR
											FROM
													(SELECT * FROM TB_MON_INFO WHERE N_MON_ID IN (SELECT N_MON_ID FROM TB_USER_MON_LIST WHERE S_USER_ID = #{SESSION_USER_ID})) A
										) A
								GROUP BY
										N_GROUP_CODE
							) B
					WHERE
							A.N_GROUP_CODE = B.N_GROUP_CODE
					<if test="S_GROUP_FULL_CODE != '-1'">
						AND		A.PARENT_CODE LIKE '${S_GROUP_FULL_CODE}' || '' || '%'
					</if>
					GROUP BY
							SUBSTR(A.PARENT_CODE, 1
									<if test="S_GROUP_FULL_CODE == '-1'">
										, CASE WHEN INSTR(A.PARENT_CODE, '/') = 0 THEN LENGTH(A.PARENT_CODE) ELSE INSTR(A.PARENT_CODE, '/')-1 END
									</if>
									<if test="S_GROUP_FULL_CODE != '-1'">
										, CASE WHEN INSTR(A.PARENT_CODE, '/', LENGTH('${S_GROUP_FULL_CODE}' || '/')+1) = 0 THEN LENGTH(A.PARENT_CODE) ELSE INSTR(A.PARENT_CODE, '/', LENGTH('${S_GROUP_FULL_CODE}' || '/')+1)-1 END
									</if>)
				) A

  </select>

	<select id="compo_svr_type" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		/* realtime_status.compo_svr_type */
		SELECT
		  N_TYPE_CODE CODE,
		  S_TYPE_NAME VAL
		FROM
		  TB_SVR_TYPE A
		WHERE
		  F_USE = 'Y'
		  AND N_TYPE_CODE IN (
			SELECT
			  DISTINCT N_TYPE_CODE
			FROM
			  TB_MON_INFO
			WHERE
			  N_GROUP_CODE IN (
				SELECT n_group_code
				FROM (
					   SELECT hierarchy_connect_by_parent_svr_group(n_group_code) AS N_GROUP_CODE
					   FROM (
							  SELECT
								<if test="N_GROUP_CODE == -1">@start_with := 0,</if>
								<if test="N_GROUP_CODE != -1">@start_with := #{N_GROUP_CODE},</if>
								@n_group_code := @start_with,
								@level := 0
							) vars, tb_svr_group
					   WHERE @n_group_code IS NOT NULL
					 ) TREE
			  )
		  )
		ORDER BY N_TYPE_CODE
	</select>



	<select id="compo_svr_style" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		/* realtime_status.compo_svr_style */
    	SELECT
                	N_STYLE_CODE CODE
                	, S_DESC VAL
        	FROM
                	TB_SVR_STYLE A
        	WHERE
            		N_STYLE_CODE IN (
                    	SELECT
                            	DISTINCT N_STYLE_CODE
                    	FROM
                           	TB_MON_INFO A
                    	WHERE
                            	N_GROUP_CODE IN (
                            	SELECT n_group_code
									FROM (
										   SELECT hierarchy_connect_by_parent_svr_group(n_group_code) AS N_GROUP_CODE
										   FROM (
												  SELECT
													<if test="N_GROUP_CODE == -1">@start_with := 0,</if>
													<if test="N_GROUP_CODE != -1">@start_with := #{N_GROUP_CODE},</if>
													@n_group_code := @start_with,
													@level := 0
												) vars, tb_svr_group
										   WHERE @n_group_code IS NOT NULL
										 ) TREE
                            	)
        	ORDER BY
                	N_STYLE_CODE
	</select>

  	<select id="compo_map_svr_stats" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		/* realtime_status.compo_map_svr_stats */
  		SELECT
		  N_MON_ID,
		  S_MON_NAME,
		  S_MON_IP,
		  N_STYLE_CODE,
		  N_GROUP_CODE,
		  N_TYPE_CODE,
		  B_CON_INFO,
		  (SELECT N_PER_USE
		   FROM TB_MON_REAL_RESOURCE
		   WHERE 1 = 1 AND N_MON_ID = A.N_MON_ID AND S_MAP_KEY = (SELECT S_MAP_KEY
																  FROM TB_MON_MAP
																  WHERE N_MON_ID = A.N_MON_ID AND N_MON_TYPE = '0'
																  LIMIT 1)
		   LIMIT 1)                                          CPU_PER_USE,
		  (SELECT N_PER_USE
		   FROM TB_MON_REAL_RESOURCE
		   WHERE 1 = 1 AND N_MON_ID = A.N_MON_ID AND S_MAP_KEY = (SELECT S_MAP_KEY
																  FROM TB_MON_MAP
																  WHERE N_MON_ID = A.N_MON_ID AND N_MON_TYPE = '1'
																  LIMIT 1)
		   LIMIT 1)                                          MEM_PER_USE,
		  (SELECT N_PER_USE
		   FROM TB_MON_REAL_RESOURCE
		   WHERE 1 = 1 AND N_MON_ID = A.N_MON_ID AND S_MAP_KEY = (SELECT S_MAP_KEY
																  FROM TB_MON_MAP
																  WHERE N_MON_ID = A.N_MON_ID AND N_MON_TYPE = '2'
																  LIMIT 1)
		   LIMIT 1)                                          DISK_PER_USE,
		  COALESCE((SELECT N_POS_LEFT
					FROM TB_SVR_GROUP_POSITION
					WHERE N_GROUP_CODE = A.N_GROUP_CODE AND N_MON_ID = A.N_MON_ID
					LIMIT 1), 0)                             N_POS_LEFT,
		  COALESCE((SELECT N_POS_TOP
					FROM TB_SVR_GROUP_POSITION
					WHERE N_GROUP_CODE = A.N_GROUP_CODE AND N_MON_ID = A.N_MON_ID
					LIMIT 1), 0)                             N_POS_TOP,
		  (SELECT COUNT(*)
		   FROM TB_ALM
		   WHERE N_ALM_STATUS > 1 AND N_MON_ID = A.N_MON_ID) N_ALM_CNT
		FROM
		  (SELECT *
		   FROM TB_MON_INFO
		   WHERE N_MON_ID IN (SELECT N_MON_ID
							  FROM TB_USER_MON_LIST
							  WHERE S_USER_ID = #{SESSION_USER_ID})) A
		WHERE
		  N_GROUP_CODE = #{N_GROUP_CODE}
  	</select>

  	<select id="compo_map_svr_stats2" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		/* realtime_status.compo_map_svr_stats2 */
  		SELECT
		  N_MON_ID,
		  S_MON_NAME,
		  S_MON_IP,
		  N_STYLE_CODE,
		  N_GROUP_CODE,
		  N_TYPE_CODE,
		  B_CON_INFO,
		  (SELECT N_PER_USE
		   FROM TB_MON_REAL_RESOURCE
		   WHERE 1 = 1 AND N_MON_ID = A.N_MON_ID AND S_MAP_KEY = (SELECT S_MAP_KEY
																  FROM TB_MON_MAP
																  WHERE N_MON_ID = A.N_MON_ID AND N_MON_TYPE = '0'
																  LIMIT 1)
		   LIMIT 1)                                          CPU_PER_USE,
		  (SELECT N_PER_USE
		   FROM TB_MON_REAL_RESOURCE
		   WHERE 1 = 1 AND N_MON_ID = A.N_MON_ID AND S_MAP_KEY = (SELECT S_MAP_KEY
																  FROM TB_MON_MAP
																  WHERE N_MON_ID = A.N_MON_ID AND N_MON_TYPE = '1'
																  LIMIT 1)
		   LIMIT 1)                                          MEM_PER_USE,
		  (SELECT N_PER_USE
		   FROM TB_MON_REAL_RESOURCE
		   WHERE 1 = 1 AND N_MON_ID = A.N_MON_ID AND S_MAP_KEY = (SELECT S_MAP_KEY
																  FROM TB_MON_MAP
																  WHERE N_MON_ID = A.N_MON_ID AND N_MON_TYPE = '2'
																  LIMIT 1)
		   LIMIT 1)                                          DISK_PER_USE,
		  COALESCE((SELECT N_POS_LEFT
					FROM TB_SVR_GROUP_POSITION
					WHERE N_GROUP_CODE = A.N_GROUP_CODE AND N_MON_ID = A.N_MON_ID
					LIMIT 1), 0)                             N_POS_LEFT,
		  COALESCE((SELECT N_POS_TOP
					FROM TB_SVR_GROUP_POSITION
					WHERE N_GROUP_CODE = A.N_GROUP_CODE AND N_MON_ID = A.N_MON_ID
					LIMIT 1), 0)                             N_POS_TOP,
		  (SELECT COUNT(*)
		   FROM TB_ALM
		   WHERE N_ALM_STATUS > 1 AND N_MON_ID = A.N_MON_ID) N_ALM_CNT
		FROM
		  (SELECT *
		   FROM TB_MON_INFO
		   WHERE N_MON_ID IN (SELECT N_MON_ID
							  FROM TB_USER_MON_LIST
							  WHERE S_USER_ID = #{SESSION_USER_ID})) A
		WHERE
			N_GROUP_CODE = #{N_GROUP_CODE}

  	</select>

  	<delete id="regSvrStatsMapPosQry1" parameterType="java.util.HashMap" statementType="PREPARED">
		/* realtime_status.regSvrStatsMapPosQry1 */
  		DELETE FROM TB_SVR_GROUP_POSITION
  		WHERE	N_GROUP_CODE = #{N_GROUP_CODE}
  		AND		N_MON_ID IN
  							(
								SELECT B FROM (
  									<foreach item="item" index="idx" collection="lst" separator="UNION">
  										SELECT ${item} FROM dual
  									</foreach>
  								)
  							)
	</delete>
	<insert id="regSvrStatsMapPosQry2" parameterType="java.util.HashMap" statementType="PREPARED">
  		INSERT INTO TB_SVR_GROUP_POSITION(N_GROUP_CODE, N_MON_ID, N_POS_LEFT, N_POS_TOP)
  		<foreach item="item" index="idx" collection="lst" separator="UNION">
  			SELECT ${item} FROM dual
  		</foreach>
	</insert>

	<select id="serverStatusQry2_all" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		/* realtime_status.serverStatusQry2_all */
		SELECT
		  N_GROUP_CODE,
		  N_TYPE_CODE,
		  SUM(CASE WHEN CONN_INFO = 'CONN'
			THEN CNT
			  ELSE 0 END) CONN_CNT,
		  SUM(CASE WHEN CONN_INFO = 'DISCONN'
			THEN CNT
			  ELSE 0 END) DISCONN_CNT,
		  SUM(ALM_CNT)    ALM_CNT
		FROM
		  (
			SELECT
			  COALESCE(N_UP_CODE, X.N_GROUP_CODE) N_GROUP_CODE,
			  N_TYPE_CODE,
			  CASE
			  WHEN B_CON_INFO = 'Y'
				THEN 'CONN'
			  ELSE 'DISCONN'
			  END      AS                         CONN_INFO,
			  COUNT(*) AS                         CNT,
			  SUM(ALM_CNT)                        ALM_CNT
			FROM
			  (SELECT
				  A.*,
				  (SELECT COUNT(*)
				   FROM TB_ALM
				   WHERE N_MON_ID = A.N_MON_ID AND N_ALM_STATUS > 1) ALM_CNT
				FROM TB_MON_INFO A
				WHERE N_MON_ID IN (SELECT N_MON_ID
								   FROM TB_USER_MON_LIST
								   WHERE S_USER_ID = #{SESSION_USER_ID})) X
				INNER JOIN (SELECT
							  n_group_code,
							  N_UP_CODE
							FROM (
								   SELECT
									 hierarchy_connect_by_parent_svr_group(n_group_code) AS n_group_code,
									 n_up_code
								   FROM (
										  SELECT
											<if test="N_GROUP_CODE == -1">@start_with := 0,</if>
									        <if test="N_GROUP_CODE != -1">@start_with := #{N_GROUP_CODE},</if>
											@n_group_code := @start_with,
											@level := 0
										) vars, tb_svr_group
								   WHERE @n_group_code IS NOT NULL
								 ) TREE) Y ON X.N_GROUP_CODE = Y.N_GROUP_CODE
		  ) A
			GROUP BY
			  N_GROUP_CODE, N_TYPE_CODE
			ORDER BY
			  N_GROUP_CODE, N_TYPE_CODE
  </select>

  <select id="serverStatusQry2_type" resultType="java.util.HashMap" parameterType="java.util.HashMap">
	/* realtime_status.serverStatusQry2_type */
	SELECT
	  N_GROUP_CODE,
	  N_TYPE_CODE,
	  SUM(CASE WHEN CONN_INFO = 'CONN'
		THEN CNT
		  ELSE 0 END) CONN_CNT,
	  SUM(CASE WHEN CONN_INFO = 'DISCONN'
		THEN CNT
		  ELSE 0 END) DISCONN_CNT,
	  SUM(ALM_CNT)    ALM_CNT
	FROM
	  (
		SELECT
		  N_UP_CODE N_GROUP_CODE,
		  N_TYPE_CODE,
		  CASE
		  WHEN B_CON_INFO = 'Y'
			THEN 'CONN'
		  ELSE 'DISCONN'
		  END      AS                         CONN_INFO,
		  COUNT(*) AS                         CNT,
		  SUM(ALM_CNT)                        ALM_CNT
		FROM
		  (SELECT
			 A.*,
			 (SELECT COUNT(*)
			  FROM TB_ALM
			  WHERE N_MON_ID = A.N_MON_ID AND N_ALM_STATUS > 1) ALM_CNT
		   FROM TB_MON_INFO A
		   WHERE N_MON_ID IN (SELECT N_MON_ID
							  FROM TB_USER_MON_LIST
							  WHERE S_USER_ID = #{SESSION_USER_ID})) X
		  INNER JOIN (SELECT
						n_group_code,
						N_UP_CODE
					  FROM (
							 SELECT
							   hierarchy_connect_by_parent_svr_group(n_group_code) AS n_group_code,
							   n_up_code
							 FROM (
									SELECT
									  <if test="N_GROUP_CODE == -1">@start_with := 0,</if>
	                                  <if test="N_GROUP_CODE != -1">@start_with := #{N_GROUP_CODE},</if>
									  @n_group_code := @start_with,
									  @level := 0
								  ) vars, tb_svr_group
							 WHERE @n_group_code IS NOT NULL
						   ) TREE) Y ON X.N_GROUP_CODE = Y.N_GROUP_CODE
		GROUP BY
		  N_UP_CODE, N_TYPE_CODE, B_CON_INFO
	  ) A
	GROUP BY
	  N_GROUP_CODE, N_TYPE_CODE
	ORDER BY
	  N_GROUP_CODE, N_TYPE_CODE
  </select>

  <select id="groupBySvrStatusQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
	  /* realtime_status.groupBySvrStatusQry */

			SELECT
					<if test="S_GROUP_FULL_CODE == '-1'">
						(SELECT S_GROUP_NAME FROM TB_SVR_GROUP WHERE N_GROUP_CODE =A.GROUP_CODE AND F_USE = 'Y') GROUP_NAME
					</if>
					<if test="S_GROUP_FULL_CODE != '-1'">
						(SELECT S_GROUP_NAME FROM TB_SVR_GROUP WHERE N_GROUP_CODE = (CASE WHEN INSTR(A.GROUP_CODE, '/') = 0 THEN A.GROUP_CODE ELSE SUBSTR(A.GROUP_CODE, LENGTH(A.GROUP_CODE) - (INSTR(A.GROUP_CODE, '/')-2)) END) AND F_USE = 'Y') GROUP_NAME
					</if>
					, GROUP_CODE S_GROUP_FULL_CODE
					, COALESCE((SELECT N_POS_LEFT FROM TB_SVR_GROUP_POSITION WHERE N_GROUP_CODE = '${N_GROUP_CODE}' AND S_GROUP_FULL_CODE = A.GROUP_CODE),0) N_POS_LEFT
					, COALESCE((SELECT N_POS_TOP FROM TB_SVR_GROUP_POSITION WHERE N_GROUP_CODE = '${N_GROUP_CODE}' AND S_GROUP_FULL_CODE = A.GROUP_CODE),0) N_POS_TOP
					, NORMAL, ERROR
			FROM
				(
						SELECT SUBSTR(A.PARENT_CODE, 1
										<if test="S_GROUP_FULL_CODE == '-1'">
											, CASE WHEN INSTR(A.PARENT_CODE, '/') = 0 THEN LENGTH(A.PARENT_CODE) ELSE INSTR(A.PARENT_CODE, '/')-1 END
										</if>
										<if test="S_GROUP_FULL_CODE != '-1'">
											, CASE WHEN INSTR(A.PARENT_CODE,'/') = 0 THEN LENGTH(A.PARENT_CODE) ELSE INSTR(A.PARENT_CODE,'/')-1 END
										</if>) GROUP_CODE
								, COALESCE(SUM(NORMAL),0) NORMAL, COALESCE(SUM(ERROR),0) ERROR
						FROM
								(
								SELECT
								  hierarchy_connect_by_parent_svr_group(n_group_code) AS n_group_code,
								  s_group_name,
								  n_up_code,
								  f_use,
								  CAST(@level AS CHAR)                        AS DEPTH,
								  hierarchy_sys_connect_by_path('/', n_group_code) as PARENT_CODE
								FROM (
									   SELECT
										 @start_with := 0,
										 @n_group_code := @start_with,
										 @level := 0
									 ) vars, tb_svr_group dc
								WHERE @n_group_code is not null
						  		) A
								,(
									SELECT
											N_GROUP_CODE, COALESCE(SUM(NORMAL),0) NORMAL, COALESCE(SUM(ERROR),0) ERROR
									FROM
											(
												SELECT
														N_GROUP_CODE
														, COALESCE((SELECT MAX(CASE WHEN N_ALM_STATUS = 0 THEN 1 ELSE 0 END) FROM TB_ALM WHERE N_MON_ID = A.N_MON_ID),1) NORMAL
														, (SELECT MAX(CASE WHEN N_ALM_STATUS != 0 THEN 1 ELSE 0 END) FROM TB_ALM WHERE N_MON_ID = A.N_MON_ID) ERROR
												FROM
														TB_MON_INFO A
											) A
									GROUP BY
											N_GROUP_CODE
								) B
					WHERE
							A.N_GROUP_CODE = B.N_GROUP_CODE
					<if test="S_GROUP_FULL_CODE != '-1'">
						<if test="S_GROUP_FULL_CODE != null">
						AND		A.PARENT_CODE LIKE concat('${S_GROUP_FULL_CODE}' , '' , '%')
						</if>
					</if>
					GROUP BY
							SUBSTR(A.PARENT_CODE, 1
									<if test="S_GROUP_FULL_CODE == '-1'">
										, CASE WHEN INSTR(A.PARENT_CODE, '/') = 0 THEN LENGTH(A.PARENT_CODE) ELSE INSTR(A.PARENT_CODE, '/')-1 END
									</if>
									<if test="S_GROUP_FULL_CODE != '-1'">
										, CASE WHEN INSTR(A.PARENT_CODE, '/') = 0 THEN LENGTH(A.PARENT_CODE) ELSE INSTR(A.PARENT_CODE, '/')-1 END
									</if>)
				) A

  </select>

	<select id="selectCenterMainGroup" resultType="java.util.HashMap">

		SELECT /* realtime_status.selectCenterMainGroup */
		N_GROUP_CODE AS CODE, S_GROUP_NAME AS VAL
		FROM TB_SVR_GROUP
		WHERE N_UP_CODE IS NULL
		ORDER BY N_GROUP_CODE
	</select>


	<!-- 단일 그룹용 쿼리 -->
	<select id="selectGroupAllStatus" resultType="java.util.HashMap" parameterType="java.lang.Integer">
		/* realtime_status.selectGroupAllStatus */
		SELECT A.N_GROUP_CODE
			, (SELECT S_GROUP_NAME FROM TB_SVR_GROUP WHERE N_GROUP_CODE = A.N_GROUP_CODE) AS S_GROUP_NAME
			, A.N_TYPE_CODE
			, (SELECT S_TYPE_NAME FROM TB_SVR_TYPE WHERE N_TYPE_CODE = A.N_TYPE_CODE) AS S_TYPE_NAME
		    , TYPE_ALL_CNT, TYPE_CON_CNT, TYPE_ALM_CNT, TYPE_ALM_STATUS
		    , ALL_MON_GRP_CNT, ALL_CON_GRP_CNT, ALL_ALM_GRP_CNT 
		FROM (
		     SELECT A.N_GROUP_CODE, A.N_TYPE_CODE, COALESCE(TYPE_ALL_CNT, 0) AS TYPE_ALL_CNT, COALESCE(TYPE_CON_CNT, 0) AS TYPE_CON_CNT, COALESCE(TYPE_ALM_CNT, 0) AS TYPE_ALM_CNT, COALESCE(TYPE_ALM_STATUS, 0) AS TYPE_ALM_STATUS
		     FROM (
		          SELECT COALESCE(C.N_UP_CODE, C.N_GROUP_CODE) AS N_GROUP_CODE, A.N_TYPE_CODE, COUNT(*) AS TYPE_ALL_CNT
		          FROM TB_MON_INFO A, TB_USER_MON_LIST B, TB_SVR_GROUP C, TB_SVR_TYPE D
		          WHERE 
		               A.N_MON_ID IN (B.N_MON_ID) AND  B.S_USER_ID = #{SESSION_USER_ID} 
		               AND A.N_GROUP_CODE = C.N_GROUP_CODE AND C.F_USE = 'Y' 
		               AND A.N_TYPE_CODE = D.N_TYPE_CODE AND D.F_USE = 'Y'
		          GROUP BY COALESCE(C.N_UP_CODE, C.N_GROUP_CODE), A.N_TYPE_CODE
		     ) A
		     LEFT OUTER JOIN
		     (
		          SELECT COALESCE(C.N_UP_CODE, C.N_GROUP_CODE) AS N_GROUP_CODE, A.N_TYPE_CODE, COUNT(*) AS TYPE_CON_CNT
		          FROM TB_MON_INFO A, TB_USER_MON_LIST B, TB_SVR_GROUP C, TB_SVR_TYPE D
		          WHERE 
		               A.N_MON_ID IN (B.N_MON_ID) AND A.B_CON_INFO = 'Y' AND B.S_USER_ID = #{SESSION_USER_ID}
		               AND A.N_GROUP_CODE = C.N_GROUP_CODE AND C.F_USE = 'Y' 
		               AND A.N_TYPE_CODE = D.N_TYPE_CODE AND D.F_USE = 'Y'
		          GROUP BY COALESCE(C.N_UP_CODE, C.N_GROUP_CODE), A.N_TYPE_CODE
		     ) B
		     ON A.N_GROUP_CODE = B.N_GROUP_CODE AND A.N_TYPE_CODE = B.N_TYPE_CODE
		     LEFT OUTER JOIN
		     (
		     SELECT COALESCE(C.N_UP_CODE, C.N_GROUP_CODE) AS N_GROUP_CODE, A.N_TYPE_CODE, COUNT(S_ALM_KEY) AS TYPE_ALM_CNT
		     FROM TB_MON_INFO A, TB_USER_MON_LIST B, TB_SVR_GROUP C, TB_SVR_TYPE D, TB_ALM E
		     WHERE 
		          A.N_MON_ID IN (B.N_MON_ID) AND B.S_USER_ID = #{SESSION_USER_ID}
		          AND A.N_GROUP_CODE = C.N_GROUP_CODE AND C.F_USE = 'Y' 
		          AND A.N_TYPE_CODE = D.N_TYPE_CODE AND D.F_USE = 'Y' 
		          AND A.N_MON_ID = E.N_MON_ID AND E.N_ALM_STATUS IN (2, 3, 5)
		     GROUP BY COALESCE(C.N_UP_CODE, C.N_GROUP_CODE), A.N_TYPE_CODE 
		     ) C
		     ON A.N_GROUP_CODE = C.N_GROUP_CODE AND A.N_TYPE_CODE = C.N_TYPE_CODE
		     LEFT OUTER JOIN
		     (
		          SELECT COALESCE(C.N_UP_CODE, C.N_GROUP_CODE) AS N_GROUP_CODE, A.N_TYPE_CODE, MIN(N_ALM_STATUS) AS TYPE_ALM_STATUS
		          FROM TB_MON_INFO A, TB_USER_MON_LIST B, TB_SVR_GROUP C, TB_SVR_TYPE D, TB_ALM E
		          WHERE 
		               A.N_MON_ID IN (B.N_MON_ID) AND B.S_USER_ID = #{SESSION_USER_ID}
		               AND A.N_GROUP_CODE = C.N_GROUP_CODE AND C.F_USE = 'Y' 
		               AND A.N_TYPE_CODE = D.N_TYPE_CODE AND D.F_USE = 'Y' 
		               AND A.N_MON_ID = E.N_MON_ID AND E.N_ALM_STATUS IN (2, 3, 5)
		          GROUP BY COALESCE(C.N_UP_CODE, C.N_GROUP_CODE), A.N_TYPE_CODE 
		     ) D
		     ON A.N_GROUP_CODE = D.N_GROUP_CODE AND A.N_TYPE_CODE = D.N_TYPE_CODE
		) A LEFT OUTER  JOIN
		(
		     SELECT A.N_GROUP_CODE, COALESCE(A.ALL_MON_GRP_CNT, 0) AS ALL_MON_GRP_CNT, COALESCE(B.ALL_CON_GRP_CNT, 0) AS ALL_CON_GRP_CNT, COALESCE(C.ALL_ALM_GRP_CNT, 0) AS ALL_ALM_GRP_CNT
		     FROM (
		          SELECT COALESCE(C.N_UP_CODE, C.N_GROUP_CODE) AS N_GROUP_CODE, COUNT(A.N_MON_ID) AS ALL_MON_GRP_CNT
		          FROM TB_MON_INFO A, TB_USER_MON_LIST B, TB_SVR_GROUP C, TB_SVR_TYPE D
		          WHERE A.N_MON_ID IN (B.N_MON_ID) AND  B.S_USER_ID = #{SESSION_USER_ID}
		               AND A.N_GROUP_CODE = C.N_GROUP_CODE AND C.F_USE = 'Y' 
		               AND A.N_TYPE_CODE = D.N_TYPE_CODE AND D.F_USE = 'Y'
		          GROUP BY COALESCE(C.N_UP_CODE, C.N_GROUP_CODE)
		     ) A
		     LEFT OUTER JOIN
		     (
		          SELECT COALESCE(C.N_UP_CODE, C.N_GROUP_CODE) AS N_GROUP_CODE, COUNT(A.N_MON_ID) AS ALL_CON_GRP_CNT
		          FROM TB_MON_INFO A, TB_USER_MON_LIST B, TB_SVR_GROUP C, TB_SVR_TYPE D
		          WHERE A.N_MON_ID IN (B.N_MON_ID) AND  B.S_USER_ID = #{SESSION_USER_ID}
		               AND A.N_GROUP_CODE = C.N_GROUP_CODE AND C.F_USE = 'Y' 
		               AND A.N_TYPE_CODE = D.N_TYPE_CODE AND D.F_USE = 'Y'
		               AND A.N_MON_ID NOT IN (SELECT N_MON_ID FROM TB_ALM WHERE N_MON_ID = A.N_MON_ID AND N_ALM_STATUS IN (2, 3))
		          GROUP BY COALESCE(C.N_UP_CODE, C.N_GROUP_CODE)
		     ) B
		     ON A.N_GROUP_CODE = B.N_GROUP_CODE
		     LEFT OUTER JOIN
		     (
		          SELECT COALESCE(C.N_UP_CODE, C.N_GROUP_CODE) AS N_GROUP_CODE, COUNT(A.N_MON_ID) AS ALL_ALM_GRP_CNT
		          FROM TB_MON_INFO A, TB_USER_MON_LIST B, TB_SVR_GROUP C, TB_SVR_TYPE D, TB_ALM E
		          WHERE A.N_MON_ID IN (B.N_MON_ID) AND  B.S_USER_ID = #{SESSION_USER_ID} 
		               AND A.N_GROUP_CODE = C.N_GROUP_CODE AND C.F_USE = 'Y' 
		               AND A.N_TYPE_CODE = D.N_TYPE_CODE AND D.F_USE = 'Y'
		               AND A.N_MON_ID = E.N_MON_ID AND E.N_ALM_STATUS IN (2, 3, 5)
		          GROUP BY COALESCE(C.N_UP_CODE, C.N_GROUP_CODE)
		     ) C
		     ON A.N_GROUP_CODE = C.N_GROUP_CODE
		) B
		ON A.N_GROUP_CODE = B.N_GROUP_CODE
		ORDER BY A.N_GROUP_CODE, A.N_TYPE_CODE
	</select>

	<select id="searchCallStatus" resultType="java.util.HashMap">
        /* mysql 로 변화 하기에는 시간 필요 */
		/* realtime_status.searchCallStatus */
		SELECT
		DISTINCT
		SUM(N_CALL_COUNT) OVER() ACC_TOTCNT
		, COALESCE(SUM( CASE WHEN (N_CALL_TYPE='51') THEN N_CALL_COUNT END) OVER(),0) IN_CALL /* 수신 */
		, COALESCE(SUM( CASE WHEN (N_CALL_TYPE BETWEEN '1' AND '10') THEN N_CALL_COUNT END) OVER(),0) OUT_CALL /* 발신 */
		, COALESCE(SUM( CASE WHEN (N_CALL_TYPE='50') THEN N_CALL_COUNT END) OVER(),0) COMPANY_CALL /* 내선 */
		, (SELECT DISTINCT COUNT(N_CALL_TYPE) OVER() INFO_TOTALCNT FROM TB_CALL_STATE_INFO) INFO_TOTCNT
		, (SELECT DISTINCT COUNT( CASE WHEN N_STATE_CODE='0' THEN N_STATE_CODE END) OVER() FROM TB_CALL_STATE_INFO ) CNT0  /* 대기중 */
		, (SELECT DISTINCT COUNT( CASE WHEN N_STATE_CODE='1' THEN N_STATE_CODE END) OVER() FROM TB_CALL_STATE_INFO ) CNT1  /* 전화연결중 */
		, (SELECT DISTINCT COUNT( CASE WHEN N_STATE_CODE='2' THEN N_STATE_CODE END) OVER() FROM TB_CALL_STATE_INFO ) CNT2  /* 통화중 */
		, (SELECT DISTINCT COUNT( CASE WHEN N_STATE_CODE='3' THEN N_STATE_CODE END) OVER() FROM TB_CALL_STATE_INFO ) CNT3  /* 연결되지않음 */
		FROM TB_CALL_ACCRUE
	</select>

	<!-- 실시간통계 CTI 호통계 인입, 응대호 Query -->
	<select id="ctiInConnDaily" resultType="java.util.HashMap" parameterType="java.util.HashMap">
	</select>

	<!-- 실시간통계 CTI 호통계 포기호 Query -->
	<select id="ctiAbandonedDaily" resultType="java.util.HashMap" parameterType="java.util.HashMap">

		/* realtime_status.ctiAbandonedDaily */
		SELECT
		  N_DAY
		  , N_CALL_TYPE
		  , COALESCE(SUM(case WHEN n_time = '00' then n_call_count end), 0) TIME_00
		  , COALESCE(SUM(case WHEN n_time = '01' then n_call_count end), 0) TIME_01
		  , COALESCE(SUM(case WHEN n_time = '02' then n_call_count end), 0) TIME_02
		  , COALESCE(SUM(case WHEN n_time = '03' then n_call_count end), 0) TIME_03
		  , COALESCE(SUM(case WHEN n_time = '04' then n_call_count end), 0) TIME_04
		  , COALESCE(SUM(case WHEN n_time = '05' then n_call_count end), 0) TIME_05
		  , COALESCE(SUM(case WHEN n_time = '06' then n_call_count end), 0) TIME_06
		  , COALESCE(SUM(case WHEN n_time = '07' then n_call_count end), 0) TIME_07
		  , COALESCE(SUM(case WHEN n_time = '08' then n_call_count end), 0) TIME_08
		  , COALESCE(SUM(case WHEN n_time = '09' then n_call_count end), 0) TIME_09
		  , COALESCE(SUM(case WHEN n_time = '10' then n_call_count end), 0) TIME_10
		  , COALESCE(SUM(case WHEN n_time = '11' then n_call_count end), 0) TIME_11
		  , COALESCE(SUM(case WHEN n_time = '12' then n_call_count end), 0) TIME_12
		  , COALESCE(SUM(case WHEN n_time = '13' then n_call_count end), 0) TIME_13
		  , COALESCE(SUM(case WHEN n_time = '14' then n_call_count end), 0) TIME_14
		  , COALESCE(SUM(case WHEN n_time = '15' then n_call_count end), 0) TIME_15
		  , COALESCE(SUM(case WHEN n_time = '16' then n_call_count end), 0) TIME_16
		  , COALESCE(SUM(case WHEN n_time = '17' then n_call_count end), 0) TIME_17
		  , COALESCE(SUM(case WHEN n_time = '18' then n_call_count end), 0) TIME_18
		  , COALESCE(SUM(case WHEN n_time = '19' then n_call_count end), 0) TIME_19
		  , COALESCE(SUM(case WHEN n_time = '20' then n_call_count end), 0) TIME_20
		  , COALESCE(SUM(case WHEN n_time = '21' then n_call_count end), 0) TIME_21
		  , COALESCE(SUM(case WHEN n_time = '22' then n_call_count end), 0) TIME_22
		  , COALESCE(SUM(case WHEN n_time = '23' then n_call_count end), 0) TIME_23
		FROM
		  (
			SELECT
			  N_DAY, N_TIME,
			  CASE
			  WHEN N_CALL_TYPE = '50' THEN '내선'
			  WHEN N_CALL_TYPE = '51' THEN '수신'
			  ELSE '발신'
			  END AS N_CALL_TYPE,
			  N_CALL_COUNT
			FROM TB_CALL_ACCRUE A
			  , (
				  SELECT
						   hierarchy_connect_by_parent_org_info(group_code) AS group_code
						 FROM (
								SELECT
								<if test="GROUP_CODE == ''">
							   	@org_start_with := 'TOP',
								</if>
								<if test="GROUP_CODE != '' and GROUP_CODE != null">
								@org_start_with := #{GROUP_CODE, jdbcType=VARCHAR},
								</if>
								@org_group_code := @org_start_with,
								@org_level := 0
							  ) vars, TB_ORG_INFO
						 WHERE @org_group_code IS NOT NULL
				) B
			WHERE A.GROUP_CODE = B.GROUP_CODE
		  ) TB_CALL_COUNT
		WHERE N_DAY = #{N_DAY, jdbcType=VARCHAR}
		GROUP BY N_DAY, N_CALL_TYPE
		ORDER BY N_CALL_TYPE
	</select>
	
	<select id="centerPbxServiceCurrentMaxUseInfo" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT 
			MAX(IPCC_TRUNK) AS IPCC_TRUNK -- IPCC최대동접회선수, 
			, MAX(IPT_TRUNK) AS IPT_TRUNK -- IPT최대동접회선수,
			, MAX(IVR_SESSION) AS IVR_SESSION -- ARS동접최대수
		FROM
			TB_DASH_PBX_IVR_COUNT
		WHERE DATE_FORMAT(COLLECT_DATE, '%Y%m%d') =  DATE_FORMAT(now(), '%Y%m%d')
	</select>
	
	<select id="centerPbxServiceCurrentUseInfo" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT 
			IPCC_TRUNK AS IPCC_TRUNK -- IPCC최대동접회선수, 
			, IPT_TRUNK AS IPT_TRUNK -- IPT최대동접회선수,
			, IVR_SESSION AS IVR_SESSION -- ARS동접최대수
		FROM
			TB_DASH_PBX_IVR_COUNT
		WHERE DATE_FORMAT(COLLECT_DATE, '%Y%m%d') =  DATE_FORMAT(now(), '%Y%m%d')
		ORDER BY COLLECT_DATE DESC
		LIMIT 1
	</select>	
	
	<select id="centerPbxServiceAvgUseInfo" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT 
		
			IFNULL(ROUND(AVG(IPCC_TRUNK), 0), 0) AS IPCC_TRUNK -- IPCC최대동접회선수, 
			, IFNULL(ROUND(AVG(IPT_TRUNK), 0), 0) AS IPT_TRUNK -- IPT최대동접회선수,
			, IFNULL(ROUND(AVG(IVR_SESSION), 0), 0) AS IVR_SESSION -- ARS동접최대수
		FROM
			TB_DASH_PBX_IVR_COUNT
		WHERE 
		<![CDATA[ 
			COLLECT_DATE > DATE_ADD(NOW(), INTERVAL -1 MONTH) 
			AND DATE_FORMAT(COLLECT_DATE, '%H') =  DATE_FORMAT(NOW(), '%H') 
			AND DATE_FORMAT(COLLECT_DATE, '%Y%m%d') NOT IN (
				SELECT DATE_FORMAT(TAGT_DATE, '%Y%m%d') FROM TB_CALENDAR WHERE TAGT_DATE < NOW() AND TAGT_DATE > DATE_ADD(NOW(), INTERVAL -1 MONTH)  AND HDAY_YN = 'Y' 
			)
		]]>
	</select>
	
	<select id="centerPbxServiceAvgMaxUseInfo" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT 
			IFNULL(ROUND(AVG(IPCC_TRUNK), 0), 0)	AS IPCC_TRUNK
			, IFNULL(ROUND(AVG(IPT_TRUNK), 0), 0)	AS IPT_TRUNK
			, IFNULL(ROUND(AVG(IVR_SESSION), 0), 0) AS IVR_SESSION	
		FROM 
		(
			SELECT 
				DATE_FORMAT(COLLECT_DATE, '%Y%m%d') AS COLLECT_DATE
				, IFNULL(MAX(IPCC_TRUNK), 0) AS IPCC_TRUNK
				, IFNULL(MAX(IPT_TRUNK), 0) AS IPT_TRUNK
				, IFNULL(MAX(IVR_SESSION), 0) AS IVR_SESSION
			FROM
				TB_DASH_PBX_IVR_COUNT A
			WHERE 
			<![CDATA[ 
				COLLECT_DATE > DATE_ADD(NOW(), INTERVAL -1 MONTH) 
				AND DATE_FORMAT(COLLECT_DATE, '%Y%m%d') NOT IN (
					SELECT DATE_FORMAT(TAGT_DATE, '%Y%m%d') FROM TB_CALENDAR WHERE TAGT_DATE < NOW() AND TAGT_DATE > DATE_ADD(NOW(), INTERVAL -1 MONTH)  AND HDAY_YN = 'Y' 
				)
			]]>
			GROUP BY COLLECT_DATE
		) A
	</select>
	
	
	<select id="centerCurrentServiceUseInfo" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT
			IFNULL(CALL_TOTAL, 0) AS CALL_TOTAL -- 총인입호
			, IFNULL(IN_TOTAL, 0) AS IN_TOTAL  -- 상담요청콜
			, IFNULL(EST_TOTAL, 0) AS EST_TOTAL -- 처리콜
			, IFNULL(ANS_RATE, 0) AS ANS_RATE -- 응대율
			, IFNULL(CALL_ABANDON, 0) AS CALL_ABANDON-- 포기콜,
			, IFNULL(CUSTWAIT_MAX, 0) AS CUSTWAIT_MAX -- 최대호대기수,
			, IFNULL(CHAT_TOTAL, 0) AS CHAT_TOTAL -- 채팅일누적,
			, IFNULL(VARS_TOTAL, 0) AS VARS_TOTAL -- 보이는ARS일누적,
			, IFNULL(AP_INVOKE_TOTAL, 0) + IFNULL(AP_INQUIRY_TOTAL, 0) AP_TOTAL -- Agent Total
			, IFNULL(AP_INVOKE_TOTAL, 0) AS AP_INVOKE_TOTAL -- AgentPush발송일누적,
			, IFNULL(AP_INQUIRY_TOTAL, 0) AS  AP_INQUIRY_TOTAL -- AgentPush조회일누적,
			, IFNULL(IP_INQUIRY_TOTAL, 0) AS IP_INQUIRY_TOTAL -- InfoPush일누적,
			, IFNULL(CENTER_TOT, 0) AS CENTER_TOT -- 고객센터누적인입호,
			, IFNULL(BRANCH_TOT, 0) AS BRANCH_TOT -- 지점누적인입호,
			, IFNULL(ARS_TOT, 0) AS ARS_TOT -- ARS누적인입호,
			, IFNULL(CHAT_TOT, 0) AS CHAT_TOT -- 채팅누적인입호
			, IFNULL(CALL_IDLE, 0) AS CALL_IDLE -- 대기호
			, IFNULL(CHAT_CONSULT, 0) AS CHAT_CONSULT -- 채팅상담
		FROM
		TB_DASH_SERVICE_COUNT
		ORDER BY COLLECT_DATE DESC
		LIMIT 1
	</select>
	
	<select id="centerAvgServiceUseInfo" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT 
			  IFNULL(ROUND(AVG(CALL_TOTAL), 0), 0) CALL_TOTAL
			, IFNULL(ROUND(AVG(IN_TOTAL), 0), 0) IN_TOTAL
			, IFNULL(ROUND(AVG(EST_TOTAL), 0), 0) EST_TOTAL
			, IFNULL(ROUND(AVG(ANS_RATE), 0), 0) ANS_RATE
			, IFNULL(ROUND(AVG(CALL_ABANDON), 0), 0) CALL_ABANDON
			, IFNULL(ROUND(AVG(CUSTWAIT_MAX), 0), 0) CUSTWAIT_MAX
			, IFNULL(ROUND(AVG(CHAT_TOTAL), 0), 0) CHAT_TOTAL
			, IFNULL(ROUND(AVG(VARS_TOTAL), 0), 0) VARS_TOTAL
			, IFNULL(ROUND(AVG(AP_INVOKE_TOTAL), 0), 0) AP_INVOKE_TOTAL
			, IFNULL(ROUND(AVG(AP_INQUIRY_TOTAL), 0), 0) AP_INQUIRY_TOTAL
			, IFNULL(ROUND(AVG(IP_INQUIRY_TOTAL), 0), 0) IP_INQUIRY_TOTAL
			, IFNULL(ROUND(AVG(CENTER_TOT), 0), 0) CENTER_TOT
			, IFNULL(ROUND(AVG(BRANCH_TOT), 0), 0) BRANCH_TOT
			, IFNULL(ROUND(AVG(ARS_TOT), 0), 0) ARS_TOT
			, IFNULL(ROUND(AVG(CHAT_TOT), 0), 0) CHAT_TOT
			, IFNULL(ROUND(AVG(CALL_IDLE), 0), 0) CALL_IDLE
			, IFNULL(ROUND(AVG(CHAT_CONSULT), 0), 0) CHAT_CONSULT
		FROM TB_DASH_SERVICE_COUNT
		WHERE
		<![CDATA[ 
			COLLECT_DATE > DATE_ADD(NOW(), INTERVAL -1 MONTH) 
			AND DATE_FORMAT(COLLECT_DATE, '%H') =  DATE_FORMAT(NOW(), '%H') 
			AND DATE_FORMAT(COLLECT_DATE, '%Y%m%d') NOT IN (
				SELECT DATE_FORMAT(TAGT_DATE, '%Y%m%d') FROM TB_CALENDAR WHERE TAGT_DATE < NOW() AND TAGT_DATE > DATE_ADD(NOW(), INTERVAL -1 MONTH)  AND HDAY_YN = 'Y' 
			)
		]]>
	</select>
	
	<select id="centerCallCurrentUseInfo" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT 
			IFNULL(QNA, 0) AS QNA,
			IFNULL(CUST_OFFER, 0) AS CUST_OFFER,
			IFNULL(COMPLAINT, 0) AS COMPLAINT
		FROM TB_DASH_DASHBOARD_COUNT 
		ORDER BY COLLECT_DATE DESC LIMIT 1
	</select>
	
	<select id="centerCallAvgUseInfo" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT 
			IFNULL(QNA, 0) AS QNA,
			IFNULL(CUST_OFFER, 0) AS CUST_OFFER,
			IFNULL(COMPLAINT, 0) AS COMPLAINT
		FROM TB_DASH_DASHBOARD_COUNT_AVG
		ORDER BY COLLECT_DATE DESC LIMIT 1
	</select>
	
	<select id="centerRecCurrentUseInfo" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT 
			IFNULL(IPCC, 0) AS IPCC,
			IFNULL(IPT, 0) AS IPT,
			IFNULL(FACE_TO_FACE, 0) AS FACE_TO_FACE,
	 		IFNULL(PART, 0) AS PART,
			IFNULL(TRANSFER_CHANNEL, 0) AS TRANSFER_CHANNEL,
	  		IFNULL(TRANSFER_PEEK, 0) AS TRANSFER_PEEK,
			IFNULL(TRANSFER_CALL, 0) AS TRANSFER_CALL,
			IFNULL(HOTLINE, 0) AS HOTLINE,
			IFNULL(SCREEN, 0) AS SCREEN
		FROM TB_HTTP_RECORD_COUNT_INFO 
		ORDER BY COLLECT_DATE DESC 
		LIMIT 1
	</select>
	
	<select id="centerRecAvgUseInfo" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT IFNULL(ROUND(AVG(IPCC), 0), 0) AS IPCC, 
			IFNULL(ROUND(AVG(IPT), 0), 0) AS IPT, 
			IFNULL(ROUND(AVG(FACE_TO_FACE), 0), 0) AS FACE_TO_FACE,
			IFNULL(ROUND(AVG(PART), 0), 0) AS PART, 
			IFNULL(ROUND(AVG(TRANSFER_CHANNEL), 0), 0) AS TRANSFER_CHANNEL, 
			IFNULL(ROUND(AVG(TRANSFER_PEEK), 0), 0) AS TRANSFER_PEEK,
	 		IFNULL(ROUND(AVG(TRANSFER_CALL), 0), 0) AS TRANSFER_CALL, 
			IFNULL(ROUND(AVG(HOTLINE), 0), 0) AS HOTLINE,
			IFNULL(ROUND(AVG(SCREEN), 0), 0) AS SCREEN
		FROM TB_HTTP_RECORD_COUNT_INFO 
		WHERE 
		<![CDATA[ 
			COLLECT_DATE > DATE_ADD(NOW(), INTERVAL -1 MONTH) 
			AND DATE_FORMAT(COLLECT_DATE, '%H') =  DATE_FORMAT(NOW(), '%H') 
			AND DATE_FORMAT(COLLECT_DATE, '%Y%m%d') NOT IN (
				SELECT DATE_FORMAT(TAGT_DATE, '%Y%m%d') FROM TB_CALENDAR WHERE TAGT_DATE < NOW() AND TAGT_DATE > DATE_ADD(NOW(), INTERVAL -1 MONTH)  AND HDAY_YN = 'Y' 
			)
		]]>
	</select>
	
	<select id="centerCmsCurrentUseInfo" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT
			IFNULL(JIJUM_CALLS, 0) AS JIJUM_CALLS 
			, IFNULL(JIJUM_TRANS, 0) AS JIJUM_TRANS
			, IFNULL(CENTER_TRANS, 0) AS CENTER_TRANS
			, IFNULL(MAX_INQUEUE, 0) AS MAX_INQUEUE
		FROM tb_dash_cms_service_count 
		ORDER BY D_UPDATE_TIME DESC 
		LIMIT 1
	</select>
	
	<select id="centerCmsAvgUseInfo" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT 
			IFNULL(ROUND(AVG(JIJUM_CALLS), 0), 0) AS JIJUM_CALLS 
			, IFNULL(ROUND(AVG(JIJUM_TRANS), 0), 0) AS JIJUM_TRANS 
			, IFNULL(ROUND(AVG(CENTER_TRANS), 0), 0) AS CENTER_TRANS
			, IFNULL(ROUND(AVG(MAX_INQUEUE), 0), 0) AS MAX_INQUEUE
		FROM tb_dash_cms_service_count 
		WHERE 
		<![CDATA[ 
			D_UPDATE_TIME > DATE_ADD(NOW(), INTERVAL -1 MONTH) 
			AND DATE_FORMAT(D_UPDATE_TIME, '%H') =  DATE_FORMAT(NOW(), '%H') 
			AND DATE_FORMAT(D_UPDATE_TIME, '%Y%m%d') NOT IN (
				SELECT DATE_FORMAT(TAGT_DATE, '%Y%m%d') FROM TB_CALENDAR WHERE TAGT_DATE < NOW() AND TAGT_DATE > DATE_ADD(NOW(), INTERVAL -1 MONTH)  AND HDAY_YN = 'Y' 
			)
		]]>
	</select>
	
	<select id="centerConnectInfo" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT IPCC_TOTAL.CNT AS IPCC_TOTAL, IPT_TOTAL.CNT AS IPT_TOTAL, OFFICER_TOTAL.CNT AS OFFICER_TOTAL, IPCC_DISCONNECT.CNT AS IPCC_DISCONNECT, 
			   IPT_DISCONNECT.CNT AS IPT_DISCONNECT, OFFICER_DISCONNECT.CNT AS OFFICER_DISCONNECT
		FROM 
		<![CDATA[ 
		(
			SELECT B.N_GROUP_CODE, count(*) CNT FROM tb_cli_pbx_regipstation A, tb_mon_info B WHERE A.MON_ID = B.N_MON_ID AND N_GROUP_CODE = 10000
		) IPCC_TOTAL,
		(
			SELECT B.N_GROUP_CODE, count(*) CNT FROM tb_cli_pbx_regipstation A, tb_mon_info B WHERE A.MON_ID = B.N_MON_ID AND N_GROUP_CODE = 15000
		) IPT_TOTAL, 
		(
			SELECT B.N_GROUP_CODE, count(*) CNT FROM tb_cli_pbx_regipstation A, tb_mon_info B WHERE A.MON_ID = B.N_MON_ID AND N_GROUP_CODE = 15000 AND A.S_TYPE = '9641'
		) OFFICER_TOTAL,		
		(
			SELECT count(*) CNT FROM rept_emp_Tb WHERE CC_EXTENSION_NO not in (SELECT STATION_EXT from tb_cli_pbx_regipstation) AND (LEAVE_DAY >= now() OR LEAVE_DAY IS NULL) AND DEPT_CODE = '00004'
		) IPCC_DISCONNECT, 
		(
			SELECT count(*) CNT FROM rept_emp_Tb WHERE EXTENSION_NO not in (SELECT STATION_EXT from tb_cli_pbx_regipstation) AND (LEAVE_DAY >= now() OR LEAVE_DAY IS NULL) AND DEPT_CODE != '00004'
		) IPT_DISCONNECT,
		(
			SELECT count(*) CNT FROM rept_emp_Tb WHERE EXTENSION_NO not in (SELECT STATION_EXT from tb_cli_pbx_regipstation) AND (LEAVE_DAY >= now() OR LEAVE_DAY IS NULL) AND DEPT_CODE != '00004' AND TITLE_CODE < '007'
		) OFFICER_DISCONNECT	
		]]>	
	</select>
</mapper>