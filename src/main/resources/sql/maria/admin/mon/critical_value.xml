<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="critical_value">

	<sql id="SQL_OderBy">
		<foreach collection="sort" item="s" separator=",">
			${s.field} ${s.dir}
		</foreach>
	</sql>

	<!--
		임계치 테이블이 4개이므로 UNION ALL 을 사용하여 Query
		다른 부분은 VALUE2 부분이 테이블별로 다른 Column 값을 String 으로 합쳐서 출력하는 부분과
		CHECK_VAL 부분은 삭제시 사용할 데이터를 JSON 형태로 만들어서 넘기는 부분이 다름
	-->
  <select id="select_list" resultType="hashmap" parameterType="hashmap">
	  SELECT /* critical_value.select_list */ *, @NUM AS TOTAL_COUNT
	  FROM (
	  		SELECT @NUM := @NUM + 1 NUM, Y.*
	  		FROM (
			  SELECT
					  A.N_MON_ID,
					  (SELECT S_MON_NAME FROM TB_MON_INFO WHERE N_MON_ID = A.N_MON_ID) AS S_MON_NAME,
					  (SELECT S_GROUP_NAME FROM TB_SVR_GROUP WHERE N_GROUP_CODE = B.N_GROUP_CODE AND F_USE = 'Y') AS S_GROUP_NAME,
	  				  B.N_TYPE_CODE,
					  (SELECT S_TYPE_NAME FROM TB_SVR_TYPE WHERE N_TYPE_CODE = B.N_TYPE_CODE) AS S_TYPE_NAME,
					  (SELECT S_ALM_RATING_NAME FROM TB_ALM_RATING_CODE WHERE N_ALM_RATING = A.N_ALM_RATING) AS S_ALM_RATING_NAME,
					  (SELECT S_ALM_MSG FROM TB_ALM_CODE WHERE N_ALM_TYPE = A.N_ALM_TYPE AND N_ALM_CODE = A.N_ALM_CODE) AS S_ALM_MSG,
					  A.S_START_TIME,
					  A.S_END_TIME,
					  CONCAT(A.N_VALUE_A , ' ~ ' , A.N_VALUE_B) AS VALUE1,
					  '' AS VALUE2,
					  A.N_THRESHOLD,
					  A.N_USE,
					  CONCAT('{"N_MON_ID":"' , A.N_MON_ID , '","N_ALM_TYPE":"' , A.N_ALM_TYPE , '","N_ALM_CODE":' , A.N_ALM_CODE , ',"N_ALM_RATING":"', A.N_ALM_RATING, '","S_START_TIME":"', A.S_START_TIME, '","S_END_TIME":"', A.S_END_TIME, '"}') AS CHECK_VAL
			  FROM TB_THRESHOLD A
			  INNER JOIN TB_MON_INFO B
			  ON A.N_MON_ID = B.N_MON_ID
			  <where>
				  <if test="N_GROUP_CODE != '' and N_GROUP_CODE != null">
						  AND B.N_GROUP_CODE = #{N_GROUP_CODE}
				  </if>
				  <if test="N_TYPE_CODE != '' and N_TYPE_CODE != null">
					  AND B.N_TYPE_CODE = #{N_TYPE_CODE}
				  </if>
				  <if test="SEARCH_TYPE != null and SEARCH_TYPE != '' and SEARCH_TYPE == 'ID'">
					  AND B.N_MON_ID LIKE CONCAT('%', #{SEARCH_KEYWORD}, '%')
				  </if>
				  <if test="SEARCH_TYPE != null and SEARCH_TYPE != '' and SEARCH_TYPE == 'NM'">
					  AND B.S_MON_NAME LIKE CONCAT('%', #{SEARCH_KEYWORD}, '%')
				  </if>
				  <if test="SEARCH_TYPE != null and SEARCH_TYPE != '' and SEARCH_TYPE == 'IP'">
					  AND B.S_MON_IP LIKE CONCAT('%', #{SEARCH_KEYWORD}, '%')
				  </if>
			  </where>
			  UNION ALL
			  SELECT
					  A.N_MON_ID,
					  (SELECT S_MON_NAME FROM TB_MON_INFO WHERE N_MON_ID = A.N_MON_ID) AS S_MON_NAME,
					  (SELECT S_GROUP_NAME FROM TB_SVR_GROUP WHERE N_GROUP_CODE = B.N_GROUP_CODE AND F_USE = 'Y') AS S_GROUP_NAME,
	  				  B.N_TYPE_CODE,
					  (SELECT S_TYPE_NAME FROM TB_SVR_TYPE WHERE N_TYPE_CODE = B.N_TYPE_CODE) AS S_TYPE_NAME,
					  (SELECT S_ALM_RATING_NAME FROM TB_ALM_RATING_CODE WHERE N_ALM_RATING = A.N_ALM_RATING) AS S_ALM_RATING_NAME,
					  (SELECT S_ALM_MSG FROM TB_ALM_CODE WHERE N_ALM_TYPE = A.N_ALM_TYPE AND N_ALM_CODE = A.N_ALM_CODE) AS S_ALM_MSG,
					  A.S_START_TIME,
					  A.S_END_TIME,
					  CONCAT(A.N_VALUE_A , ' ~ ' , A.N_VALUE_B) AS VALUE1,
					  '그룹:' || CONVERT(A.N_GROUP_NUM, char) AS VALUE2,
					  A.N_THRESHOLD,
					  A.N_USE,
					  CONCAT(
					  		'{"N_MON_ID":"', A.N_MON_ID, 
							  	 '","N_ALM_TYPE"	:"', A.N_ALM_TYPE,
								 '","N_ALM_CODE"	:"', A.N_ALM_CODE, 
							  	 '","N_ALM_RATING"	:"', A.N_ALM_RATING,
								 '","S_START_TIME"	:"', A.S_START_TIME,
								 '","S_END_TIME"	:"', A.S_END_TIME,
								 '","N_GROUP_NUM"	:"', A.N_GROUP_NUM,
							'"}') AS CHECK_VAL					  
			  FROM TB_PBX_TRUNK_THRESHOLD A
			  INNER JOIN TB_MON_INFO B ON A.N_MON_ID = B.N_MON_ID
			  <where>
				  <if test="N_GROUP_CODE != '' and N_GROUP_CODE != null">
						  AND B.N_MON_ID IN (SELECT N_MON_ID FROM TB_MON_INFO WHERE N_GROUP_CODE = #{N_GROUP_CODE})
				  </if>
				  <if test="N_TYPE_CODE != '' and N_TYPE_CODE != null">
					  AND B.N_TYPE_CODE = #{N_TYPE_CODE}
				  </if>
				  <if test="SEARCH_TYPE != null and SEARCH_TYPE != '' and SEARCH_TYPE == 'ID'">
					  AND B.N_MON_ID LIKE CONCAT('%', #{SEARCH_KEYWORD}, '%')
				  </if>
				  <if test="SEARCH_TYPE != null and SEARCH_TYPE != '' and SEARCH_TYPE == 'NM'">
					  AND B.S_MON_NAME LIKE CONCAT('%', #{SEARCH_KEYWORD}, '%')
				  </if>
				  <if test="SEARCH_TYPE != null and SEARCH_TYPE != '' and SEARCH_TYPE == 'IP'">
					  AND B.S_MON_IP LIKE CONCAT('%', #{SEARCH_KEYWORD}, '%')
				  </if>
			  </where>
	  		) Y,
	  		(SELECT @NUM := 0) R
	  ) X
	  ORDER BY
	  <if test="sort == null">N_MON_ID, S_TYPE_NAME, S_ALM_MSG, S_ALM_RATING_NAME, S_START_TIME, S_END_TIME</if>
	  <if test="sort != null">
		  <choose>
			  <when test="sort.size() == 0">
				  N_MON_ID, S_TYPE_NAME, S_ALM_MSG, S_ALM_RATING_NAME, S_START_TIME, S_END_TIME
			  </when>
			  <otherwise>
				  <include refid="SQL_OderBy"/>
			  </otherwise>
		  </choose>
	  </if>
	  LIMIT #{firstRecordIndex}, #{lastRecordIndex}
  </select>

	<!-- 임계치 등록 -->
  <insert id="insert_threshold_data" parameterType="hashmap" statementType="PREPARED">
  		INSERT INTO /* critical_value.insert_threshold_data */ TB_THRESHOLD (N_MON_ID, N_ALM_TYPE, N_ALM_CODE, N_ALM_RATING, S_START_TIME, S_END_TIME, N_VALUE_A, N_VALUE_B, N_USE, N_THRESHOLD, N_REPEAT)
		SELECT
	  			N_MON_ID, N_ALM_TYPE, N_ALM_CODE, N_ALM_RATING, S_START_TIME, S_END_TIME, N_VALUE_A, N_VALUE_B, N_USE, N_THRESHOLD, N_REPEAT
		FROM
		        (
            		<foreach item="item" collection="svr_lst" separator="UNION">
						SELECT #{item} N_MON_ID FROM dual
					</foreach>
        		) A,
        		(
                    SELECT #{N_ALM_TYPE} N_ALM_TYPE, #{N_ALM_CODE} N_ALM_CODE, #{N_ALM_RATING} N_ALM_RATING, #{S_START_TIME} S_START_TIME,
                            #{S_END_TIME} S_END_TIME, #{N_VALUE_A} N_VALUE_A, #{N_VALUE_B, jdbcType=INTEGER} N_VALUE_B, #{N_USE} N_USE, #{N_THRESHOLD} N_THRESHOLD, 0 N_REPEAT FROM dual
        		) B
  </insert>

	<!-- Trunk Traffic 임계치 등록 -->
	<insert id="insert_traffic_trunk_threshold_data" parameterType="hashmap" statementType="PREPARED">
		INSERT INTO /* critical_value.insert_traffic_trunk_threshold_data */ TB_PBX_TRUNK_THRESHOLD (N_MON_ID, N_GROUP_NUM, N_ALM_TYPE, N_ALM_CODE, N_ALM_RATING, S_START_TIME, S_END_TIME, N_VALUE_A, N_VALUE_B, N_USE, N_THRESHOLD, N_REPEAT)
		SELECT
				N_MON_ID, N_GROUP_NUM, N_ALM_TYPE, N_ALM_CODE, N_ALM_RATING, S_START_TIME, S_END_TIME, N_VALUE_A, N_VALUE_B, N_USE, N_THRESHOLD, N_REPEAT
		FROM
				(
					<foreach item="item" collection="svr_lst" separator="UNION">
						SELECT #{item} N_MON_ID FROM dual
					</foreach>
				) A,
				(
					SELECT #{N_GROUP_NUM} N_GROUP_NUM, #{N_ALM_TYPE} N_ALM_TYPE, #{N_ALM_CODE} N_ALM_CODE, #{N_ALM_RATING} N_ALM_RATING, #{S_START_TIME} S_START_TIME,
							#{S_END_TIME} S_END_TIME, #{N_VALUE_A} N_VALUE_A, #{N_VALUE_B, jdbcType=INTEGER} N_VALUE_B, #{N_USE} N_USE, #{N_THRESHOLD} N_THRESHOLD, 0 N_REPEAT FROM dual
				) B
	</insert>

	<!-- 시나리오 임계치 등록 -->
	<insert id="insert_ivr_app_threshold_data" parameterType="hashmap" statementType="PREPARED">
		INSERT INTO /* critical_value.insert_ivr_app_threshold_data */ TB_IVR_APP_THRESHOLD (N_MON_ID, S_COMPANY, N_GROUP_CODE, S_APP_ID, N_ALM_TYPE, N_ALM_CODE, N_ALM_RATING, S_START_TIME, S_END_TIME, N_VALUE_A, N_VALUE_B, N_USE, N_THRESHOLD, N_REPEAT)
		SELECT
				N_MON_ID, S_COMPANY, N_GROUP_CODE, S_APP_ID, N_ALM_TYPE, N_ALM_CODE, N_ALM_RATING, S_START_TIME, S_END_TIME, N_VALUE_A, N_VALUE_B, N_USE, N_THRESHOLD, N_REPEAT
		FROM
				(
					<foreach item="item" collection="svr_lst" separator="UNION">
						SELECT #{item} N_MON_ID FROM dual
					</foreach>
				) A,
				(
					SELECT #{S_COMPANY} S_COMPANY, #{N_GROUP_CODE} N_GROUP_CODE, #{S_APP_ID} S_APP_ID, #{N_ALM_TYPE} N_ALM_TYPE, #{N_ALM_CODE} N_ALM_CODE, #{N_ALM_RATING} N_ALM_RATING, #{S_START_TIME} S_START_TIME,
					#{S_END_TIME} S_END_TIME, #{N_VALUE_A} N_VALUE_A, #{N_VALUE_B, jdbcType=INTEGER} N_VALUE_B, #{N_USE} N_USE, #{N_THRESHOLD} N_THRESHOLD, 0 N_REPEAT FROM dual
				) B
	</insert>

	<insert id="thresholdInsViewToProcess" parameterType="java.util.HashMap" statementType="PREPARED">
		INSERT INTO /* critical_value.thresholdInsViewToProcess */ TB_INS_COMMAND
			(N_SID, D_IN_TIME, N_FROM, N_TO, N_COMMAND)
		SELECT
			N_SID, D_IN_TIME, N_FROM, N_TO, N_COMMAND
		FROM
			(
			<foreach item="item" collection="svr_lst" separator="UNION">
				SELECT #{item} N_SID FROM dual
			</foreach>
			) A,
			(
				SELECT NOW() D_IN_TIME, #{N_FROM} N_FROM, #{N_TO} N_TO, #{N_COMMAND} N_COMMAND FROM dual
			) B
	</insert>

	<update id="update_threshold_data" parameterType="java.util.HashMap">
		UPDATE /* critical_value.update_threshold_data */ TB_THRESHOLD
		SET
		       N_VALUE_A    = #{N_VALUE_A},
		       N_VALUE_B    = #{N_VALUE_B},
		       N_USE        = #{N_USE},
		       N_THRESHOLD  = #{N_THRESHOLD},
		       N_REPEAT     = 0
		WHERE  N_MON_ID     = #{N_MON_ID}
		AND    N_ALM_TYPE   = #{N_ALM_TYPE}
		AND    N_ALM_CODE   = #{N_ALM_CODE}
		AND    N_ALM_RATING = #{N_ALM_RATING}
		AND    S_START_TIME = #{S_START_TIME}
		AND    S_END_TIME   = #{S_END_TIME}
	</update>

	<update id="update_traffic_trunk_threshold_data" parameterType="java.util.HashMap">
		UPDATE /* critical_value.update_traffic_trunk_threshold_data */ TB_PBX_TRUNK_THRESHOLD
		SET    N_VALUE_A    = #{N_VALUE_A},
		       N_VALUE_B    = #{N_VALUE_B},
		       N_USE        = #{N_USE},
		       N_THRESHOLD  = #{N_THRESHOLD},
		       N_REPEAT     = 0
		WHERE  N_MON_ID     = #{N_MON_ID}
		AND    N_GROUP_NUM  = #{N_GROUP_NUM}
		AND    N_ALM_TYPE   = #{N_ALM_TYPE}
		AND    N_ALM_CODE   = #{N_ALM_CODE}
		AND    N_ALM_RATING = #{N_ALM_RATING}
		AND    S_START_TIME = #{S_START_TIME}
		AND    S_END_TIME   = #{S_END_TIME}
	</update>

	<update id="update_ivr_app_threshold_data" parameterType="java.util.HashMap">
		UPDATE /* critical_value.update_ivr_app_threshold_data */ TB_IVR_APP_THRESHOLD
		SET    N_VALUE_A	= #{N_VALUE_A},
			   N_VALUE_B	= #{N_VALUE_B},
			   N_USE		= #{N_USE},
			   N_THRESHOLD	= #{N_THRESHOLD},
			   N_REPEAT		= 0
		WHERE  N_MON_ID     = #{N_MON_ID}
		AND    S_COMPANY    = #{S_COMPANY}
		AND    N_GROUP_CODE = #{N_GROUP_CODE}
		AND    S_APP_ID     = #{S_APP_ID}
		AND    N_ALM_TYPE   = #{N_ALM_TYPE}
		AND    N_ALM_CODE   = #{N_ALM_CODE}
		AND    N_ALM_RATING = #{N_ALM_RATING}
		AND    S_START_TIME = #{S_START_TIME}
		AND    S_END_TIME   = #{S_END_TIME}
	</update>

  <delete id="delete_threshold_data" parameterType="hashmap" statementType="PREPARED">
  		DELETE FROM /* critical_value.delete_threshold_data */ TB_THRESHOLD
		WHERE N_MON_ID = #{N_MON_ID}
  		  AND N_ALM_TYPE = #{N_ALM_TYPE}
  		  AND N_ALM_CODE = #{N_ALM_CODE}
  		  AND N_ALM_RATING = #{N_ALM_RATING}
  		  AND S_START_TIME = #{S_START_TIME}
  		  AND S_END_TIME = #{S_END_TIME}
  </delete>

	<delete id="delete_traffic_trunk_threshold_data" parameterType="hashmap" statementType="PREPARED">
		DELETE FROM /* critical_value.delete_traffic_trunk_threshold_data */ TB_PBX_TRUNK_THRESHOLD
		WHERE N_MON_ID = #{N_MON_ID}
		AND N_GROUP_NUM = #{N_GROUP_NUM}
		AND N_ALM_TYPE = #{N_ALM_TYPE}
		AND N_ALM_CODE = #{N_ALM_CODE}
		AND N_ALM_RATING = #{N_ALM_RATING}
		AND S_START_TIME = #{S_START_TIME}
		AND S_END_TIME = #{S_END_TIME}
	</delete>
  
  <select id="detail_info" resultType="hashmap" parameterType="hashmap">
  </select>

	<!-- 임계치 설정 알람코드 목록 -->
	<select id="thresholdAlmCodes" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT /* critical_value.thresholdAlmCodes */
				CONCAT(N_ALM_TYPE, ';', N_ALM_CODE) AS CODE, S_ALM_MSG AS VAL
		  FROM TB_ALM_CODE
		 WHERE N_ALM_TYPE = #{N_ALM_TYPE}
		   AND N_ALM_CODE IN
			<foreach collection="almCodes" item="item" index="index" separator="," open="(" close=")">
				#{item}
			</foreach>
		ORDER BY N_ALM_TYPE, N_ALM_CODE
	</select>

	<!-- 임계치 설정 중복체크 -->
	<select id="duplicateThresholdTime" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT /* critical_value.duplicateThresholdTime */
				COUNT(A.N_MON_ID) AS CNT, B.S_MON_NAME
		  FROM TB_THRESHOLD A INNER JOIN TB_MON_INFO B
		    ON A.N_MON_ID = B.N_MON_ID
		   AND A.N_MON_ID IN
				<foreach collection="svr_lst" item="item" index="index" separator="," open="(" close=")">
					#{item}
				</foreach>
  		   AND A.N_ALM_TYPE = #{N_ALM_TYPE}
  		   AND A.N_ALM_CODE = #{N_ALM_CODE}
  		   AND A.N_ALM_RATING = #{N_ALM_RATING}
		   AND CONVERT(REPLACE(A.S_START_TIME, ':', ''), SIGNED) &lt;= #{time}
	 	   AND CONVERT(REPLACE(A.S_END_TIME, ':', ''), SIGNED) &gt; #{time}
	 	GROUP BY A.N_MON_ID, B.S_MON_NAME
	</select>

	<!-- Traffic Trunk 임계치 설정 중복체크 -->
	<select id="duplicateTrafficTrunkThresholdTime" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT /* critical_value.duplicateTrafficTrunkThresholdTime */
				COUNT(A.N_MON_ID) AS CNT, B.S_MON_NAME
		FROM TB_PBX_TRUNK_THRESHOLD A INNER JOIN TB_MON_INFO B
		ON A.N_MON_ID = B.N_MON_ID
		AND A.N_MON_ID IN
		<foreach collection="svr_lst" item="item" index="index" separator="," open="(" close=")">
			#{item}
		</foreach>
			AND A.N_GROUP_NUM = #{N_GROUP_NUM}
			AND A.N_ALM_TYPE = #{N_ALM_TYPE}
			AND A.N_ALM_CODE = #{N_ALM_CODE}
			AND A.N_ALM_RATING = #{N_ALM_RATING}
			AND CONVERT(REPLACE(A.S_START_TIME, ':', ''), SIGNED) &lt;= #{time}
			AND CONVERT(REPLACE(A.S_END_TIME, ':', ''), SIGNED) &gt; #{time}
		GROUP BY A.N_MON_ID, B.S_MON_NAME
	</select>

	<select id="trafficTrunkGroupNumber" resultType="java.util.HashMap">
		SELECT /* critical_value.trafficTrunkGroupNumber */ GROUP_NUM AS VAL, GROUP_NUM AS CODE
		  FROM TB_CLI_PBX_TRAFFIC_TRUNK
	</select>

	<select id="detailThreshold" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT /* critical_value.detailThreshold */
				N_MON_ID, N_ALM_TYPE, N_ALM_CODE,
				N_ALM_RATING, S_START_TIME, S_END_TIME,
				N_VALUE_A, N_VALUE_B, N_USE,
				N_THRESHOLD, N_REPEAT
		FROM
				TB_THRESHOLD
		WHERE
				N_MON_ID 	 = #{N_MON_ID}
		AND 	N_ALM_TYPE 	 = #{N_ALM_TYPE}
		AND 	N_ALM_CODE   = #{N_ALM_CODE}
		AND 	N_ALM_RATING = #{N_ALM_RATING}
		AND 	S_START_TIME = #{S_START_TIME}
		AND 	S_END_TIME 	 = #{S_END_TIME}
	</select>

	<select id="detailTrafficTrunkThreshold" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT /* critical_value.detailThreshold */
			    N_MON_ID, N_GROUP_NUM, N_ALM_TYPE,
			    N_ALM_CODE, N_ALM_RATING, S_START_TIME,
			    S_END_TIME, N_VALUE_A, N_VALUE_B,
			    N_USE, N_THRESHOLD, N_REPEAT
		FROM
				TB_PBX_TRUNK_THRESHOLD
		WHERE
				N_MON_ID	 = #{N_MON_ID}
		AND		N_GROUP_NUM  = #{N_GROUP_NUM}
		AND		N_ALM_TYPE	 = #{N_ALM_TYPE}
		AND		N_ALM_CODE	 = #{N_ALM_CODE}
		AND		N_ALM_RATING = #{N_ALM_RATING}
		AND		S_START_TIME = #{S_START_TIME}
		AND		S_END_TIME   = #{S_END_TIME}
	</select>

	<select id="detailIvrAppThreshold" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT /* critical_value.detailTrafficTrunkThreshold */
				N_MON_ID, S_COMPANY, N_GROUP_CODE,
		   		S_APP_ID, N_ALM_TYPE, N_ALM_CODE,
			    N_ALM_RATING, S_START_TIME, S_END_TIME,
			    N_VALUE_A, N_VALUE_B, N_USE,
			    N_THRESHOLD, N_REPEAT
		FROM
				TB_IVR_APP_THRESHOLD
		WHERE	N_MON_ID	 = #{N_MON_ID}
		AND 	S_COMPANY	 = #{S_COMPANY}
		AND 	N_GROUP_CODE = #{N_GROUP_CODE}
		AND 	S_APP_ID	 = #{S_APP_ID}
		AND 	N_ALM_TYPE	 = #{N_ALM_TYPE}
		AND 	N_ALM_CODE	 = #{N_ALM_CODE}
		AND 	N_ALM_RATING = #{N_ALM_RATING}
		AND 	S_START_TIME = #{S_START_TIME}
		AND 	S_END_TIME	 = #{S_END_TIME}
	</select>
</mapper>