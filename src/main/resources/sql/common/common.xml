<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="common">

  <select id="page_prefix">
	  /* common.page_prefix */
  		SELECT * FROM (
            SELECT
                    ROW_NUMBER() OVER (ORDER BY
                                            <if test="order_id != null and order_id != ''">${order_id} ${asc_desc}, KEY_COL</if>
    										<if test="order_id == null or order_id == ''">KEY_COL</if>
                                       ) NUM
                    , A.*
            FROM
                    (
  </select>

  <select id="page_suffix">
	/* common.page_suffix */
  					) A
		) X
		        WHERE
		            num BETWEEN ((${nowpage}-1) * ${pagecnt})+1 AND (${nowpage} * ${pagecnt})
  </select>

  <select id="cnt_prefix">
  /* common.cnt_prefix */
  		SELECT
  				COUNT(*) CNT
  		FROM
  				(
  </select>

  <select id="cnt_suffix">
  				) A
  </select>

  <!--
  	사용자 콤보용 리스트
  -->
  <select id="cmb_user" resultType="java.util.HashMap" parameterType="java.util.HashMap">
    	SELECT
        		S_USER_ID CODE
        		, S_USER_NAME VAL
		FROM
        		TB_USER_INFO A
        WHERE
        		F_USE = 'Y'
        AND		N_PER_CODE &lt; 999
        ORDER BY
        		S_USER_NAME
  </select>

  <select id="cmb_id" resultType="java.util.HashMap" parameterType="java.util.HashMap">
    	SELECT
        		S_USER_ID CODE
        		, S_USER_ID VAL
		FROM
        		TB_USER_INFO A
        WHERE
        		F_USE = 'Y'
        AND		N_PER_CODE &lt; 999
        ORDER BY
        		S_USER_ID
  </select>

  <select id="cmb_user_group" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT
        			N_GROUP_CODE CODE
                    , LPAD('　',((DEPTH-1)*2),'　')||S_GROUP_NAME VAL
        FROM 		(
        			SELECT
						dc.n_group_code,
						dc.s_group_name,
						dc.n_up_code,
						dc.f_use,
						CAST(dc2.lev AS CHAR)                        AS DEPTH,
						hierarchy_sys_connect_by_path('/', dc.n_group_code) as PARENT_CODE
					FROM (
						SELECT
						hierarchy_connect_by_parent_svr_group(n_group_code) AS n_group_code,
						@level              AS lev
						FROM (
							SELECT
							@start_with := 0,
							@n_group_code := @start_with,
							@level := 0
							) vars, tb_svr_group
						WHERE @n_group_code is not null
						) dc2
					JOIN tb_svr_group dc
					ON dc.n_group_code = dc2.n_group_code
					ORDER BY n_up_code, n_group_code

        ) TREE_DATA
		ORDER BY 	PARENT_CODE
  </select>

  <select id="cmb_lmenu" resultType="java.util.HashMap" parameterType="java.util.HashMap">

    	SELECT /* common.cmb_lmenu */
        		N_MENU_CODE CODE, S_MENU_NAME VAL
		FROM
        		TB_WEB_ADM_MENU_INFO A
        WHERE
        		F_USE = 'Y'
        AND		MOD(N_MENU_CODE, 1000000) = 0
        ORDER BY
        		N_MENU_CODE

  </select>
  
	<!-- 2014-12-23 전화기 그룹 트리구조 변경 작업 -->
	<select id="cmb_svr_group" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT /* common.cmb_svr_group */
		   N_GROUP_CODE CODE
		   , CONCAT(REPEAT('　', DEPTH - 1), CAST(s_group_name AS CHAR))  AS VAL
		FROM   (
			SELECT
					dc.n_group_code,
					dc.s_group_name,
					dc.n_up_code,
					dc.f_use,
					CAST(dc2.lev AS CHAR)                        AS DEPTH,
					hierarchy_sys_connect_by_path('/', dc.n_group_code) as PARENT_CODE
				FROM (
				SELECT
					hierarchy_connect_by_parent_svr_group(n_group_code) AS n_group_code,
					@level              AS lev
				FROM (
					SELECT
					@start_with := 0,
					@n_group_code := @start_with,
					@level := 0
					) vars, tb_svr_group
				WHERE @n_group_code is not null
				) dc2
				JOIN tb_svr_group dc
				ON dc.n_group_code = dc2.n_group_code
				ORDER BY n_up_code, n_group_code

		) TREE_DATA
		ORDER BY  PARENT_CODE ASC
	</select>
	
	<select id="cmb_svr_group_child_only" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		<if test="N_GROUP_CODE == null or N_GROUP_CODE == ''">
				SELECT /* common.cmb_svr_group N_GROUP_CODE == null */
					N_GROUP_CODE CODE
				   ,CONCAT(REPEAT('　', DEPTH - 1), CAST(s_group_name AS CHAR))  AS VAL
				FROM   (
					SELECT
					<choose>
						<when test="gubun == 'GROUP'">
							dc.N_GROUP_CODE
						</when>
						<otherwise>
							dc.S_ALIAS AS N_GROUP_CODE
						</otherwise>
					</choose>
					  dc.s_group_name,
					  dc.n_up_code,
					  dc.f_use,
					  CAST(dc2.lev AS CHAR) AS DEPTH,
					  hierarchy_sys_connect_by_path('/', dc.n_group_code) as PARENT_CODE
					FROM (
						   SELECT
							 hierarchy_connect_by_parent_svr_group(n_group_code) AS n_group_code,
							 @level                                              AS lev
						   FROM (
								  SELECT @start_with := 0,
									@n_group_code := @start_with,
								  @LEVEL := 0
								) vars, tb_svr_group
						   WHERE @n_group_code IS NOT NULL
						 ) dc2
					  JOIN tb_svr_group dc
						ON dc.n_group_code = dc2.n_group_code
					ORDER BY n_up_code, n_group_code
				) TREE_DATA
				ORDER BY  PARENT_CODE ASC
		</if>
		<if test="N_GROUP_CODE != null and N_GROUP_CODE != '' and (N_GROUP_CODE % 100000 == 0)">
			SELECT /* common.cmb_svr_group N_GROUP_CODE != null */
			   N_GROUP_CODE CODE
			   , LPAD('　',((DEPTH-1)*2),'　')||S_GROUP_NAME VAL
			FROM   (
			   SELECT
					<choose>
						<when test="gubun == 'GROUP'">
							dc.N_GROUP_CODE
						</when>
						<otherwise>
							dc.S_ALIAS AS N_GROUP_CODE
						</otherwise>
					</choose>
					  dc.s_group_name,
					  dc.n_up_code,
					  dc.f_use,
					  CAST(dc2.lev AS CHAR) AS DEPTH,
					  hierarchy_sys_connect_by_path('/', dc.n_group_code) as PARENT_CODE
					FROM (
						   SELECT
							 hierarchy_connect_by_parent_svr_group(n_group_code) AS n_group_code,
							 @level                                              AS lev
						   FROM (
								  SELECT @start_with := 0,
									@n_group_code := @start_with,
								  @LEVEL := 0
								) vars, tb_svr_group
						   WHERE @n_group_code IS NOT NULL
						 ) dc2
					  JOIN tb_svr_group dc
						ON dc.n_group_code = dc2.n_group_code
					WHERE N_UP_CODE = #{N_GROUP_CODE}
					OR N_GROUP_CODE = #{N_GROUP_CODE}
					ORDER BY n_up_code, n_group_code
			) TREE_DATA
			ORDER BY  N_GROUP_CODE ASC
		</if>
		<if test="N_GROUP_CODE != null and N_GROUP_CODE != '' and (N_GROUP_CODE % 100000 != 0)">
			SELECT /* common.cmb_svr_group_child_only */
			        S_GROUP_NAME AS VAL,
			        <choose>
					    <when test="gubun == 'GROUP'">
						    N_GROUP_CODE AS CODE
					    </when>
					    <otherwise>
						    S_ALIAS AS CODE
					    </otherwise>
			        </choose>
			  FROM TB_SVR_GROUP
			 WHERE N_GROUP_CODE = #{N_GROUP_CODE}
			   <if test="GRP_NAME != null and GRP_NAME != ''">
			   AND S_GROUP_NAME LIKE '%' || #{GRP_NAME} || '%'
			   </if>
		</if>
	</select>
	
	<!-- 2015-07-21 IVR 채널 통계 시나리오 조회 추가 -->
	<select id="cmb_app" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT /* common.cmb_app */ S_APP_ID AS CODE, S_APP_NAME AS VAL
		  FROM TB_CLI_IVR_APP_INFO
		 WHERE N_GROUP_CODE = #{N_GROUP_CODE, jdbcType=INTEGER}
	</select>
  
  <select id="cmb_svr_type" resultType="java.util.HashMap" parameterType="java.util.HashMap">
    	SELECT /* common.cmb_svr_type */
        		N_TYPE_CODE CODE
        		, S_TYPE_NAME VAL
		FROM
        		TB_SVR_TYPE A
        WHERE
        		F_USE = 'Y'
        ORDER BY
        		N_TYPE_CODE
  </select>

  <select id="max_type_header_cnt" resultType="java.util.HashMap" parameterType="java.util.HashMap">
  	SELECT MAX(CNT) MAX_CNT
	FROM (
		SELECT N_GROUP_CODE, COUNT(*) CNT
		FROM (
			SELECT A.N_TYPE_CODE AS CODE, A.S_TYPE_NAME AS VAL, N_GROUP_CODE
			FROM TB_SVR_TYPE A, TB_MON_INFO B, TB_USER_MON_LIST C
			WHERE	A.N_TYPE_CODE = B.N_TYPE_CODE
					AND B.N_MON_ID = C.N_MON_ID 
					AND A.F_USE = 'Y'
					AND C.S_USER_ID = #{SESSION_USER_ID}
			GROUP BY A.N_TYPE_CODE, A.S_TYPE_NAME, N_GROUP_CODE
		) A
		GROUP BY N_GROUP_CODE
	) X
  </select>
  
  <!-- 유저가 가지고 있는 장비타입만 나오게끔 변경 (for kakaobank) -->
  <select id="cmb_svr_type_for_user" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		/* common.cmb_svr_type_for_user */
		SELECT DISTINCT A.N_TYPE_CODE AS CODE, A.S_TYPE_NAME AS VAL
		FROM TB_SVR_TYPE A, TB_MON_INFO B, TB_USER_MON_LIST C
		WHERE	A.N_TYPE_CODE = B.N_TYPE_CODE
				AND B.N_MON_ID = C.N_MON_ID 
				AND A.F_USE = 'Y'
				AND C.S_USER_ID = #{SESSION_USER_ID}
		ORDER BY
		  		A.N_TYPE_CODE
  </select>
  
  <!-- 2015.10.19 장비타입 조회(조회조건) -->
  <select id="cmbSvrTypeIncludeDump" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT /* common.cmbSvrTypeIncludeDump */
		N_TYPE_CODE CODE
		, S_TYPE_NAME VAL
		FROM
		TB_SVR_TYPE A
		WHERE
		F_USE = 'Y'
		ORDER BY
		N_TYPE_CODE
  </select>

  <select id="cmb_rat_code" resultType="java.util.HashMap" parameterType="java.util.HashMap">
    	SELECT /* common.cmb_rat_code */
        		N_RAT_CODE CODE
        		, S_RAT_NAME VAL
		FROM
        		TB_USER_RATING A
        ORDER BY
        		N_RAT_CODE
  </select>

  <select id="cmb_svr_style" resultType="java.util.HashMap" parameterType="java.util.HashMap">
    	SELECT
        		N_STYLE_CODE CODE
        		, S_DESC VAL
		FROM
        		TB_SVR_STYLE A
        ORDER BY
        		N_STYLE_CODE
  </select>

  <select id="cmb_menu" resultType="java.util.HashMap" parameterType="java.util.HashMap">

    	SELECT /* common.cmb_menu */
        		N_MENU_CODE CODE, S_MENU_NAME VAL
		FROM
        		TB_WEB_ADM_MENU_INFO A
        WHERE
        		F_USE = 'Y'
        AND		N_MENU_CODE % 1000000 = 0
        ORDER BY
        		N_MENU_CODE

  </select>

  <select id="cmb_alm_rating" resultType="java.util.HashMap" parameterType="java.util.HashMap">
    	SELECT /* common.cmb_alm_rating */
        		N_ALM_RATING CODE
        		, S_ALM_RATING_NAME VAL
		FROM
        		TB_ALM_RATING_CODE
		ORDER BY
				N_LEVEL
  </select>

	<select id="svrComboQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
  		SELECT /* common.svrComboQry */
  				N_MON_ID CODE
  				, S_MON_NAME VAL
  		FROM
  				TB_MON_INFO
		WHERE
				N_GROUP_CODE = #{N_GROUP_CODE}
		ORDER BY
				N_MON_ID
	</select>

	<select id="resComboQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
  		SELECT /* common.resComboQry */
				S_MAP_KEY CODE, S_MON_NAME VAL
		FROM
				TB_MON_MAP
		WHERE
				N_MON_TYPE IN (0,1,2)
		AND		N_MON_ID = #{N_MON_ID}
		AND		F_USE = 'Y'
	</select>

  <select id="selSvrLstQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
    		SELECT /* common.selSvrLstQry */
    				N_MON_ID, S_MON_NAME, S_MON_IP, N_TYPE_CODE
        			, (SELECT S_TYPE_NAME FROM TB_SVR_TYPE WHERE N_TYPE_CODE = A.N_TYPE_CODE) TYPE_NAME
        			, (SELECT S_GROUP_NAME FROM TB_SVR_GROUP WHERE N_GROUP_CODE = A.N_GROUP_CODE AND F_USE = 'Y') GROUP_NAME
        			, (SELECT S_GROUP_NAME FROM TB_SVR_GROUP WHERE N_GROUP_CODE = A.N_GROUP_CODE AND F_USE = 'Y') S_GROUP_NAME
        			, (SELECT S_DESC FROM TB_SVR_STYLE WHERE N_STYLE_CODE = A.N_STYLE_CODE) STYLE_NAME
        			, (SELECT N_SNMP_MAN_CODE FROM TB_SNMP_INFO WHERE N_MON_ID = A.N_MON_ID) N_SNMP_MAN_CODE
        			, (SELECT S_DESC FROM TB_SNMP_MAN_CODE WHERE N_SNMP_MAN_CODE = (SELECT N_SNMP_MAN_CODE FROM TB_SNMP_INFO WHERE N_MON_ID = A.N_MON_ID)) S_SNMP_MAN_NAME
    		FROM
					TB_MON_INFO A
			<where>
				<if test="f_N_MON_ID != '' and f_N_MON_ID != null">
					AND N_MON_ID LIKE '%' || #{f_N_MON_ID} || '%'
				</if>
				<if test="N_MON_ID != '' and N_MON_ID != null">
					AND N_MON_ID = #{N_MON_ID}
				</if>
				<if test="f_S_MON_NAME != '' and f_S_MON_NAME != null">
					AND S_MON_NAME LIKE '%' || #{f_S_MON_NAME} || '%'
				</if>
				<if test="f_S_MON_IP != '' and f_S_MON_IP != null">
					AND S_MON_IP LIKE '%' || #{f_S_MON_IP} || '%'
				</if>
				<if test="f_N_STYLE_CODE != '' and f_N_STYLE_CODE != null">
					AND N_STYLE_CODE LIKE '%' || #{f_N_STYLE_CODE} || '%'
				</if>
				<if test="f_N_GROUP_CODE != '' and f_N_GROUP_CODE != null">
					AND N_GROUP_CODE LIKE '%' || #{f_N_GROUP_CODE} || '%'
				</if>
				<if test="f_N_TYPE_CODE != '' and f_N_TYPE_CODE != null">
					AND N_TYPE_CODE LIKE '%' || #{f_N_TYPE_CODE} || '%'
				</if>
			</where>
			ORDER BY
					N_MON_ID
  </select>

  <select id="cmb_phone_stats" resultType="java.util.HashMap" parameterType="java.util.HashMap">
  		SELECT /* common.cmb_phone_stats */
  				S_IN_VALUE CODE, S_OUT_VALUE VAL
  		FROM
  				TB_SNMP_VALUE_TYPE_CODE
  		WHERE
  				N_SNMP_MAN_CODE = '2' AND N_SNMP_TYPE_CODE = '0'
  </select>

  <select id="cmb_cdr_branch" resultType="java.util.HashMap" parameterType="java.util.HashMap">
  		SELECT /* common.cmb_cdr_branch */
  				BRANCH_CODE CODE, BRANCH_NAME VAL
  		FROM
  				TB_CDR_BRANCH_CODE
  		<where>
				<if test="BRANCH_CODE != '' and BRANCH_CODE != null">
					AND BRANCH_CODE LIKE #{BRANCH_CODE} || '%'
				</if>
		</where>
  		ORDER BY
  				(CASE WHEN BRANCH_CODE IN ('H001','L001','S001') THEN '0'||BRANCH_CODE ELSE '1' END), BRANCH_NAME
  </select>

  <select id="json_grpLstQry" resultType="hashmap" parameterType="hashmap">
    	WITH /* common.json_grpLstQry */ TREE_DATA AS
        (
         SELECT
           A.N_GROUP_CODE, A.S_GROUP_NAME, N_UP_CODE, F_USE, LEVEL DEPTH
           , SUBSTR(SYS_CONNECT_BY_PATH(S_GROUP_NAME, '/'),2) PARENT_CODE
         FROM
           TB_SVR_GROUP A
         START WITH N_UP_CODE IS NULL
         CONNECT BY PRIOR N_GROUP_CODE = N_UP_CODE
        )
        SELECT
           N_GROUP_CODE CODE
           , LPAD('　',((DEPTH-1)*2),'　')||S_GROUP_NAME VAL
        FROM   TREE_DATA
        <where>
        		<if test="GRP_NAME != '' and GRP_NAME != null">
					AND S_GROUP_NAME LIKE '%' || #{GRP_NAME} || '%'
				</if>
        </where>
		ORDER BY  PARENT_CODE ASC
  </select>

	<select id="cmb_snmp_status" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT /* common.cmb_snmp_status */
				S_IN_VALUE CODE, S_OUT_VALUE VAL
		FROM
				TB_SNMP_VALUE_TYPE_CODE
		WHERE
				N_SNMP_MAN_CODE = '2' AND N_SNMP_TYPE_CODE = '2'
	</select>

	<select id="cmb_vg_type_list" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT /* common.cmb_vg_type_list */
				S_VG_FILTER_TXT CODE, S_VG_NAME VAL
		FROM
				TB_VG_TYPE_LIST
		ORDER BY
				VAL
	</select>

	<select id="cmb_snmp_man_code" resultType="java.util.HashMap" parameterType="java.util.HashMap">
    	SELECT /* common.cmb_snmp_man_code */
        		N_SNMP_MAN_CODE CODE
        		, S_DESC VAL
		FROM
        		TB_SNMP_MAN_CODE A
        ORDER BY
        		N_SNMP_MAN_CODE
	</select>

	<select id="cmb_snmp_mon_code" resultType="java.util.HashMap" parameterType="java.util.HashMap">
    	SELECT /* common.cmb_snmp_mon_code */
        		N_SNMP_MON_CODE CODE
        		, S_DESC VAL
		FROM
        		TB_SNMP_MON_CODE A
        WHERE
				N_SNMP_MAN_CODE = #{N_SNMP_MAN_CODE}
        ORDER BY
        		N_SNMP_MON_CODE
	</select>

	<select id="cmb_snmp_value_type_code" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT /* common.cmb_snmp_value_type_code */
        		S_IN_VALUE CODE, S_OUT_VALUE VAL
		FROM
		        TB_SNMP_VALUE_TYPE_CODE
		WHERE
		        N_SNMP_MAN_CODE = #{N_SNMP_MAN_CODE} AND N_SNMP_TYPE_CODE = #{N_VALUE_TYPE_CODE}
		ORDER BY
		        S_IN_VALUE
	</select>

	<select id="svrComboQry2" resultType="java.util.HashMap" parameterType="java.util.HashMap">
  		SELECT /* common.svrComboQry2 */
  				N_MON_ID CODE
  				, S_MON_NAME VAL
  		FROM
  				TB_MON_INFO
		<where>
				<if test="f_N_GROUP_CODE != '' and f_N_GROUP_CODE != null">
					AND N_GROUP_CODE = #{f_N_GROUP_CODE}
				</if>
				<if test="N_GROUP_CODE != '' and N_GROUP_CODE != null">
					AND N_GROUP_CODE = #{N_GROUP_CODE}
				</if>
				<if test="N_TYPE_CODE != '' and N_TYPE_CODE != null">
					AND N_TYPE_CODE = #{N_TYPE_CODE}
				</if>
		</where>
		ORDER BY
				N_MON_ID
	</select>

	<select id="svrlist" resultType="hashmap" parameterType="hashmap">
		SELECT /* common.svrlist */
				FOUND_ROWS() AS TOTAL_COUNT
       			, N_MON_ID, S_MON_NAME, S_MON_IP
        		, N_STYLE_CODE, N_GROUP_CODE, N_TYPE_CODE
		FROM
		        TB_MON_INFO A
		WHERE
				EXISTS (SELECT N_MON_ID FROM TB_USER_MON_LIST WHERE S_USER_ID = #{SESSION_USER_ID} AND N_MON_ID = A.N_MON_ID AND N_MON_ID = #{N_MON_ID})
		AND     N_TYPE_CODE = #{N_TYPE_CODE}
		ORDER BY
				N_MON_ID
	</select>

	<sql id="SQL_OderBy">
		<foreach collection="sort" item="s" separator=",">
			${s.field} ${s.dir}
		</foreach>
	</sql>

	<select id="pagingSvrList" resultType="hashmap" parameterType="hashmap">
		SELECT X.*, @NUM AS TOTAL_COUNT 
		FROM (
			SELECT /* common.pagingSvrList */
		            @NUM := @NUM + 1 AS NUM
					, N_MON_ID, S_MON_NAME, S_MON_IP
					, N_STYLE_CODE, N_GROUP_CODE, N_TYPE_CODE
					, (SELECT S_DESC FROM TB_SNMP_MAN_CODE WHERE N_SNMP_MAN_CODE = (SELECT N_SNMP_MAN_CODE FROM TB_SNMP_INFO WHERE N_MON_ID = A.N_MON_ID)) S_SNMP_MAN_NAME
					, (SELECT N_SNMP_MAN_CODE FROM TB_SNMP_INFO WHERE N_MON_ID = A.N_MON_ID) N_SNMP_MAN_CODE
			FROM
					TB_MON_INFO A, (SELECT @NUM := 0) R
			<where>
					<if test="N_TYPE_CODE != '' and N_TYPE_CODE != null">
						AND N_TYPE_CODE = #{N_TYPE_CODE}
					</if>
					<if test="f_N_STYLE_CODE != '' and f_N_STYLE_CODE != null">
						AND N_STYLE_CODE LIKE CONCAT('%', #{f_N_STYLE_CODE}, '%')
					</if>
					<if test="S_MON_NAME != '' and S_MON_NAME != null">
						AND S_MON_NAME LIKE CONCAT('%', #{S_MON_NAME}, '%')
					</if>
					<if test="N_GROUP_CODE != '' and N_GROUP_CODE != null">
						<if test="N_GROUP_CODE % 100000 != 0">
						AND N_GROUP_CODE = #{N_GROUP_CODE}
						</if>
						<if test="N_GROUP_CODE % 100000 == 0">
						AND N_GROUP_CODE IN ((SELECT N_GROUP_CODE FROM TB_SVR_GROUP WHERE N_GROUP_CODE = A.N_GROUP_CODE AND N_UP_CODE = #{N_GROUP_CODE}))
						</if>
					</if>
			</where>
			ORDER BY
			<if test="sort == null">N_MON_ID</if>
			<if test="sort != null">
				<choose>
					<when test="sort.size() == 0">
						N_MON_ID
					</when>
					<otherwise>
						<include refid="SQL_OderBy"/>
					</otherwise>
				</choose>
			</if>
		) X
	</select>

	<select id="almcode" resultType="hashmap" parameterType="hashmap">
		SELECT /* common.almcode */
        		N_ALM_TYPE, N_ALM_CODE, S_ALM_MSG
		FROM
		        TB_ALM_CODE
		WHERE N_ALM_TYPE IN
				<foreach collection="alarmTypes" item="item" index="index" separator="," open="(" close=")">
					#{item}
				</foreach>
		ORDER BY N_ALM_TYPE, N_ALM_CODE
	</select>

	<select id="almCodeQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT /* common.almCodeQry */
				N_ALM_TYPE, N_ALM_CODE, S_ALM_MSG
		FROM
				TB_ALM_CODE
	</select>

	<select id="almSendCodeQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT /* common.almSendCodeQry */
				N_SEND_CODE, S_SEND_NAME
		FROM
				TB_ALM_SEND_CODE
	</select>

	<select id="almRatingCodeQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT /* common.almRatingCodeQry */
				N_ALM_RATING, S_ALM_RATING_NAME, N_LEVEL
		FROM
				TB_ALM_RATING_CODE
	</select>

	<select id="cmb_snmp_value_code" resultType="hashmap" parameterType="hashmap">
		SELECT /* common.cmb_snmp_value_code */
        		A.N_SNMP_MAN_CODE, A.N_SNMP_MON_CODE, A.N_SNMP_TYPE_CODE CODE, B.S_ALM_MSG VAL, A.N_VALUE_TYPE_CODE
        		, B.N_ALM_CODE, B.N_ALM_TYPE
		FROM
        		TB_SNMP_VALUE_CODE A INNER JOIN TB_ALM_CODE B ON TRIM(CONCAT('14', LPAD(CONVERT(A.N_SNMP_MAN_CODE, SIGNED), 3, '0'))) = CONVERT(B.N_ALM_TYPE, CHAR) AND CONVERT(TRIM(CONCAT(CONVERT(A.N_SNMP_MON_CODE, CHAR), LPAD(CONVERT(A.N_SNMP_TYPE_CODE, CHAR), 3, '0'))), SIGNED) = B.N_ALM_CODE
        WHERE
				N_SNMP_MAN_CODE = #{N_SNMP_MAN_CODE}
		AND		N_SNMP_MON_CODE = #{N_SNMP_MON_CODE}
        ORDER BY
        		N_SNMP_TYPE_CODE
	</select>

	<insert id="insViewToProcess" parameterType="java.util.HashMap" statementType="PREPARED">
  		INSERT INTO TB_INS_COMMAND
  			(D_IN_TIME, N_FROM, N_TO, N_COMMAND, N_SID, S_VALUE)
  		VALUES
  			(NOW(), 6, #{N_TO}, #{N_COMMAND}, #{N_SID}, #{S_VALUE})
  </insert>

  <select id="cmb_rack_info" resultType="java.util.HashMap" parameterType="java.util.HashMap">
    SELECT /* common.cmb_rack_info */
      N_RACK_ID AS CODE,
      S_RACK_NAME AS VAL
    FROM
      TB_RACK_INFO
    WHERE
      N_GROUP_CODE = #{N_GROUP_CODE}
    ORDER BY N_RACK_ID
  </select>

  <select id="cmb_mon_info" resultType="java.util.HashMap" parameterType="java.util.HashMap">
    SELECT /* common.cmb_mon_info */
    N_MON_ID AS CODE,
    (S_MON_NAME ||' / '|| N_MON_ID) AS VAL
    FROM TB_MON_INFO
    ORDER BY UPPER(S_MON_NAME) ASC
  </select>

  <select id="cmb_dashboard_mon_type" resultType="java.util.HashMap" parameterType="java.util.HashMap">
    SELECT /* common.cmb_dashboard_mon_type */
      N_CODE AS CODE,
      S_VALUE VAL
    FROM TB_NUM_CODE
    WHERE S_GROUP_CODE = 'DASHBOARD_MON_TYPE'
    ORDER BY N_ORDER_IDX ASC
  </select>
  
  <!-- 2014-12-22 전화기 상태 콤보 박스 추가  -->
  <select id="cmb_avayaStatus" resultType="java.util.HashMap" parameterType="java.util.HashMap">
    SELECT  /* common.cmb_avayaStatus */
	    N_CODE AS CODE,
	    S_VALUE AS VAL
	FROM 
	    TB_NUM_CODE
	WHERE
	    S_GROUP_CODE = 'AVAYA_CM_IPPHONE_STATE'
	ORDER BY N_ORDER_IDX ASC
  </select>
  
  <!-- 2014-12-22 IP Phone 관리 CM (MON_ID) 콤보 박스 추가 -->
  <select id="cmb_nMonId" resultType="java.util.HashMap" parameterType="java.util.HashMap">
    SELECT /* common.cmb_nMonId */
        A.N_MON_ID AS CODE,
        A.S_MON_NAME AS VAL
    FROM 
        TB_MON_INFO A LEFT OUTER JOIN TB_SNMP_INFO B ON A.N_MON_ID = B.N_MON_ID
        WHERE A.N_TYPE_CODE = 1000
        ORDER BY A.N_MON_ID ASC
  </select>
  
	<!-- 2015-01-20 연결 대한 콤보 박스 -->
	<select id="cmb_link_type" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT /* common.cmb_link_type */
			N_CODE AS CODE,
			S_VALUE VAL
		FROM 
			TB_NUM_CODE
	    WHERE 
	    	S_GROUP_CODE = 'LINK_TYPE'
	    ORDER BY N_ORDER_IDX ASC
	</select>

	<!-- snmp v3 지원 용 테이블 쿼리 start 15.04.21 -->

	<!-- auth code -->
	<select id="cmb_auth_code" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT  /* common.cmb_auth_code */
			N_CODE AS CODE, 
			S_NAME AS VAL
		FROM TB_SNMPV3_CODE
		WHERE N_GROUP_CODE = '100'
		ORDER BY N_GROUP_CODE
	</select>

	<!-- privacy code -->
	<select id="cmb_priv_code" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT  /* common.cmb_priv_code */
			N_CODE AS CODE, 
			S_NAME AS VAL
		FROM TB_SNMPV3_CODE
		WHERE N_GROUP_CODE = '200'
		ORDER BY N_GROUP_CODE
	</select>

	<select id="cmb_code" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT /* common.cmb_code */
				S_CODE AS CODE, S_NAME AS VAL
		FROM	TB_CODE
		WHERE	S_GROUP_CODE = #{S_GROUP_CODE}
	</select>

	<select id="cmb_event_type" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT  /* common.cmb_event_type */
			N_CODE AS CODE, S_VALUE AS VAL
		FROM 
	    	TB_NUM_CODE
		WHERE
	    	S_GROUP_CODE = 'WEB_EVENT_TYPE'
		ORDER BY N_ORDER_IDX ASC
  </select>
  
	<!-- snmp v3 지원 용 테이블 쿼리 end 15.04.21 -->

	<select id="groupCodes" resultType="java.lang.Integer">
		SELECT /* common.groupCodes */ N_GROUP_CODE FROM TB_SVR_GROUP WHERE N_UP_CODE IS NULL AND F_USE = 'Y'
	</select>

	<select id="serverTypeCodes" resultType="java.lang.Integer">
		SELECT /* common.serverTypeCodes */ N_TYPE_CODE FROM TB_SVR_TYPE ORDER BY N_TYPE_CODE
	</select>
	
	<select id="serverGroups" resultType="java.util.HashMap">
		SELECT /* common.groupCodes */ N_GROUP_CODE, S_GROUP_NAME FROM TB_SVR_GROUP WHERE N_UP_CODE IS NULL AND F_USE = 'Y'
	</select>
	
	<select id="serverGroupsEachUser" resultType="java.util.HashMap">
		/* common.serverGroupsEachUser */
		SELECT A.N_GROUP_CODE, A.S_GROUP_NAME
		FROM TB_SVR_GROUP A, TB_MON_INFO B, TB_USER_MON_LIST C
		WHERE	A.N_GROUP_CODE = B.N_GROUP_CODE AND N_UP_CODE IS NULL AND F_USE = 'Y' AND B.N_MON_ID = C.N_MON_ID AND C.S_USER_ID = #{SESSION_USER_ID}
		GROUP BY A.N_GROUP_CODE, A.S_GROUP_NAME
	</select>
	
	<select id="monitoringMapCodes" resultType="java.util.HashMap" parameterType="java.lang.Integer">
		SELECT S_MAP_KEY AS CODE, S_MON_NAME AS VAL FROM TB_MON_MAP WHERE N_MON_ID = #{N_MON_ID} ORDER BY S_MAP_KEY
	</select>

	<select id="selectGroupCodeName" resultType="java.lang.String" parameterType="java.lang.Integer">
		SELECT /* common.selectGroupCodeName */ S_GROUP_NAME
		  FROM TB_SVR_GROUP
		 WHERE N_GROUP_CODE = #{N_GROUP_CODE}
		  AND  F_USE = 'Y'
	</select>

	<select id="selectDept" resultType="java.util.HashMap">
		SELECT /* common.selectDept */
			GROUP_CODE	CODE
		  , GROUP_NAME VAL
		  , UPPER
		  , PARENT_CODE
		  ,CONCAT(REPEAT('　', lvl - 1), CAST(group_name AS CHAR)) VAL
		FROM
		  (
			SELECT
			  toi.group_code,
			  toi.group_name,
			  toi.upper,
			  hierarchy_sys_connect_by_path_org_info('/', toi.group_code) AS PARENT_CODE,
			  lvl
			FROM (
				   SELECT
					 hierarchy_connect_by_parent_org_info(group_code) AS CODE,
					 @level                                           AS lvl,
					 @RNUM := @RNUM + 1                               AS ROWNUM
				   FROM (
						  SELECT
							@org_start_with := 'TOP',
							@org_group_code := @org_start_with,
							@level := 0
						) vars, TB_ORG_INFO, ( SELECT @RNUM := 0 ) R
				   WHERE @org_group_code IS NOT NULL
				 ) A join tb_org_info toi on a.CODE = toi.group_code
			order by A.ROWNUM
		  ) A
	</select>

	<select id="get_n_type" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT /* common.get_n_type */
		  N_CODE AS CODE,
		  S_VALUE VAL
		FROM TB_NUM_CODE
		WHERE S_GROUP_CODE = 'IPT_HISTORY_TYPE'
		ORDER BY N_ORDER_IDX ASC
	</select>
	
	<select id="cmb_company" resultType="java.util.HashMap">
		SELECT /* common.cmb_company */ COMPANY_CD AS CODE, COMPANY_NM AS VAL
		FROM TB_COMPANY
	</select>
	
	<select id="cmb_alm_type" resultType="java.util.HashMap" parameterType="java.util.HashMap">
    	SELECT /* common.cmb_alm_type */
        	N_ALM_TYPE CODE
        	, S_ALM_NAME VAL
		FROM
        	TB_ALM_CODE A
        GROUP BY
        	N_ALM_TYPE, S_ALM_NAME
        ORDER BY N_ALM_TYPE
	</select>
	
	<select id="cmb_alm_code" resultType="java.util.HashMap" parameterType="java.util.HashMap">
    	SELECT /* common.cmb_alm_code */
        	N_ALM_CODE CODE
        	, S_ALM_MSG VAL
		FROM
        	TB_ALM_CODE A
        WHERE N_ALM_TYPE = #{ALM_TYPE}
        ORDER BY N_ALM_CODE
	</select>
	
	 <!-- 2014-12-22 IP Phone 관리 CM (MON_ID) 콤보 박스 추가 -->
	<select id="cmb_nMonJijumId" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT /* common.cmb_nMonJijumId */
		  N_CODE AS CODE,
		  S_VALUE VAL
		FROM TB_NUM_CODE
		WHERE S_GROUP_CODE = 'IPPHONE_GROUP'
		ORDER BY N_ORDER_IDX ASC
  </select>
</mapper>