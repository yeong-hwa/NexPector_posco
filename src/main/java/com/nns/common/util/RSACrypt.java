package com.nns.common.util;

import javax.crypto.Cipher;
import java.math.BigInteger;
import java.security.Key;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.spec.RSAPrivateKeySpec;
import java.security.spec.RSAPublicKeySpec;

public class RSACrypt {
	//36진수
	//private final static String modulus_key = "138hxnufiykzltjfu59ck0hf49qvnxjcv20wkud82v9xjx93khcuhqo6upwo66qga2kbd9ofkzfw4mnm9zlng1dobakz0cr7wcoqdmj54kvuqcrsmc6x25a6f1yj5t9esgpuupkmr1lm11m5yio9xbcq7nb9v4mjullnkpqmz2th549zel1ztkgj7rqxn7ghq8mgt0odszrrykp8kcmx3qau9i60bpdjhlqb6cwdouevvdze2wjf2s8lx4o22fjvra06ed5qcgvwbge48x7mtx5pq8ws6qpzgk76qt4ycazcbnwubup6bqky3nlgouliy8eyx8qh1ycpnpnwwv5ua58ewbrvctbl5l2t1fjnu2ip37658awjnu6gycfe6celzuxbtm413es1n";
	//16진수
//	private final static String modulus_key = "aa99e76bb21be35946435a0e282cd3e2fd81b167c39ee655289d6bb581f451f7621d580165cd74c3bb61fc123463e2a7280853562c2f442e8e15bd404a06d574209f11aba0235464a8f196f611e4a90c0670ddbb55c0569d0669f137476e5add93321c7a5c766c13e53c185e6b4e9c3bf5ccbff2c1453e5779a115933d6020fc1a7d42db30627ea3d757811bac03bcd0ee07aac8f35d3d30d795de18238c8c03c5dd4ad4c716724e72465b5cea378478f91700b7eed1e1bd61983da615dcabca48b9101eda231a48f4902694c48ed5d5f5e9d218e0f7e446bca6247f8fa056af520b93ecf82607ef9cecab825d3a384fed19d836efc13a31d091a5697a80cc7b";
//	private final static String public_key = "10001";
//	private final static String private_key = "bju5cy5ixcimttpcofw28kcy2nzc8orpg62ezbpxkfc7wu8v9i6a8hp361kcz8sr7gampes3n8k3sgw3afy9kvcfi89p21e9q01lxgeai8cur0u62fvxjqg0ftrdrakomp9knfbnoajp3nu7iub9z00ykp3hlyav03rez63qddrw3s6gca6jaegmen19yxkvdytky6zl4stn3wtyd5pa9ocmxtwuk3ysy5l1an41tb1bm16cme27hlg6cenh9y2fy6kylnr942eflzqbazlj2q5p6lkuspsetqckqz16z736z7ye93x41kvwe5cgu00zj06e3gaks7ztekgeknnebqlt6yzs5szxdkev16ei204li0y66tmnom97z1n340f78xsruo6n9k9t";
	//private final static String modulus_key = "8907137612668659093182866255546814187085855263355947654694382358051195660291241091379641838560486279876887647064804810047739959861819479868160847839920539";
	
	//10진수
	//private final static String modulus_key = "692844337023255762472875746371543111617800677186388900731402238852906541421603012359567864571450495408233208559382332254709865312494478986514033876492642631677067240157650221903063939546928562162977505333543481276191576386983792203679996290928721450165638131439639093372914462279636287257130227829788046476342367797910029962862365265595865242932959649344846461067564879017124075886123751864276386202702429852631585299528137474530094548756193603680685378987389892036379153075455902723281477126398516192724618393892750329507185865065092148356475045775141522073040199100004360000075767247710065567768481590814057840973716387370101370275385445267556364950145616217556902179661800211590520110087627134636889779305743126343723371487554078732609213174897824088270646159937989860697075609683548410758090884091248812006699255593625522037571732026666361850940018230553402555154884773939536087749580479394266918358938477183014473195296306075799808790464652868025039058524073416618145132428325065318342670587163345030460839475482938682515809162672502005678407255602122431252219940468325258755106339313968019480129033521687549105542317437159350981097026076966416820170848253612948368917479682380426885396852632618336080888300682015012605871171433";
	//16진수
	private final static String modulus_key = "a9d460ef84f713ba1ae51d6b3064c764da92ed50bf8d62c69085ba7454ad65cf25cf0e235c50fceadb752f4136edbf47da2bc0de24138a86a364cd1db67b7eb9dfcc4bc3263258c80b1c944e2df35de4a1ce143c99079d1732536ca329fd09404fcc0157427f43b8c813e38481ea5c608b55e700014ff82f06c15d332bad19460eccbbcf5d748c019442df1c36e068683129196e470f73b02966ba58262a4ba80506aeace91931379f6873d3e9b9350bfce77c227ec3fa471a7a3892d417bbd0b0ae3dde3d847e5d55be925f68d97b32754f2d7ecab93065327849a6fde63390d50c40d324ec0992f33ca183397ce8c7f8b65fa6a20d584c8be86c3a951ae3cc98925b4f7cef1da6734b9ae7dd15db4bd45d38659c31a8b966aacecdbbdb81b245a5cc8fae905c8bad4937515e124d4e2a876837de5db6dafa3dce0e2687912cde27e7e25735446a90c383d4b4a7671560c92c1aca994502b4d4a35968cbb6fdcfe474abc4a71b492749cd1a1fd6dc49c118bbe8145edba3c4d30c59f604cc505f2aa6cf0f9f79503f6cef76a235b69f84f229175ab2d496290de28fccc636dc72f4c05e3467e80e5dcfa47b81c6cd78cb053a7a24fede63a404f1ec813f93f0b8b3f0fde16e83905165795461be28e8dc027a4a2b24ef218e00eb6ccba82b4acd3cb6877ba1d0df6019ab2b621579e4b79649f156ea8c41a2af0ac67c02a769";
	private final static String public_key = "10001";
	private final static String private_key = "383608490062496888735992940367087497873926413665338780413196539954782287288467383409055640841656662288221160654069415874916492557321431626480434460570548400644430808190190212429232008032101710585559329211482960184138540683554234766662074025552582305273514888344274900317829228958891653865941795429020081090690131649525662560575305339387087694051686434168898464780164780200731864711596296140304453205841896480348348325048110172891633898350050217482602951949836422516014677945221674568823590933495530136704540992733758616605852362783647919423578337595507656284882381929944278910581034993216159409067353144090802185293351110831842130385516789950670411401602837767862400989226290827573905593440822583238085562746540547376379194489157269105103423307120237595506517699510160904242772277485460415446479539576377778612985368182238978253024741542029579273390175159119801104181443164991006143222846024872190532185868286872857645486251525031757444784691243452589467519376441473913795188754131331988653207206814322730198995621289493966996409242151842072610545748107417223778341241709797425550039977285748447786255198206341799520379141913193081821914183236107150691373978339081145726242316231524387666644070468600563519408662355145238194671374337";
//	
	public static byte[] encode(String str)
	{
		byte[] byte_data = null;
		try{
			BigInteger bg1 = new BigInteger(modulus_key, 16);
			BigInteger bg2 = new BigInteger(public_key, 16);
//			BigInteger bg1 = new BigInteger(modulus_key, 16);
//			BigInteger bg2 = new BigInteger(private_key, 16);
			
			RSAPublicKeySpec rpks = new RSAPublicKeySpec(bg1, bg2);
			
			KeyFactory fact = KeyFactory.getInstance("RSA");
			Key key = fact.generatePublic(rpks);
			
			Cipher cphr = Cipher.getInstance("RSA");
			cphr.init(Cipher.ENCRYPT_MODE, key);
			
			byte_data = cphr.doFinal(str.getBytes());
		}catch(Exception e){
			e.printStackTrace();
		}
		return byte_data;
	}
	
	public static String decode(byte[] en_byte)
	{
		String de_str = "";
		try{
			BigInteger bg1 = new BigInteger(modulus_key, 16);
			BigInteger bg2 = new BigInteger(private_key, 10);
//			BigInteger bg1 = new BigInteger(modulus_key, 16);
//			BigInteger bg2 = new BigInteger(private_key, 16);
			
			RSAPrivateKeySpec rpks = new RSAPrivateKeySpec(bg1, bg2);
			
			KeyFactory fact = KeyFactory.getInstance("RSA");
			Key key = fact.generatePrivate(rpks);
			Cipher cphr = Cipher.getInstance("RSA");
			
			cphr.init(Cipher.DECRYPT_MODE, key);
			
			byte[] byte_data = cphr.doFinal(en_byte);
			
			de_str = new String(byte_data);
		}catch(Exception e){
			e.printStackTrace();
		}
		
		return de_str;
	}
	
	public static String getPublicKey()
	{	
		return public_key;
	}
	
	public static String getModulusKey()
	{	
		return modulus_key;
	}
	
	public static byte[] hexToByteArray(String hex) {
        if (hex == null || hex.length() % 2 != 0) {
            return new byte[]{};
        }

        byte[] bytes = new byte[hex.length() / 2];
        for (int i = 0; i < hex.length(); i += 2) {
            byte value = (byte)Integer.parseInt(hex.substring(i, i + 2), 16);
            bytes[(int) Math.floor(i / 2)] = value;
        }
        return bytes;
    }
	
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		try{
			KeyPairGenerator kpg = KeyPairGenerator.getInstance("RSA");
		
			kpg.initialize(4096);
			
			KeyPair kp = kpg.generateKeyPair();
			
			System.out.println(kp.getPrivate());
			System.out.println(kp.getPublic());
		}catch(Exception e){
			
		}
		//System.out.println(new BigInteger(RSACrypt.getModulusKey(), 16).toString(16));
		//System.out.println(new BigInteger(RSACrypt.getPublicKey(), 16).toString(16));
		
		byte[] sss = RSACrypt.encode("1111");
		
		System.out.println(new BigInteger("692844337023255762472875746371543111617800677186388900731402238852906541421603012359567864571450495408233208559382332254709865312494478986514033876492642631677067240157650221903063939546928562162977505333543481276191576386983792203679996290928721450165638131439639093372914462279636287257130227829788046476342367797910029962862365265595865242932959649344846461067564879017124075886123751864276386202702429852631585299528137474530094548756193603680685378987389892036379153075455902723281477126398516192724618393892750329507185865065092148356475045775141522073040199100004360000075767247710065567768481590814057840973716387370101370275385445267556364950145616217556902179661800211590520110087627134636889779305743126343723371487554078732609213174897824088270646159937989860697075609683548410758090884091248812006699255593625522037571732026666361850940018230553402555154884773939536087749580479394266918358938477183014473195296306075799808790464652868025039058524073416618145132428325065318342670587163345030460839475482938682515809162672502005678407255602122431252219940468325258755106339313968019480129033521687549105542317437159350981097026076966416820170848253612948368917479682380426885396852632618336080888300682015012605871171433").toString(16));
		
		System.out.println(RSACrypt.encode("1111").length);
		System.out.println("\n\n\n");
		
		System.out.println(RSACrypt.decode(sss));
		
	}

}
