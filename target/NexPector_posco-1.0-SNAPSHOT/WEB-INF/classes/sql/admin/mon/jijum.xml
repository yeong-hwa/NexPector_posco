<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="jijum">
	<sql id="SQL_OderBy">
		<foreach collection="sort" item="s" separator=",">
		${s.field} ${s.dir}
		</foreach>
	</sql>
  	
  	<!-- 2018-07-20 지점전화기 관리 리스트 반환 -->
	<select id="selList" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT /* jijum.selList */ *, @NUM AS TOTAL_COUNT FROM (
			SELECT
	  				@NUM := @NUM + 1 NUM
    				, A.*
    		FROM
					(
					 	SELECT		N_GROUP_CODE, S_GROUP_NAME, S_GUBUN,  S_NAME,  S_RUNNING,  S_EXT_NUM, S_IP_ADDRESS, S_ADDRESS, S_BIGO
					 	, DATE_FORMAT(D_INS_DATE, '%Y-%m-%d %H:%i:%s') AS D_INS_DATE
					  	FROM		TB_MON_IPPHONE_INFO
					) A
					, (SELECT @NUM := 0) R
					WHERE 1 = 1
					<if test="S_EXT_NUM != '' and S_EXT_NUM != null">
					    AND UPPER(A.S_EXT_NUM) LIKE CONCAT('%',#{S_EXT_NUM},'%')
					</if>
					<if test="S_IP_ADDRESS != '' and S_IP_ADDRESS != null">
						AND UPPER(A.S_IP_ADDRESS) LIKE CONCAT('%',#{S_IP_ADDRESS},'%')
					</if>
					<if test="S_NAME != '' and S_NAME != null">
					    AND UPPER(A.S_NAME) LIKE CONCAT('%',#{S_NAME},'%')
					</if>
					<if test="S_RUNNING != '' and S_RUNNING != null">
					    AND UPPER(A.S_RUNNING) LIKE CONCAT('%',#{S_RUNNING},'%')
					</if>					
	  ) X
	  ORDER BY	D_INS_DATE ASC
		LIMIT #{firstRecordIndex}, #{lastRecordIndex}
	</select>
	
	<select id="selPhoneList" resultType="java.util.HashMap" parameterType="java.util.HashMap" statementType="PREPARED">
  	  SELECT * FROM (
		SELECT
					ROW_NUMBER() OVER (ORDER BY
							  <if test="sort == null">A.N_MON_ID</if>
							  <if test="sort != null">
								  <choose>
									  <when test="sort.size() == 0">
										  A.N_MON_ID
									  </when>
									  <otherwise>
										  <include refid="SQL_OderBy"/>
									  </otherwise>
								  </choose>
							  </if>) NUM
			, FOUND_ROWS() AS TOTAL_COUNT
			, A.N_MON_ID KEY_COL, A.N_MON_ID, A.N_MON_ID AS OLD_N_MON_ID, (SELECT S_MON_NAME FROM TB_MON_INFO WHERE N_MON_ID = A.N_MON_ID) S_MON_NAME,
			A.S_NAME, A.S_IPADDRESS, A.S_TYPE,
    		(SELECT S_GROUP_NAME FROM TB_SVR_GROUP B WHERE B.N_GROUP_CODE = A.N_GROUP AND B.F_USE = 'Y') N_GROUP_NAME,
    		N_GROUP, S_EXT_NUM
		FROM
			TB_SNMP_REAL_M01_IPPHONE A
		WHERE
			1 = 1
			<if test="S_EXT_NUM != '' and S_EXT_NUM != null">
			    AND A.S_EXT_NUM = #{S_EXT_NUM}
			</if>
			<if test="S_IPADDRESS != '' and S_IPADDRESS != null">
			    AND A.N_GROUP = #{N_GROUP}
			</if>
			<if test="S_NAME != '' and S_NAME != null">
			     AND UPPER(A.S_NAME) LIKE CONCAT('%',#{S_NAME},'%')
			</if>
			<if test="S_RUNNING != '' and S_RUNNING != null">
			    AND UPPER(A.S_RUNNING) LIKE CONCAT('%',#{S_RUNNING},'%')
			</if>				
	  ) X
	  WHERE num BETWEEN #{firstRecordIndex} + 1 AND #{lastRecordIndex}
	</select>
	
	<select id="detail_info" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT
		    N_GROUP_CODE, S_GROUP_NAME, S_GUBUN, S_NAME, S_RUNNING, S_EXT_NUM, S_IP_ADDRESS, S_ADDRESS, S_BIGO, D_INS_DATE
		FROM
		    TB_MON_IPPHONE_INFO A
        WHERE
            A.S_IP_ADDRESS = #{S_IP_ADDRESS}
	</select>
	
	<!-- insert_data -->
	<insert id="insert_data" parameterType="java.util.HashMap" statementType="PREPARED">
		INSERT INTO TB_MON_IPPHONE_INFO (
			N_GROUP_CODE, S_GROUP_NAME
			, S_GUBUN, S_NAME, S_RUNNING
			, S_EXT_NUM, S_IP_ADDRESS, S_ADDRESS, S_BIGO
		)
		SELECT #{N_GROUP_CODE} 
			, (SELECT S_VALUE FROM TB_NUM_CODE WHERE S_GROUP_CODE = 'IPPHONE_GROUP' AND N_CODE = #{N_GROUP_CODE} LIMIT 1)
			, #{S_GUBUN}, #{S_NAME}, #{S_RUNNING}
			, #{S_EXT_NUM}, #{S_IP_ADDRESS}, #{S_ADDRESS}, #{S_BIGO}
	</insert>


	<!-- update_data -->
	<update id="update_data" parameterType="hashmap" statementType="PREPARED">
		UPDATE TB_MON_IPPHONE_INFO
		SET
			S_NAME = #{S_NAME}
			, S_GUBUN = #{S_GUBUN}
			, S_RUNNING = #{S_RUNNING}
			, S_EXT_NUM = #{S_EXT_NUM}
			, S_ADDRESS = #{S_ADDRESS}
			, S_BIGO = #{S_BIGO}
		WHERE
			S_IP_ADDRESS = #{S_IP_ADDRESS}
	</update>
  
  
	<delete id="delete_data" parameterType="java.util.HashMap" statementType="PREPARED">
		DELETE	FROM TB_MON_IPPHONE_INFO
		WHERE
			S_IP_ADDRESS = #{S_IP_ADDRESS}
	</delete>
	
	<delete id="delete_data_result" parameterType="java.util.HashMap" statementType="PREPARED">
		DELETE	FROM TB_MON_IPPHONE_RES
		WHERE
			S_IP_ADDRESS = #{S_IP_ADDRESS}
	</delete>
  	
	<delete id="delete_multi_data" parameterType="java.util.HashMap">
		DELETE	FROM TB_MON_IPPHONE_INFO
		WHERE
			S_IP_ADDRESS IN 
			<foreach item="item" index="index" collection="IP_LST" open="(" separator="),(" close=")">
				#{item}
			</foreach>
	</delete>

	<delete id="del_alm_phone" parameterType="java.util.HashMap">
		DELETE FROM TB_ALM_PHONE WHERE S_IP_ADDRESS = #{S_IP_ADDRESS} 
	</delete>	
		
	<delete id="del_alm_histroy_phone" parameterType="java.util.HashMap">
		DELETE FROM TB_ALM_HISTORY_PHONE WHERE S_IP_ADDRESS = #{S_IP_ADDRESS}
	</delete>	

	<!-- 엑셀  -->
	<select id="ipPhoneExcelQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT
            A.N_MON_ID,
            (SELECT S_MON_NAME FROM TB_MON_INFO WHERE N_MON_ID = A.N_MON_ID) AS N_MON_NAME,
            A.S_IPADDRESS,
            A.S_EXT_NUM,
            A.S_NAME,
            A.S_COMMUNITY,
            A.N_SNMP_VER,
            A.N_PORT,
            A.D_INS_DATE,
            A.S_TYPE,
            (SELECT S_GROUP_NAME FROM TB_SVR_GROUP B WHERE B.N_GROUP_CODE = A.N_GROUP AND B.F_USE = 'Y') N_GROUP_NAME,
            A.N_GROUP
        FROM
            TB_SNMP_REAL_M01_IPPHONE A
		WHERE
			1 = 1
			<if test="N_MON_ID != '' and N_MON_ID != null">
			    AND A.N_MON_ID = #{N_MON_ID}
			</if>
			<if test="N_GROUP != '' and N_GROUP != null and N_GROUP != 0">
			    AND A.N_GROUP = #{N_GROUP}
			</if>
			<if test="S_IPADDRESS != '' and S_IPADDRESS != null">
			    AND A.S_IPADDRESS LIKE '%' || #{S_IPADDRESS} || '%'
			</if>
			<if test="S_TYPE != '' and S_TYPE != null">
			    AND A.S_TYPE LIKE '%' || #{S_TYPE} || '%'
			</if>
			ORDER BY A.N_GROUP
	</select>
	
	<!-- 엑셀 DB 저장 -->
	<insert id="insipphoneExcel" parameterType="java.util.HashMap" statementType="PREPARED">
		INSERT INTO TB_SNMP_REAL_M01_IPPHONE(
			N_MON_ID, S_IPADDRESS, S_EXT_NUM, S_NAME, S_COMMUNITY, N_SNMP_VER, N_PORT, S_TYPE, N_GROUP, D_INS_DATE
		)
		VALUES
		(
			#{N_MON_ID}, #{S_IPADDRESS}, REPLACE(TO_CHAR(ROUND(#{S_EXT_NUM}, 0),'99999999'), ' ', ''), #{S_NAME}, #{S_COMMUNITY}, ROUND(#{N_SNMP_VER}, 0), ROUND(#{N_PORT}, 0), ROUND(#{S_TYPE},0), ROUND(#{N_GROUP}, 0), TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS')
		)
	</insert>


	<!-- 지점전화기 및 장애전화기 현황 -->
	<sql id="SQL_phone_alm_total_list">
			SELECT
				@NUM := @NUM + 1 NUM, TT.*
			FROM (
				SELECT
					N_GROUP_CODE, MAX(GROUP_NAME) AS GROUP_NAME
					, SUM(TOT_COUNT) AS TOT_COUNT 
					, SUM(ALM_COUNT) AS ALM_COUNT 
				FROM (
					SELECT
						N_GROUP_CODE, MAX(S_GROUP_NAME) AS GROUP_NAME, COUNT(N_GROUP_CODE) AS TOT_COUNT 
						, SUM(CASE WHEN P.S_IP_ADDRESS IS NOT NULL THEN 1 ELSE 0 END) AS ALM_COUNT
					FROM
						TB_MON_IPPHONE_INFO M LEFT OUTER JOIN TB_ALM_PHONE P ON M.S_IP_ADDRESS = P.S_IP_ADDRESS AND P.N_ALM_STATUS != '0'
						LEFT OUTER JOIN TB_DASH_ALM_SKIP DAS ON M.S_IP_ADDRESS = DAS.S_IP_ADDRESS
					WHERE		1=1 
					AND			(ISNULL(DAS.D_SKIP_TIME) OR DAS.D_SKIP_TIME &lt;= SYSDATE())
					GROUP BY	N_GROUP_CODE
					UNION ALL
					SELECT 
						N_CODE AS N_GROUP_CODE, S_VALUE AS GROUP_NAME
						, 0 AS TOT_COUNT, 0 AS ALM_COUNT
					FROM
						TB_NUM_CODE
					WHERE 
						S_GROUP_CODE = 'IPPHONE_GROUP'
				) A
				GROUP BY	N_GROUP_CODE
			) TT, (SELECT @NUM := 0) R	
	</sql>
	
	<!-- 지점전화기 및 장애전화기 현황 -->
	<sql id="SQL_phone_alm_total_list_Jijum">
			SELECT
				@NUM := @NUM + 1 NUM, TT.*
			FROM (
				SELECT
					N_GROUP_CODE, MAX(GROUP_NAME) AS GROUP_NAME
					, SUM(TOT_COUNT) AS TOT_COUNT 
					, SUM(ALM_COUNT) AS ALM_COUNT 
				FROM (
					SELECT
						N_GROUP_CODE, MAX(S_GROUP_NAME) AS GROUP_NAME, COUNT(N_GROUP_CODE) AS TOT_COUNT 
						, SUM(CASE WHEN P.S_IP_ADDRESS IS NOT NULL THEN 1 ELSE 0 END) AS ALM_COUNT
					FROM
						TB_MON_IPPHONE_INFO M LEFT OUTER JOIN TB_ALM_PHONE P ON M.S_IP_ADDRESS = P.S_IP_ADDRESS AND P.N_ALM_STATUS != '0'
						LEFT OUTER JOIN TB_DASH_ALM_SKIP DAS ON M.S_IP_ADDRESS = DAS.S_IP_ADDRESS
					WHERE		1=1 
					AND			(ISNULL(DAS.D_SKIP_TIME) OR DAS.D_SKIP_TIME &lt;= SYSDATE())
					AND 	S_GUBUN = '지점'
					GROUP BY	N_GROUP_CODE
					UNION ALL
					SELECT 
						N_CODE AS N_GROUP_CODE, S_VALUE AS GROUP_NAME
						, 0 AS TOT_COUNT, 0 AS ALM_COUNT
					FROM
						TB_NUM_CODE
					WHERE 
						S_GROUP_CODE = 'IPPHONE_GROUP'
				) A
				GROUP BY	N_GROUP_CODE
			) TT, (SELECT @NUM := 0) R	
	</sql>	
	
	<!-- 지점전화기 및 장애전화기 현황 -->
	<sql id="SQL_phone_alm_total_list_Running">
			SELECT
				@NUM := @NUM + 1 NUM, TT.*
			FROM (
				SELECT
					N_GROUP_CODE, MAX(GROUP_NAME) AS GROUP_NAME
					, SUM(TOT_COUNT) AS TOT_COUNT 
					, SUM(ALM_COUNT) AS ALM_COUNT 
				FROM (
					SELECT
						N_GROUP_CODE, MAX(S_GROUP_NAME) AS GROUP_NAME, COUNT(N_GROUP_CODE) AS TOT_COUNT 
						, SUM(CASE WHEN P.S_IP_ADDRESS IS NOT NULL THEN 1 ELSE 0 END) AS ALM_COUNT
					FROM
						TB_MON_IPPHONE_INFO M LEFT OUTER JOIN TB_ALM_PHONE P ON M.S_IP_ADDRESS = P.S_IP_ADDRESS AND P.N_ALM_STATUS != '0'
						LEFT OUTER JOIN TB_DASH_ALM_SKIP DAS ON M.S_IP_ADDRESS = DAS.S_IP_ADDRESS
					WHERE		1=1 
					AND			(ISNULL(DAS.D_SKIP_TIME) OR DAS.D_SKIP_TIME &lt;= SYSDATE())
					AND 	S_GUBUN = '러닝'
					GROUP BY	N_GROUP_CODE
					UNION ALL
					SELECT 
						N_CODE AS N_GROUP_CODE, S_VALUE AS GROUP_NAME
						, 0 AS TOT_COUNT, 0 AS ALM_COUNT
					FROM
						TB_NUM_CODE
					WHERE 
						S_GROUP_CODE = 'IPPHONE_GROUP'
				) A
				GROUP BY	N_GROUP_CODE
			) TT, (SELECT @NUM := 0) R	
	</sql>		
	

	<!-- 지점전화기 및 장애전화기 현황 -->
	<sql id="SQL_phone_alm_total_list_jijum">
			SELECT
				@NUM := @NUM + 1 NUM, TT.*
			FROM (
				SELECT
					N_GROUP_CODE, MAX(GROUP_NAME) AS GROUP_NAME
					, SUM(TOT_COUNT) AS TOT_COUNT 
					, SUM(ALM_COUNT) AS ALM_COUNT 
				FROM (
					SELECT
						N_GROUP_CODE, MAX(S_GROUP_NAME) AS GROUP_NAME, COUNT(N_GROUP_CODE) AS TOT_COUNT 
						, SUM(CASE WHEN P.S_IP_ADDRESS IS NOT NULL THEN 1 ELSE 0 END) AS ALM_COUNT
					FROM
						TB_MON_IPPHONE_INFO M LEFT OUTER JOIN TB_ALM_PHONE P ON M.S_IP_ADDRESS = P.S_IP_ADDRESS AND P.N_ALM_STATUS != '0'
						LEFT OUTER JOIN TB_DASH_ALM_SKIP DAS ON M.S_IP_ADDRESS = DAS.S_IP_ADDRESS
					WHERE		1=1 
					AND S_GUBUN = '지점'					
					AND			(ISNULL(DAS.D_SKIP_TIME) OR DAS.D_SKIP_TIME &lt;= SYSDATE())
					GROUP BY	N_GROUP_CODE
					UNION ALL
					SELECT 
						N_CODE AS N_GROUP_CODE, S_VALUE AS GROUP_NAME
						, 0 AS TOT_COUNT, 0 AS ALM_COUNT
					FROM
						TB_NUM_CODE
					WHERE 
						S_GROUP_CODE = 'IPPHONE_GROUP'
				) A
				GROUP BY	N_GROUP_CODE
			) TT, (SELECT @NUM := 0) R	
	</sql>	
	
	<!-- 지점전화기 및 장애전화기 현황 -->
	<sql id="SQL_phone_alm_total_list_running">
			SELECT
				@NUM := @NUM + 1 NUM, TT.*
			FROM (
				SELECT
					N_GROUP_CODE, MAX(GROUP_NAME) AS GROUP_NAME
					, SUM(TOT_COUNT) AS TOT_COUNT 
					, SUM(ALM_COUNT) AS ALM_COUNT 
				FROM (
					SELECT
						N_GROUP_CODE, MAX(S_GROUP_NAME) AS GROUP_NAME, COUNT(N_GROUP_CODE) AS TOT_COUNT 
						, SUM(CASE WHEN P.S_IP_ADDRESS IS NOT NULL THEN 1 ELSE 0 END) AS ALM_COUNT
					FROM
						TB_MON_IPPHONE_INFO M LEFT OUTER JOIN TB_ALM_PHONE P ON M.S_IP_ADDRESS = P.S_IP_ADDRESS AND P.N_ALM_STATUS != '0'
						LEFT OUTER JOIN TB_DASH_ALM_SKIP DAS ON M.S_IP_ADDRESS = DAS.S_IP_ADDRESS
					WHERE		1=1 
					AND S_GUBUN = '러닝'				
					AND			(ISNULL(DAS.D_SKIP_TIME) OR DAS.D_SKIP_TIME &lt;= SYSDATE())
					GROUP BY	N_GROUP_CODE
					UNION ALL
					SELECT 
						N_CODE AS N_GROUP_CODE, S_VALUE AS GROUP_NAME
						, 0 AS TOT_COUNT, 0 AS ALM_COUNT
					FROM
						TB_NUM_CODE
					WHERE 
						S_GROUP_CODE = 'IPPHONE_GROUP'
				) A
				GROUP BY	N_GROUP_CODE
			) TT, (SELECT @NUM := 0) R	
	</sql>		

	<!-- 지점전화기 및 장애전화기 현황 -->
	<select id="phone_alm_total_list_qry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT /* jijum."phone_alm_total_list_qry" */
			@NUM AS TOTAL_COUNT, X.*
		FROM (
			<if test="PHONE_GUBUN == '' or PHONE_GUBUN == null">
				<include refid="SQL_phone_alm_total_list"/>
			</if>
			<if test="PHONE_GUBUN == '지점'">
				<include refid="SQL_phone_alm_total_list_jijum"/>
			</if>
			<if test="PHONE_GUBUN == '러닝'">
				<include refid="SQL_phone_alm_total_list_running"/>
			</if>
			ORDER BY
			<if test="sort == null">N_GROUP_CODE</if>
			<if test="sort != null">
				<choose>
					<when test="sort.size() == 0">
						N_GROUP_CODE
					</when>
					<otherwise>
						<include refid="SQL_OderBy"/>
					</otherwise>
				</choose>
			</if>
		) X
		LIMIT #{firstRecordIndex}, #{lastRecordIndex}
	</select>
	
	<!-- 지점전화기 및 장애전화기 현황 -->
	<select id="phone_alm_total_list_qry_jijum" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT /* jijum."phone_alm_total_list_qry" */
			@NUM AS TOTAL_COUNT, X.*
		FROM (
			<include refid="SQL_phone_alm_total_list_jijum"/>
			ORDER BY
			<if test="sort == null">N_GROUP_CODE</if>
			<if test="sort != null">
				<choose>
					<when test="sort.size() == 0">
						N_GROUP_CODE
					</when>
					<otherwise>
						<include refid="SQL_OderBy"/>
					</otherwise>
				</choose>
			</if>
		) X
		LIMIT #{firstRecordIndex}, #{lastRecordIndex}
	</select>	
	
	<!-- 지점전화기 및 장애전화기 현황 -->
	<select id="phone_alm_total_list_qry_running" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT /* jijum."phone_alm_total_list_qry" */
			@NUM AS TOTAL_COUNT, X.*
		FROM (
			<include refid="SQL_phone_alm_total_list_running"/>
			ORDER BY
			<if test="sort == null">N_GROUP_CODE</if>
			<if test="sort != null">
				<choose>
					<when test="sort.size() == 0">
						N_GROUP_CODE
					</when>
					<otherwise>
						<include refid="SQL_OderBy"/>
					</otherwise>
				</choose>
			</if>
		) X
		LIMIT #{firstRecordIndex}, #{lastRecordIndex}
	</select>	
	
	<!-- 지점전화기 및 장애전화기 현황 -->
	<select id="phone_alm_total_list_qry_gubun" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT /* jijum."phone_alm_total_list_qry" */
			@NUM AS TOTAL_COUNT, X.*
		FROM (
			<if test="PHONE_GUBUN == '' or PHONE_GUBUN == null">
				<include refid="SQL_phone_alm_total_list"/>
			</if>
			<if test="PHONE_GUBUN == '지점'">
				<include refid="SQL_phone_alm_total_list_jijum"/>
			</if>
			<if test="PHONE_GUBUN == '러닝'">
				<include refid="SQL_phone_alm_total_list_running"/>
			</if>		
			ORDER BY
			<if test="sort == null">N_GROUP_CODE</if>
			<if test="sort != null">
				<choose>
					<when test="sort.size() == 0">
						N_GROUP_CODE
					</when>
					<otherwise>
						<include refid="SQL_OderBy"/>
					</otherwise>
				</choose>
			</if>
		) X
		LIMIT #{firstRecordIndex}, #{lastRecordIndex}
	</select>	

	<!-- 지점전화기 및 장애전화기 현황 -->
	<select id="phone_alm_total_list_qry_ex" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		<include refid="SQL_phone_alm_total_list"/>
	</select>
	

	<!-- 지점전화기 장애 현황 -->
	<select id="phone_alm_list_qry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT /* jijum.phone_alm_list_qry */
			@NUM AS TOTAL_COUNT, X.*
		FROM (
			SELECT
				@NUM := @NUM + 1 NUM, TT.*
			FROM (
				SELECT
					M.N_GROUP_CODE, M.S_GROUP_NAME, M.S_GUBUN, M.S_NAME, M.S_RUNNING
					, M.S_EXT_NUM, M.S_IP_ADDRESS, M.S_ADDRESS, M.D_INS_DATE
					, P.D_UPDATE_TIME, IFNULL(P.N_ALM_STATUS, 0) AS N_ALM_STATUS 
				FROM
					TB_MON_IPPHONE_INFO M LEFT OUTER JOIN TB_ALM_PHONE P ON M.S_IP_ADDRESS = P.S_IP_ADDRESS
					LEFT OUTER JOIN TB_DASH_ALM_SKIP DAS ON M.S_IP_ADDRESS = DAS.S_IP_ADDRESS
					WHERE 
								1=1 
					AND			(ISNULL(DAS.D_SKIP_TIME) OR DAS.D_SKIP_TIME &lt;= SYSDATE())
					
			) TT, (SELECT @NUM := 0) R
			<where>
				<if test="N_GROUP_CODE != '' and N_GROUP_CODE != null">
					AND N_GROUP_CODE = #{N_GROUP_CODE}
				</if>
				<if test="N_ALM_STATUS != '' and N_ALM_STATUS != null">
					AND N_ALM_STATUS = #{N_ALM_STATUS}
				</if>
				<if test="SEL_STATUS != '' and SEL_STATUS != null">
					<if test="SEL_STATUS == 'S_ALARM'">
						AND N_ALM_STATUS IN (1, 2, 3)
					</if>
					<if test="SEL_STATUS == 'S_NORMAL'">
						AND N_ALM_STATUS = 0
					</if>
				</if>
				<if test="S_EXT_NUM != '' and S_EXT_NUM != null">
					AND S_EXT_NUM LIKE CONCAT('%', #{S_EXT_NUM}, '%')
				</if>
				<if test="S_IP_ADDRESS != '' and S_IP_ADDRESS != null">
					AND S_IP_ADDRESS LIKE CONCAT('%', #{S_IP_ADDRESS}, '%')
				</if>
				<if test="S_ADDRESS != '' and S_ADDRESS != null">
					AND S_ADDRESS LIKE CONCAT('%', #{S_ADDRESS}, '%')
				</if>
				<if test="SEARCH_KEYWORD != null and SEARCH_KEYWORD != ''">
					<if test="SEARCH_TYPE != null and SEARCH_TYPE != '' and SEARCH_TYPE == 'S_GUBUN'">
					  	AND S_GUBUN LIKE CONCAT('%', #{SEARCH_KEYWORD}, '%')
					</if>
					<if test="SEARCH_TYPE != null and SEARCH_TYPE != '' and SEARCH_TYPE == 'S_NAME'">
					  	AND S_NAME LIKE CONCAT('%', #{SEARCH_KEYWORD}, '%')
					</if>
					<if test="SEARCH_TYPE != null and SEARCH_TYPE != '' and SEARCH_TYPE == 'S_RUNNING'">
					  	AND S_RUNNING LIKE CONCAT('%', #{SEARCH_KEYWORD}, '%')
					</if>
					<if test="SEARCH_TYPE != null and SEARCH_TYPE != '' and SEARCH_TYPE == 'S_EXT_NUM'">
					  	AND S_EXT_NUM LIKE CONCAT('%', #{SEARCH_KEYWORD}, '%')
					</if>
					<if test="SEARCH_TYPE != null and SEARCH_TYPE != '' and SEARCH_TYPE == 'S_IP_ADDRESS'">
					  	AND S_IP_ADDRESS LIKE CONCAT('%', #{SEARCH_KEYWORD}, '%')
					</if>
					<if test="SEARCH_TYPE != null and SEARCH_TYPE != '' and SEARCH_TYPE == 'S_ADDRESS'">
					  	AND S_ADDRESS LIKE CONCAT('%', #{SEARCH_KEYWORD}, '%')
					</if>
				</if>
			</where>
			ORDER BY
			<if test="sort == null">N_GROUP_CODE, S_GROUP_NAME</if>
			<if test="sort != null">
				<choose>
					<when test="sort.size() == 0">
						N_GROUP_CODE, S_GROUP_NAME
					</when>
					<otherwise>
						<include refid="SQL_OderBy"/>
					</otherwise>
				</choose>
			</if>
		) X
		LIMIT #{firstRecordIndex}, #{lastRecordIndex}
	</select>

</mapper>
