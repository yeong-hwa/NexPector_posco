<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="watcher_main">
	<!-- kendo grid order by -->
	<sql id="SQL_OderBy">
		<foreach collection="sort" item="s" separator=",">
			#{s.field} #{s.dir}
		</foreach>
	</sql>
	
	<select id="TreeSvrGroupQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
    		/* watcher_main.TreeSvrGroupQry */
            SELECT * FROM (
            SELECT 
                    0 N_GROUP_CODE, '전체' S_GROUP_NAME, -1 N_UP_CODE, 'Y' F_USE, 0 DEPTH, '-1' PARENT_CODE
                    ,(SELECT S_IMAGE_NAME FROM TB_SVR_GROUP_IMG WHERE N_GROUP_CODE = '-1') S_IMAGE_NAME
                    ,(SELECT S_IMAGE_URL FROM TB_SVR_GROUP_IMG WHERE N_GROUP_CODE = '-1') S_IMAGE_URL 
            FROM dual
            UNION
            SELECT 
                    A.N_GROUP_CODE,
                    A.S_GROUP_NAME,
                    COALESCE(A.N_UP_CODE,0) N_UP_CODE,
                    A.F_USE,
                    A.DEPTH,
                    A.PARENT_CODE
                    ,(SELECT S_IMAGE_NAME FROM TB_SVR_GROUP_IMG WHERE N_GROUP_CODE = A.N_GROUP_CODE) S_IMAGE_NAME
                    ,(SELECT S_IMAGE_URL FROM TB_SVR_GROUP_IMG WHERE N_GROUP_CODE = A.N_GROUP_CODE) S_IMAGE_URL 
            FROM (
				SELECT
					dc.n_group_code,
					dc.s_group_name,
					dc.n_up_code,
					dc.f_use,
					CAST(dc2.lev AS CHAR)                        AS DEPTH,
					hierarchy_sys_connect_by_path('/', dc.n_group_code) as PARENT_CODE
				FROM (
					SELECT
						hierarchy_connect_by_parent_svr_group(n_group_code) AS n_group_code,
						@level              AS lev
					FROM (
						SELECT
						@start_with := 0,
						@n_group_code := @start_with,
						@level := 0
						) vars, tb_svr_group
					WHERE @n_group_code is not null
				) dc2
				JOIN tb_svr_group dc
				ON dc.n_group_code = dc2.n_group_code
				ORDER BY n_up_code, n_group_code
            	) A
            ) A
            ORDER BY
                    (CASE WHEN N_UP_CODE IN ('-1', '0') THEN concat('0' , N_GROUP_CODE) ELSE '1' END), S_GROUP_NAME
  </select>
  
	<select id="UserCompoLstQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		/* watcher_main.UserCompoLstQry */
		SELECT
				A.S_USER_ID, A.S_COMPO_ID, A.N_SORT_NUM, B.S_COMPO_NAME
		FROM
				TB_USER_COMPONENT A INNER JOIN TB_COMPONENT_INFO B ON A.S_COMPO_ID = B.S_COMPO_ID AND A.S_USER_ID = #{S_USER_ID}
		ORDER BY
				A.N_SORT_NUM
	</select>
	
	<select id="CompoLstQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		/* watcher_main.CompoLstQry */
		SELECT
				A.S_COMPO_ID, A.S_COMPO_NAME
		FROM
				TB_COMPONENT_INFO A LEFT OUTER JOIN TB_USER_COMPONENT B ON A.S_COMPO_ID = B.S_COMPO_ID AND B.S_USER_ID = #{S_USER_ID}
		WHERE
				B.S_COMPO_ID IS NULL
	</select>
	
	<delete id="regCompoQry1" parameterType="java.util.HashMap" statementType="PREPARED">
		DELETE FROM
				TB_USER_COMPONENT
		WHERE
				S_USER_ID = #{S_USER_ID}
	</delete>

	<insert id="regCompoQry2" parameterType="java.util.HashMap" statementType="PREPARED">
  		INSERT INTO TB_USER_COMPONENT(S_USER_ID, S_COMPO_ID, N_SORT_NUM)
  		<foreach item="item" index="idx" collection="lst" separator="UNION">
  			SELECT #{S_USER_ID}, #{item.S_COMPO_ID}, #{item.N_SORT_NUM} FROM dual 
  		</foreach>
	</insert>
	
	<select id="checkErrorAlmStatusQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		/* watcher_main.checkErrorAlmStatusQry */
		SELECT A.*, IF(SIGN(LENGTH(A.ALM_MSG) - 100) = 1, concat(SUBSTR(A.ALM_MSG, 1, 100), '...'), A.ALM_MSG) AS S_ALM_MSG 
		FROM (	
			SELECT 
	        		DATE_FORMAT(A.D_UPDATE_TIME, '%Y%m%d%H%i%s') D_UPDATE_TIME
	        		, DATE_FORMAT(A.D_UPDATE_TIME, '%Y-%m-%d %H:%i:%s') D_UPDATE_TIME_FORMAT
					, FOUND_ROWS() AS TOTAL_COUNT
	        		, A.N_MON_ID, A.S_ALM_KEY, A.S_MAP_KEY, A.N_ALM_TYPE, A.N_ALM_CODE
	        		, A.N_ALM_STATUS, A.N_ALM_RATING
	        		, (SELECT S_MON_NAME FROM TB_MON_INFO WHERE N_MON_ID = A.N_MON_ID) S_MON_NAME
	        		, (SELECT S_ALM_RATING_NAME FROM TB_ALM_RATING_CODE WHERE N_ALM_RATING = A.N_ALM_RATING) S_ALM_RATING_NAME
	        		, (SELECT S_ALM_STATUS_NAME FROM TB_ALM_STATUS_CODE WHERE N_ALM_STATUS = A.N_ALM_STATUS) S_ALM_STATUS_NAME
<!-- 				, CONCAT(
						(SELECT S_ALM_MSG FROM TB_ALM_CODE WHERE N_ALM_TYPE = A.N_ALM_TYPE AND N_ALM_CODE = A.N_ALM_CODE)
						, ' ['
						, IFNULL((SELECT S_MSG FROM TB_ALM_HISTORY WHERE N_MON_ID = A.N_MON_ID AND S_ALM_KEY = A.S_ALM_KEY AND D_UPDATE_TIME = A.D_UPDATE_TIME 
							AND N_ALM_STATUS = A.N_ALM_STATUS AND N_ALM_RATING = A.N_ALM_RATING LIMIT 1), '')
						, ']'
					) AS ALM_MSG -->
					, f_make_only_alm_msg(A.S_ALM_KEY, A.N_ALM_STATUS, A.D_UPDATE_TIME) ALM_MSG
					, (SELECT N_GROUP_CODE FROM TB_MON_INFO WHERE N_MON_ID = A.N_MON_ID) N_GROUP_CODE
	        		, DATE_FORMAT(NOW(), '%Y-%m-%d %H:%i:%s') CHECK_DT
	        		<if test="LAST_ERROR_ALARM_DT != '' and LAST_ERROR_ALARM_DT != null">
		        		, CASE WHEN STR_TO_DATE(#{LAST_ERROR_ALARM_DT}, '%Y%m%d%H%i%s') &lt; A.D_UPDATE_TIME THEN '1' ELSE '0' END NEW_ALARM
		        	</if>
			FROM
			        TB_ALM A
			WHERE
			        A.N_ALM_STATUS &gt; 1 AND A.D_UPDATE_TIME &gt; STR_TO_DATE(#{LOGIN_DT}, '%Y%m%d%H%i%s')
		) A
		ORDER BY A.D_UPDATE_TIME DESC
	</select>

	<select id="checkEventAlmStatusQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		/* watcher_main.checkEventAlmStatusQry */
		SELECT X.*
		FROM (
			SELECT 
				A.S_EVENT_ID, A.S_EVENT_NAME, A.S_TARGET_USER, B.S_VALUE, A.S_DATA, A.S_USER_ID
				, DATE_FORMAT(A.D_IN_DATE, '%Y%m%d%H%i%s') D_IN_DATE
				, DATE_FORMAT(A.D_IN_DATE, '%Y-%m-%d %H:%i:%s') D_IN_DATE_FORMAT
				<if test="LAST_EVENT_ALARM_DT != '' and LAST_EVENT_ALARM_DT != null">
	        	, CASE WHEN STR_TO_DATE(#{LAST_EVENT_ALARM_DT}, '%Y%m%d%H%i%s') &lt; D_IN_DATE THEN '1' ELSE '0' END NEW_ALARM
	        	</if>
			FROM TB_WEB_EVENT_HISTORY A, TB_NUM_CODE B
			WHERE B.S_GROUP_CODE = 'WEB_EVENT_TYPE' AND
			      A.N_EVENT_TYPE = B.N_CODE AND
			      D_IN_DATE &gt; STR_TO_DATE(#{LOGIN_DT}, '%Y%m%d%H%i%s')
			) X
		ORDER BY D_IN_DATE DESC
		LIMIT 0, 20
	</select>
	
	<select id="checkSystemTimeQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		/* watcher_main.checkSystemTimeQry */
		SELECT 
			DATE_FORMAT(NOW(), '%Y%m%d%H%i%s') AS CHECK_DT, '0' AS NEW_ALARM 
		FROM dual
	</select>
	
	<select id="checkAlmHistoryQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT /* watcher_main.checkAlmHistoryQry */ X.*, @ROWNUM AS TOTAL_COUNT FROM (
			SELECT
					  @ROWNUM := @ROWNUM+1 AS                     NUM
	                , S_ALM_KEY, N_MON_ID, N_ALM_STATUS
	                , N_ALM_RATING, S_USER_ID, S_PROCESS, S_MSG, F_SEND
	                , DATE_FORMAT(D_UPDATE_TIME, '%Y-%m-%d %H:%i:%s') D_UPDATE_TIME
	                , (SELECT S_MON_NAME FROM TB_MON_INFO WHERE N_MON_ID = A.N_MON_ID) S_MON_NAME
	                , (SELECT S_ALM_STATUS_NAME FROM TB_ALM_STATUS_CODE WHERE N_ALM_STATUS = A.N_ALM_STATUS) S_ALM_STATUS_NAME
	                , (SELECT S_ALM_RATING_NAME FROM TB_ALM_RATING_CODE WHERE N_ALM_RATING = A.N_ALM_RATING) S_ALM_RATING_NAME
	                , (SElECT S_USER_NAME FROM TB_USER_INFO WHERE S_USER_ID = A.S_USER_ID) S_USER_NAME
<!-- 				, CONCAT (
						( SELECT S_ALM_MSG 
						  FROM TB_ALM_CODE 
					 	  WHERE 
					 		N_ALM_TYPE = (SELECT N_ALM_TYPE FROM TB_ALM WHERE N_MON_ID = A.N_MON_ID AND S_ALM_KEY = A.S_ALM_KEY)
								AND 
							N_ALM_CODE = (SELECT N_ALM_CODE FROM TB_ALM WHERE N_MON_ID = A.N_MON_ID AND S_ALM_KEY = A.S_ALM_KEY)
						)
						, ' ['
						, S_MSG
						, ']'
					) AS S_ALM_MSG -->
					, f_make_only_alm_msg(A.S_ALM_KEY, A.N_ALM_STATUS, A.D_UPDATE_TIME) S_ALM_MSG
			FROM
			        TB_ALM_HISTORY A, (SELECT @ROWNUM := 0) R
			WHERE
			        S_ALM_KEY = #{S_ALM_KEY}
			AND     N_MON_ID = #{N_MON_ID}
			ORDER BY D_UPDATE_TIME DESC
	  ) X
	  LIMIT #{firstRecordIndex}, #{lastRecordIndex}
	</select>
	
	<select id="errorAlmHistoryQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
	/* watcher_main.errorAlmHistoryQry */
		SELECT
				A.N_MON_ID, A.S_ALM_KEY
				, (SELECT S_ALM_MSG FROM TB_ALM_CODE WHERE N_ALM_TYPE = A.N_ALM_TYPE AND N_ALM_CODE = A.N_ALM_CODE) S_ALM_MSG
				, (SELECT S_MON_NAME FROM TB_MON_INFO WHERE N_MON_ID = A.N_MON_ID) S_MON_NAME
		FROM
		        TB_ALM A
		WHERE
				A.N_MON_ID = #{N_MON_ID} AND A.S_ALM_KEY = #{S_ALM_KEY}
	</select>
	
	<update id="almStatusUpdateQry" parameterType="java.util.HashMap" statementType="PREPARED">
		/* main.almStatusUpdateQry */
		UPDATE  TB_ALM
		SET     D_UPDATE_TIME = SYSDATE()
				, N_ALM_STATUS = #{N_ALM_STATUS}
		WHERE
				S_ALM_KEY = #{ERROR_S_ALM_KEY}
		AND     N_MON_ID = #{ERROR_N_MON_ID}
	</update>
  
	<insert id="almHistoryInsertQry" parameterType="java.util.HashMap" statementType="PREPARED">
		/* main.almHistoryInsertQry */
		INSERT INTO TB_ALM_HISTORY( S_ALM_KEY, N_MON_ID, D_UPDATE_TIME, N_ALM_STATUS, N_ALM_RATING, S_USER_ID, S_PROCESS, S_MSG)
		SELECT
				S_ALM_KEY, N_MON_ID, D_UPDATE_TIME, N_ALM_STATUS, N_ALM_RATING, #{S_USER_ID}, 'WATCHER', #{S_MSG}
		FROM
				TB_ALM
		WHERE
				S_ALM_KEY = #{ERROR_S_ALM_KEY}
		AND     N_MON_ID = #{ERROR_N_MON_ID}
	</insert>

	<!-- 실시간통계 상세 현황판 -->
	<select id="selectDetailDashboard" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		/* watcher_main.selectDetailDashboard */
		SELECT
				MON.N_GROUP_CODE,
				MON.N_TYPE_CODE,
				MON.N_MON_ID,
				MON.S_HOST,
				MON.S_MON_NAME,
				MON.S_MON_IP,
				MON.B_CON_INFO,
				MON.S_DESC,
        		(SELECT S_TYPE_NAME FROM TB_SVR_TYPE WHERE N_TYPE_CODE = MON.N_TYPE_CODE) AS S_TYPE_NAME,
        		(SELECT COUNT(1) FROM TB_ALM WHERE N_MON_ID = MON.N_MON_ID AND N_ALM_STATUS IN (2, 3, 5)) AS ALM_CNT,
        		COALESCE(CPU_RSRC.N_PER_USE, 0) AS CPU_PER_USE,
        		COALESCE(MEM_RSRC.N_FULL_SIZE, 0) AS MEM_FULL_SIZE,
        		COALESCE(MEM_RSRC.N_NOW_USE, 0) AS MEM_NOW_USE,
        		COALESCE(MEM_RSRC.N_PER_USE, 0) AS MEM_PER_USE,
        		COALESCE(DISK_RSRC.N_FULL_SIZE, 0) AS DISK_FULL_SIZE,
        		COALESCE(DISK_RSRC.N_NOW_USE, 0) AS DISK_NOW_SIZE,
        		COALESCE(DISK_RSRC.N_PER_USE, 0) AS DISK_PER_USE,
        		(SELECT COUNT(1) FROM TB_MON_MAP MAP  WHERE MAP.N_MON_TYPE = 3 AND MAP.F_USE = 'Y' AND MAP.N_MON_ID = MON.N_MON_ID) AS PRC_ALL_CNT,
        		(SELECT COUNT(1) FROM TB_MON_MAP MAP WHERE MAP.N_MON_TYPE = 3 AND MAP.F_USE = 'Y' AND MAP.N_MON_ID = MON.N_MON_ID	AND S_MAP_KEY NOT IN (SELECT S_MAP_KEY FROM TB_ALM WHERE N_MON_ID = MAP.N_MON_ID AND N_ALM_STATUS > 1)) AS PRC_RUN_CNT,
        		(SELECT COUNT(1) FROM TB_MON_MAP MAP  WHERE MAP.N_MON_TYPE = 4 AND MAP.F_USE = 'Y' AND MAP.N_MON_ID = MON.N_MON_ID) AS SVC_ALL_CNT,
        		(SELECT COUNT(1) FROM TB_MON_MAP MAP WHERE MAP.N_MON_TYPE = 4 AND MAP.F_USE = 'Y' AND MAP.N_MON_ID = MON.N_MON_ID	AND S_MAP_KEY NOT IN (SELECT S_MAP_KEY FROM TB_ALM WHERE N_MON_ID = MAP.N_MON_ID AND N_ALM_STATUS > 1)) AS SVC_RUN_CNT
		FROM TB_MON_INFO MON
		LEFT OUTER JOIN (
		    SELECT MAP.N_MON_ID, N_FULL_SIZE, N_NOW_USE, N_PER_USE
		      FROM TB_MON_MAP MAP
			INNER JOIN TB_MON_REAL_RESOURCE RSRC
		        ON MAP.S_MAP_KEY = RSRC.S_MAP_KEY
			   AND MAP.N_MON_ID = RSRC.N_MON_ID
		       AND MAP.S_MAP_KEY = '0000000'
		       AND MAP.F_USE = 'Y'
		) CPU_RSRC
		ON MON.N_MON_ID = CPU_RSRC.N_MON_ID
		LEFT OUTER JOIN (
		    SELECT MAP.N_MON_ID, N_FULL_SIZE, N_NOW_USE, N_PER_USE
		      FROM TB_MON_MAP MAP
			INNER JOIN TB_MON_REAL_RESOURCE RSRC
		    	ON MAP.S_MAP_KEY = RSRC.S_MAP_KEY
		       AND MAP.N_MON_ID = RSRC.N_MON_ID
		       AND MAP.S_MAP_KEY = '0010000'
		       AND MAP.F_USE = 'Y'
		) MEM_RSRC
		ON MON.N_MON_ID = MEM_RSRC.N_MON_ID
		LEFT OUTER JOIN (
		    SELECT MAP.N_MON_ID, SUM(N_FULL_SIZE) AS N_FULL_SIZE, SUM(N_NOW_USE) AS N_NOW_USE, SUM(N_NOW_USE)/SUM(N_FULL_SIZE) * 100 AS N_PER_USE
		      FROM TB_MON_MAP MAP
			INNER JOIN TB_MON_REAL_RESOURCE RSRC
		    	ON MAP.S_MAP_KEY = RSRC.S_MAP_KEY
		       AND MAP.N_MON_ID = RSRC.N_MON_ID
		       AND MAP.S_MAP_KEY LIKE '002%'
		       AND MAP.F_USE = 'Y'
		    GROUP BY MAP.N_MON_ID
		) DISK_RSRC
		ON MON.N_MON_ID = DISK_RSRC.N_MON_ID
		WHERE EXISTS (
		    SELECT 1 FROM TB_USER_MON_LIST WHERE S_USER_ID = #{SESSION_USER_ID} AND N_MON_ID = MON.N_MON_ID
		)
		AND EXISTS (
			SELECT 1 FROM TB_MON_INFO WHERE N_MON_ID = MON.N_MON_ID AND N_GROUP_CODE IN (SELECT N_GROUP_CODE FROM (
					SELECT
						dc.n_group_code,
						dc.s_group_name,
						dc.n_up_code,
						dc.f_use,
						CAST(dc2.lev AS CHAR)                        AS DEPTH,
						hierarchy_sys_connect_by_path('/', dc.n_group_code) as PARENT_CODE
					FROM (
						SELECT
							hierarchy_connect_by_parent_svr_group(n_group_code) AS n_group_code,
							@level              AS lev
						FROM (
							SELECT
							<if test="N_GROUP_CODE == -1">@start_with := 0,</if>
							<if test="N_GROUP_CODE != -1">@start_with := #{N_GROUP_CODE},</if>
							@n_group_code := @start_with,
							@level := 0
							) vars, tb_svr_group
						WHERE @n_group_code is not null
						) dc2
					JOIN tb_svr_group dc
					ON dc.n_group_code = dc2.n_group_code
					ORDER BY n_up_code, n_group_code
		) TREE_DATA)
		)
		<if test="S_MON_IP != null and S_MON_IP != ''">
			AND MON.S_MON_IP LIKE concat('%' , #{S_MON_IP} , '%')
		</if>
		<if test="S_MON_NAME != null and S_MON_NAME != ''">
			AND MON.S_MON_NAME LIKE concat('%' , #{S_MON_NAME} , '%')
		</if>
		<if test="N_TYPE_CODE != null and N_TYPE_CODE != ''">
			AND MON.N_TYPE_CODE LIKE concat('%' , #{N_TYPE_CODE} , '%')
		</if>
		ORDER BY 
		<if test="sort == null">N_TYPE_CODE, ALM_CNT DESC, S_MON_NAME, N_MON_ID</if>
		<if test="sort != null">
			<choose>
				<when test="sort.size() == 0">
					N_TYPE_CODE, ALM_CNT DESC, S_MON_NAME, N_MON_ID
				</when>
				<otherwise>
					<include refid="SQL_OderBy"/>
				</otherwise>
			</choose>
		</if>
	</select>
	
	<!--부서정보-->
	<select id="orgInfoTreeList" resultType="java.util.HashMap">
		/* main.orgInfoTreeList */
		SELECT
		    GROUP_CODE CODE ,
			CONCAT(REPEAT('　', DEPTH - 1), CAST(GROUP_NAME AS CHAR))  AS VAL
		FROM (
				SELECT
				  toi.group_code,
				  toi.group_name,
				  toi.upper,
				  hierarchy_sys_connect_by_path_org_info('/', toi.group_code) AS PARENT_CODE,
				  lvl                                                         AS DEPTH
				FROM (
					   SELECT
						 hierarchy_connect_by_parent_org_info(group_code) AS CODE,
						 @org_level                                       AS lvl,
						 @RNUM := @RNUM + 1                               AS ROWNUM
					   FROM (
							  SELECT
								@org_start_with := 'TOP',
								@org_group_code := @org_start_with,
								@org_level := 0
							) vars, TB_ORG_INFO, ( SELECT @RNUM := 0 ) R
					   WHERE @org_group_code IS NOT NULL
					 ) A join tb_org_info toi on a.CODE = toi.group_code
				WHERE 1=1
				<if test="filter != null and filter != ''">
					AND GROUP_NAME LIKE concat('%', #{filter}, '%')
				</if>
				order by A.ROWNUM
		) TREE_DATA
	</select>


	<!-- ALM_PHONE_HISTORY 조회 -->
	<select id="checkAlmPhoneHistoryQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT /* watcher_main.checkAlmPhoneHistoryQry */ X.*, @ROWNUM AS TOTAL_COUNT FROM (
			SELECT
					  @ROWNUM := @ROWNUM+1 AS NUM
	                , A.S_IP_ADDRESS, A.N_ALM_STATUS
	                , A.S_USER_ID, A.S_MSG
	                , DATE_FORMAT(A.D_UPDATE_TIME, '%Y-%m-%d %H:%i:%s') D_UPDATE_TIME
	                , (SELECT S_ALM_STATUS_NAME FROM TB_ALM_STATUS_CODE WHERE N_ALM_STATUS = A.N_ALM_STATUS) S_ALM_STATUS_NAME
	                , (SElECT S_USER_NAME FROM TB_USER_INFO WHERE S_USER_ID = A.S_USER_ID) S_USER_NAME
					, S_MSG AS S_ALM_MSG
			FROM
			        TB_ALM_HISTORY_PHONE A 
					  , (SELECT @ROWNUM := 0) R
			WHERE
			        A.S_IP_ADDRESS = #{S_IP_ADDRESS}
			ORDER BY A.D_UPDATE_TIME DESC
	  ) X
	  LIMIT #{firstRecordIndex}, #{lastRecordIndex}
	</select>
	<select id="checkAlmPhoneHistoryQry2" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT /* watcher_main.checkAlmPhoneHistoryQry */ X.*, @ROWNUM AS TOTAL_COUNT FROM (
			SELECT
					  @ROWNUM := @ROWNUM+1 AS NUM
	                , A.S_IP_ADDRESS, A.N_ALM_STATUS
	                , A.S_USER_ID, A.S_MSG
	                , DATE_FORMAT(A.D_UPDATE_TIME, '%Y-%m-%d %H:%i:%s') D_UPDATE_TIME
	                , B.N_GROUP_CODE, B.S_GROUP_NAME, B.S_NAME, B.S_RUNNING, B.S_GUBUN, B.S_EXT_NUM, B.S_ADDRESS
	                , (SELECT S_ALM_STATUS_NAME FROM TB_ALM_STATUS_CODE WHERE N_ALM_STATUS = A.N_ALM_STATUS) S_ALM_STATUS_NAME
	                , (SElECT S_USER_NAME FROM TB_USER_INFO WHERE S_USER_ID = A.S_USER_ID) S_USER_NAME
					, '응답없음' AS S_ALM_MSG
			FROM
			        TB_ALM_HISTORY_PHONE A INNER JOIN TB_MON_IPPHONE_INFO B ON A.S_IP_ADDRESS = B.S_IP_ADDRESS
					  , (SELECT @ROWNUM := 0) R
			WHERE
			        A.S_IP_ADDRESS = #{S_IP_ADDRESS}
			ORDER BY A.D_UPDATE_TIME DESC
	  ) X
	  LIMIT #{firstRecordIndex}, #{lastRecordIndex}
	</select>

	<!-- ALM_PHONE 상태 수정 -->
	<update id="almPhoneStatusUpdateQry" parameterType="java.util.HashMap" statementType="PREPARED">
		/* main.almPhoneStatusUpdateQry */
		UPDATE  TB_ALM_PHONE
		SET     D_UPDATE_TIME = SYSDATE()
				, N_ALM_STATUS = #{N_ALM_STATUS}
		WHERE
				S_IP_ADDRESS = #{ERROR_S_IP_ADDRESS}
	</update>

	<!-- ALM_PHONE_HISTORY 추가 -->
	<insert id="almPhoneHistoryInsertQry" parameterType="java.util.HashMap" statementType="PREPARED">
		/* main.almPhoneHistoryInsertQry */
		INSERT INTO TB_ALM_HISTORY_PHONE( S_IP_ADDRESS, D_UPDATE_TIME, N_ALM_STATUS, S_USER_ID, S_MSG)
		SELECT
				S_IP_ADDRESS, D_UPDATE_TIME, N_ALM_STATUS, #{S_USER_ID}, #{S_MSG}
		FROM
				TB_ALM_PHONE
		WHERE
				S_IP_ADDRESS = #{ERROR_S_IP_ADDRESS}
	</insert>

</mapper>