<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration PUBLIC "-//APACHE//DTD LOG4J 1.2//EN" "log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">

	<!--
		Pattern to output
			%d : 날자 포멧 정의
				- data format specifier 사용가능 : %d{data_pattern} 으로 사용함.
				- data pattern 은 SimpleDateFormat의 포맷과 동일한 포맷을 사용 가능함.
				- data pattern 이 정의되지 않은 경우 ISO8601 포맷을 사용함.
			%p : 로그의 Priority 문자열 - DEBUG, INFO, ERROR 등
			%c : 로그 메시지의 카테고리명
				- precision specifier 사용가능 : precision의 기준으로 '.' 을 기준으로 우측을 기준으로 함. spedifier를 주지 않으면 Full Name
				ex) aaa.bbb.ccc => %c{2} => bbb.ccc, %c{1} => ccc
			%C : 로그모듈을 호출한 클래스의 FQCN
				- precision specifier 사용가능 %c 와 동일한 rule 적용됨
			%m : 로그 메시지
			%M : 로그를 호출한 Caller 메소드 명
			%n : 플래폼 의존적인 Line Separator( 줄바꿈)
			%F : 로그 기록을 호출한 클래스의 파일명 (.java 의 확장자 까지 나옴)
				- 이 기능은 성능 저하를 가져옴
			%l(소문자) : 로그를 호출한 파일의 위치를 기록함.
				- JVM 의 구현체에 따라 다를 수 있음. 일반적으로 FQCN과 method 명, file 명, : LineNumber 가 나옴
			%L : 로그를 호출한 Caller 소스의 Line 번호.
				- 이 기능은 성능에 저하를 가져옴.
			%r : 레이아웃에 따라서 로그 문자열을 생성하는데 걸린 시간 경과 시간
				-밀리 세컨드 단위
			%t : 로그 이벤트를 생성한 쓰레드 명.
			%x : 쓰레드와 관련된 NDC(Nested Diagnostic Context)
			%X : 쓰레드와 관련된 MDC(Mapped Diagnostic Context)
			%% : % 표시를 출력하기 위해 사용한다.

			Conversion Pattern 정렬
			"-" 문자를 사용하여 Left 정렬을 할 수 있다. 지정되지 않은 경우에는 우측 정렬이 된다.

			%[-][a].[b]와 같이 문자열을 지정하면 출력되는 문자의 포맷을 컨트롤 할 수 있다.
			"-"  : 우측/좌측 정렬 여부. "-'을 붙이면 좌측 정렬이 되고, 아니면 기본으로 우측 정렬이 됨.
       		[a] 값이 정의되어야 사용이 가능하며 기록할 문자열이 "10" 자인 경우 "%20C" 와 같이 설정을 하면
       			%C에 의한 문자열이 20자 이하인 경우에는 문자열을 우측으로 정렬을 하고 20자를 생성해준다.
       			"%-20C"이면 좌측으로 정렬되고 20 byte의 문자열이 만들어진다. 빈 공간은 공백으로 처리된다.
    		[a] : 로그 문자열이 지정된 a 값 보다 작은 경우에 Padding을 맞추어 준다.
    			즉 a=10인 경우 기록될 문자열이 5자이면 공백으로 5자가 만들어진다.
    		[b] : 로그 문자열이 지정된 b 값 보다 작은 경우에는 상관 없지만 큰 경우에는 지정된 b 값만큼만 문자열을 커팅 한다.
    			단 커팅의 기준은 우측기준이 된다. 즉 "12345"이고 b=3인 경우에는 "345" 문자열이 기록된다.
	 -->

	<!-- Appenders -->
	<!--
		appender : class = org.apache.log4j.ConsoleAppender //console에 나오게 함
	 -->
	<appender name="console" class="org.apache.log4j.ConsoleAppender">
		<param name="Target" value="System.out" />
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="[LOG] %d %-5p: %c(%M) - %m%n" />
		</layout>
	</appender>

	<!-- Appenders file -->
	<!--
		Appender : class = org.apache.log4j.DailyRollingFileAppender //file에 daily 형식으로 저장 함
		File : file이 저장될 곳과 file 이름
		Append : true면 톰캣을 내렸다 올려도 파일이 리셋되지 않습니다.
		Threshold : 이 appender 는 여기 명시된 level과 같거나 높은 메세지만 로깅한다
		DatePattern :
		            '.'yyyy-MM	매달 첫번째날에 로그파일을 변경합니다
                    '.'yyyy-ww	매주의 시작시 로그파일을 변경합니다.
                    '.'yyyy-MM-dd	매일 자정에 로그파일을 변경합니다.
                    '.'yyyy-MM-dd-a	자정과 정오에 로그파일을 변경합니다.
                    '.'yyyy-MM-dd-HH	매 시간의 시작마다 로그파일을 변경합니다.
                    '.'yyyy-MM-dd-HH-mm	매분마다 로그파일을 변경합니다.
	 -->
	<appender name="error" class="org.apache.log4j.DailyRollingFileAppender">
		<param name="File" value="C:\\Apache\\logs\\error.log" />
		<param name="Append" value="true" />
		<param name="Threshold" value="error" />
		<param name="DatePattern" value="'.'yyyy-MM-dd" />
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%d %-5p: %c(%M) - %m%n" />
		</layout>
	</appender>

	<!--
        Appender : class = org.apache.log4j.RollingFileAppender //file에 roling 형식으로 저장 함
        File : file이 저장될 곳과 file 이름
        Append : true면 톰캣을 내렸다 올려도 파일이 리셋되지 않습니다.
        Threshold : 이 appender 는 여기 명시된 level과 같거나 높은 메세지만 로깅한다
        MaxFileSize : 파일 최대 사이즈는 10MB 로 설정
        MaxBackupIndex : 백업파일을 몇번가지 할것인지
     -->
	<appender name="debug" class="org.apache.log4j.RollingFileAppender">
		<param name="File" value="C:\\Apache\\logs\\CIMS_WEB.log" />
		<param name="Append" value="true" />
		<param name="Threshold" value="debug" />
		<param name="MaxFileSize" value="10MB" />
		<param name="MaxBackupIndex" value="20" />
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%d %-5p: %c(%M) - %m%n" />
		</layout>
	</appender>

	<!--
        Appender : class = org.apache.log4j.RollingFileAppender //file에 roling 형식으로 저장 함
        File : file이 저장될 곳과 file 이름
        Append : true면 톰캣을 내렸다 올려도 파일이 리셋되지 않습니다.
        Threshold : 이 appender 는 여기 명시된 level과 같거나 높은 메세지만 로깅한다
        MaxFileSize : 파일 최대 사이즈는 10MB 로 설정
        MaxBackupIndex : 백업파일을 몇번까지 할것인지
     -->
	<appender name="sql" class="org.apache.log4j.RollingFileAppender">
		<param name="File" value="C:\\Apache\\logs\\sql.log" />
		<param name="Append" value="true" />
		<param name="Threshold" value="debug" />
		<param name="MaxFileSize" value="10MB" />
		<param name="MaxBackupIndex" value="20" />
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%d %-5p: %c(%M) - %m%n" />
		</layout>
	</appender>

	<!-- 3rdparty Loggers -->

	<logger name="org.springframework" additivity="false">
		<level value="info" />
	</logger>

	<!--<logger name="org.springframework.beans" additivity="false">
		<level value="info" />
	</logger>

	<logger name="org.springframework.context" additivity="false">
		<level value="info" />
	</logger>

	<logger name="org.springframework.web" additivity="false">
		<level value="info" />
	</logger>

	<logger name="org.springframework.webflow" additivity="false">
        <level value="info" />
    </logger>-->

	<!--  Jakarta Commons logger -->

	<category name="org.apache" additivity="false">
		<priority value="error" />
		<appender-ref ref="console"/>
		<appender-ref ref="error"/>
	</category>

	<!-- SQL logger -->

	<logger name="java.sql" additivity="false">
		<level value="debug" />
		<appender-ref ref="console"/>
		<appender-ref ref="sql"/>
	</logger>

	<!--<logger name="java.sql.Statement" additivity="false">
		<level value="error" />
		<appender-ref ref="sql"/>
	</logger>

	<logger name="java.sql.PreparedStatement" additivity="false">
		<level value="debug" />
		<appender-ref ref="sql"/>
	</logger>

	<logger name="java.sql.ResultSet" additivity="false">
		<level value="debug" />
		<appender-ref ref="sql"/>
	</logger>-->

	<!-- Root Logger -->
	<!-- Level can be  ALL, DEBUG, INFO, WARN, ERROR, FATAL, OFF -->
	<root>
		<!-- 위에 지정되지 않은 나머지에 대한 설정
			priority(level) : 이상의 level 만 찍힌다.
			appender : 원하는 appender 설정
			console, error, debug, sql
		 -->
		<priority value="debug"/>
		<appender-ref ref="console"/>
		<appender-ref ref="debug"/>
	</root>

</log4j:configuration>
