<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="history_stats">

	<!-- kendo grid order by -->
	<sql id="SQL_OderBy">
		<foreach collection="sort" item="s" separator=",">
			${s.field} ${s.dir}
		</foreach>
	</sql>
	
	<!-- kendo grid order by 필드 변경-->
	<sql id="SQL_OderByCustomizing1">
		<foreach collection="sort" item="s" separator=",">
			<choose>
				<when test="s.field == 'IN_TIME'">
					IN_TIME_I
				</when>
				<when test="s.field == 'OUT_TIME'">
					OUT_TIME_I
				</when>
				<when test="s.field == 'EXT_TIME'">
					EXT_TIME_I
				</when>
				<otherwise>
				${s.field} 
				</otherwise>
			</choose>
			 ${s.dir}
		</foreach>
	</sql>
	
	<sql id="SQL_ServerGroup">
		SELECT /* SQL_ServerGroup */ hierarchy_connect_by_parent_svr_group(n_group_code) AS n_group_code, n_up_code, 
				COALESCE(N_UP_CODE, N_GROUP_CODE) AS DIS_N_GROUP_CODE, S_GROUP_NAME, S_ALIAS
		FROM (
   			SELECT
				<if test="N_GROUP_CODE == null or N_GROUP_CODE == '' or N_GROUP_CODE == -1">
				@start_with := 0,
				</if>
				<if test="N_GROUP_CODE != null and N_GROUP_CODE != '' and N_GROUP_CODE > -1">
				@start_with := #{N_GROUP_CODE},
				</if>
			 	@n_group_code := @start_with,
			 	@LEVEL := 0
			 ) vars, tb_svr_group
		WHERE @n_group_code IS NOT NULL AND F_USE = 'Y'
	</sql>
	
	<!--  리소스 이력 장비별 시작 -->
	<sql id="SQL_ResourceHistoryRetrieveServerQry">
	SELECT TT.*, @NUM := @NUM + 1 NUM
	FROM (
		SELECT 
			   A.N_MON_ID, A.S_MON_NAME AS S_BASE_NAME, A.S_MON_IP
		     , B.N_MON_TYPE, (SELECT S_DESC FROM TB_MON_TYPE_CODE WHERE N_MON_TYPE = B.N_MON_TYPE) S_TYPE_NAME
		     , B.S_MAP_KEY, B.S_MON_NAME, '1' AS S_DATA_TYPE, 'max' AS S_DATA_NAME
		     , DATE_FORMAT(STR_TO_DATE(C.N_DAY , '%Y%m%d'), '%Y-%m-%d') AS N_DAY
		     , C.TIME_00, C.TIME_01, C.TIME_02, C.TIME_03, C.TIME_04, C.TIME_05, C.TIME_06, C.TIME_07
		     , C.TIME_08, C.TIME_09, C.TIME_10, C.TIME_11, C.TIME_12, C.TIME_13, C.TIME_14, C.TIME_15
		     , C.TIME_16, C.TIME_17, C.TIME_18, C.TIME_19, C.TIME_20, C.TIME_21, C.TIME_22, C.TIME_23
		FROM TB_MON_INFO A, TB_MON_MAP B, TB_MON_ACCRUE_RESOURCE C
		WHERE A.N_MON_ID = B.N_MON_ID AND A.N_MON_ID = C.N_MON_ID
		    AND C.N_DAY BETWEEN #{S_ST_DT} AND #{S_ED_DT}
			AND B.S_MAP_KEY = C.S_MAP_KEY
		    AND A.N_MON_ID IN (SELECT N_MON_ID FROM TB_USER_MON_LIST WHERE S_USER_ID =  #{SESSION_USER_ID})
			<if test="N_GROUP_CODE != '' and N_GROUP_CODE != null">AND A.N_GROUP_CODE = (SELECT N_GROUP_CODE FROM TB_SVR_GROUP WHERE IFNULL(N_UP_CODE, N_GROUP_CODE) = #{N_GROUP_CODE} AND F_USE = 'Y')</if>
		    <if test="N_TYPE_CODE != '' and N_TYPE_CODE != null"> AND A.N_TYPE_CODE = #{N_TYPE_CODE}</if>
			<if test="N_MON_TYPE != '' and N_MON_TYPE != null"> AND	B.N_MON_TYPE IN (${N_MON_TYPE}) </if>
			<if test="SEARCH_TYPE != null and SEARCH_TYPE != '' and SEARCH_TYPE == 'ID'">
				AND A.N_MON_ID LIKE CONCAT('%', #{SEARCH_KEYWORD}, '%')
			</if>
			<if test="SEARCH_TYPE != null and SEARCH_TYPE != '' and SEARCH_TYPE == 'NM'">
				AND A.S_MON_NAME LIKE CONCAT('%', #{SEARCH_KEYWORD}, '%')
			</if>
			<if test="SEARCH_TYPE != null and SEARCH_TYPE != '' and SEARCH_TYPE == 'IP'">
				AND A.S_MON_IP LIKE CONCAT('%', #{SEARCH_KEYWORD}, '%')
			</if>
		UNION ALL
		SELECT 
			   A.N_MON_ID, A.S_MON_NAME AS S_BASE_NAME, A.S_MON_IP
		     , B.N_MON_TYPE, (SELECT S_DESC FROM TB_MON_TYPE_CODE WHERE N_MON_TYPE = B.N_MON_TYPE) S_TYPE_NAME
		     , B.S_MAP_KEY, B.S_MON_NAME, '2' AS S_DATA_TYPE, 'min' AS S_DATA_NAME
		     , DATE_FORMAT(STR_TO_DATE(C.N_DAY , '%Y%m%d'), '%Y-%m-%d') AS N_DAY
		     , C.TIME_00, C.TIME_01, C.TIME_02, C.TIME_03, C.TIME_04, C.TIME_05, C.TIME_06, C.TIME_07
		     , C.TIME_08, C.TIME_09, C.TIME_10, C.TIME_11, C.TIME_12, C.TIME_13, C.TIME_14, C.TIME_15
		     , C.TIME_16, C.TIME_17, C.TIME_18, C.TIME_19, C.TIME_20, C.TIME_21, C.TIME_22, C.TIME_23
		FROM TB_MON_INFO A, TB_MON_MAP B, TB_MON_ACCRUE_RESOURCE_MIN C
		WHERE A.N_MON_ID = B.N_MON_ID AND A.N_MON_ID = C.N_MON_ID
		    AND C.N_DAY BETWEEN #{S_ST_DT} AND #{S_ED_DT}
			AND B.S_MAP_KEY = C.S_MAP_KEY
		    AND A.N_MON_ID IN (SELECT N_MON_ID FROM TB_USER_MON_LIST WHERE S_USER_ID =  #{SESSION_USER_ID})
			<if test="N_GROUP_CODE != '' and N_GROUP_CODE != null">AND A.N_GROUP_CODE = (SELECT N_GROUP_CODE FROM TB_SVR_GROUP WHERE IFNULL(N_UP_CODE, N_GROUP_CODE) = #{N_GROUP_CODE} AND F_USE = 'Y')</if>
		    <if test="N_TYPE_CODE != '' and N_TYPE_CODE != null"> AND A.N_TYPE_CODE = #{N_TYPE_CODE}</if>
			<if test="N_MON_TYPE != '' and N_MON_TYPE != null"> AND	B.N_MON_TYPE IN (${N_MON_TYPE}) </if>
			<if test="SEARCH_TYPE != null and SEARCH_TYPE != '' and SEARCH_TYPE == 'ID'">
				AND A.N_MON_ID LIKE CONCAT('%', #{SEARCH_KEYWORD}, '%')
			</if>
			<if test="SEARCH_TYPE != null and SEARCH_TYPE != '' and SEARCH_TYPE == 'NM'">
				AND A.S_MON_NAME LIKE CONCAT('%', #{SEARCH_KEYWORD}, '%')
			</if>
			<if test="SEARCH_TYPE != null and SEARCH_TYPE != '' and SEARCH_TYPE == 'IP'">
				AND A.S_MON_IP LIKE CONCAT('%', #{SEARCH_KEYWORD}, '%')
			</if>
		UNION ALL
		SELECT 
			   A.N_MON_ID, A.S_MON_NAME AS S_BASE_NAME, A.S_MON_IP
		     , B.N_MON_TYPE, (SELECT S_DESC FROM TB_MON_TYPE_CODE WHERE N_MON_TYPE = B.N_MON_TYPE) S_TYPE_NAME
		     , B.S_MAP_KEY, B.S_MON_NAME, '3' AS S_DATA_TYPE, 'avg' AS S_DATA_NAME
		     , DATE_FORMAT(STR_TO_DATE(C.N_DAY , '%Y%m%d'), '%Y-%m-%d') AS N_DAY
		     , C.TIME_00, C.TIME_01, C.TIME_02, C.TIME_03, C.TIME_04, C.TIME_05, C.TIME_06, C.TIME_07
		     , C.TIME_08, C.TIME_09, C.TIME_10, C.TIME_11, C.TIME_12, C.TIME_13, C.TIME_14, C.TIME_15
		     , C.TIME_16, C.TIME_17, C.TIME_18, C.TIME_19, C.TIME_20, C.TIME_21, C.TIME_22, C.TIME_23
		FROM TB_MON_INFO A, TB_MON_MAP B, TB_MON_ACCRUE_RESOURCE_AVG C
		WHERE A.N_MON_ID = B.N_MON_ID AND A.N_MON_ID = C.N_MON_ID
		    AND C.N_DAY BETWEEN #{S_ST_DT} AND #{S_ED_DT}
			AND B.S_MAP_KEY = C.S_MAP_KEY
		    AND A.N_MON_ID IN (SELECT N_MON_ID FROM TB_USER_MON_LIST WHERE S_USER_ID =  #{SESSION_USER_ID})
			<if test="N_GROUP_CODE != '' and N_GROUP_CODE != null">AND A.N_GROUP_CODE = (SELECT N_GROUP_CODE FROM TB_SVR_GROUP WHERE IFNULL(N_UP_CODE, N_GROUP_CODE) = #{N_GROUP_CODE} AND F_USE = 'Y')</if>
		    <if test="N_TYPE_CODE != '' and N_TYPE_CODE != null"> AND A.N_TYPE_CODE = #{N_TYPE_CODE}</if>
			<if test="N_MON_TYPE != '' and N_MON_TYPE != null"> AND	B.N_MON_TYPE IN (${N_MON_TYPE}) </if>
			<if test="SEARCH_TYPE != null and SEARCH_TYPE != '' and SEARCH_TYPE == 'ID'">
				AND A.N_MON_ID LIKE CONCAT('%', #{SEARCH_KEYWORD}, '%')
			</if>
			<if test="SEARCH_TYPE != null and SEARCH_TYPE != '' and SEARCH_TYPE == 'NM'">
				AND A.S_MON_NAME LIKE CONCAT('%', #{SEARCH_KEYWORD}, '%')
			</if>
			<if test="SEARCH_TYPE != null and SEARCH_TYPE != '' and SEARCH_TYPE == 'IP'">
				AND A.S_MON_IP LIKE CONCAT('%', #{SEARCH_KEYWORD}, '%')
			</if>
	) TT, (SELECT @NUM := 0) R 
	ORDER BY 
			<if test="sort == null">N_DAY DESC, S_BASE_NAME, S_MAP_KEY, S_DATA_TYPE</if>
			<if test="sort != null">
				<choose>
					<when test="sort.size() == 0">
						N_DAY DESC, S_BASE_NAME, S_MAP_KEY, S_DATA_TYPE
					</when>
					<otherwise>
						<include refid="SQL_OderBy"/>
					</otherwise>
				</choose>
			</if>
	</sql>

	<sql id="SQL_ResourceHistoryRetrieveServerQry_OLD">
		SELECT 
			 @NUM := @NUM + 1 NUM
			 , A.N_MON_ID, A.S_MON_NAME AS S_BASE_NAME, A.S_MON_IP
		     , B.N_MON_TYPE, (SELECT S_DESC FROM TB_MON_TYPE_CODE WHERE N_MON_TYPE = B.N_MON_TYPE) S_TYPE_NAME
		     , B.S_MAP_KEY, B.S_MON_NAME
		     , DATE_FORMAT(STR_TO_DATE(C.N_DAY , '%Y%m%d'), '%Y-%m-%d') AS N_DAY
		     , C.TIME_00, C.TIME_01, C.TIME_02, C.TIME_03, C.TIME_04, C.TIME_05, C.TIME_06, C.TIME_07
		     , C.TIME_08, C.TIME_09, C.TIME_10, C.TIME_11, C.TIME_12, C.TIME_13, C.TIME_14, C.TIME_15
		     , C.TIME_16, C.TIME_17, C.TIME_18, C.TIME_19, C.TIME_20, C.TIME_21, C.TIME_22, C.TIME_23
		FROM TB_MON_INFO A, TB_MON_MAP B, TB_MON_ACCRUE_RESOURCE C, (SELECT @NUM := 0) R 
		WHERE A.N_MON_ID = B.N_MON_ID AND A.N_MON_ID = C.N_MON_ID
		    AND C.N_DAY BETWEEN #{S_ST_DT} AND #{S_ED_DT}
			AND B.S_MAP_KEY = C.S_MAP_KEY
		    AND A.N_MON_ID IN (SELECT N_MON_ID FROM TB_USER_MON_LIST WHERE S_USER_ID =  #{SESSION_USER_ID})
			<if test="N_GROUP_CODE != '' and N_GROUP_CODE != null">AND A.N_GROUP_CODE = (SELECT N_GROUP_CODE FROM TB_SVR_GROUP WHERE IFNULL(N_UP_CODE, N_GROUP_CODE) = #{N_GROUP_CODE} AND F_USE = 'Y')</if>
		    <if test="N_TYPE_CODE != '' and N_TYPE_CODE != null"> AND A.N_TYPE_CODE = #{N_TYPE_CODE}</if>
			<if test="N_MON_TYPE != '' and N_MON_TYPE != null"> AND	B.N_MON_TYPE IN (${N_MON_TYPE}) </if>
			<if test="SEARCH_TYPE != null and SEARCH_TYPE != '' and SEARCH_TYPE == 'ID'">
				AND A.N_MON_ID LIKE CONCAT('%', #{SEARCH_KEYWORD}, '%')
			</if>
			<if test="SEARCH_TYPE != null and SEARCH_TYPE != '' and SEARCH_TYPE == 'NM'">
				AND A.S_MON_NAME LIKE CONCAT('%', #{SEARCH_KEYWORD}, '%')
			</if>
			<if test="SEARCH_TYPE != null and SEARCH_TYPE != '' and SEARCH_TYPE == 'IP'">
				AND A.S_MON_IP LIKE CONCAT('%', #{SEARCH_KEYWORD}, '%')
			</if>
			ORDER BY 
			<if test="sort == null">N_DAY DESC, S_BASE_NAME, S_MAP_KEY</if>
			<if test="sort != null">
				<choose>
					<when test="sort.size() == 0">
						N_DAY DESC, S_BASE_NAME, S_MAP_KEY
					</when>
					<otherwise>
						<include refid="SQL_OderBy"/>
					</otherwise>
				</choose>
			</if>
	</sql>

    <select id="ResourceHistoryRetrieveListServerQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
	    /* history_stats.ResourceHistoryRetrieveListQry */ 
		SELECT AA.*, @NUM AS TOTAL_COUNT
	    FROM ( <include refid="SQL_ResourceHistoryRetrieveServerQry"/> ) AA
	    LIMIT #{firstRecordIndex}, #{lastRecordIndex}
    </select>
    
    <select id="ResourceHistoryRetrieveExcelServerQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
	    <include refid="SQL_ResourceHistoryRetrieveServerQry"/>
    </select>
	
	<select id="ResourceHistoryRetrieveChartServerQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		/* history_stats.ResourceHistoryRetrieveChartQry */
		<include refid="SQL_ResourceHistoryRetrieveServerQry"/>
	</select>
	<!--  리소스 이력 장비별 종료 -->
	
	<!--  리소스 이력 날짜별 시작 -->
	<sql id="SQL_ResourceHistoryRetrieveDayQry">
		SELECT FOUND_ROWS() AS TOTAL_COUNT, XX.*
		FROM (
			SELECT 
			   0 AS ORD, CONCAT('최대(', A.N_DAY, ')') AS S_BASE_NAME, A.N_DAY, A.N_MON_TYPE, (SELECT S_DESC FROM TB_MON_TYPE_CODE WHERE N_MON_TYPE = A.N_MON_TYPE) AS S_TYPE_NAME
		       , ROUND(AVG(CAST(TIME_00 AS SIGNED)),0) TIME_00, ROUND(AVG(CAST(TIME_01 AS SIGNED)),0) TIME_01, ROUND(AVG(CAST(TIME_02 AS SIGNED)),0) TIME_02, ROUND(AVG(CAST(TIME_03 AS SIGNED)),0) TIME_03
		       , ROUND(AVG(CAST(TIME_04 AS SIGNED)),0) TIME_04, ROUND(AVG(CAST(TIME_05 AS SIGNED)),0) TIME_05, ROUND(AVG(CAST(TIME_06 AS SIGNED)),0) TIME_06, ROUND(AVG(CAST(TIME_07 AS SIGNED)),0) TIME_07
		       , ROUND(AVG(CAST(TIME_08 AS SIGNED)),0) TIME_08, ROUND(AVG(CAST(TIME_09 AS SIGNED)),0) TIME_09, ROUND(AVG(CAST(TIME_10 AS SIGNED)),0) TIME_10, ROUND(AVG(CAST(TIME_11 AS SIGNED)),0) TIME_11
		       , ROUND(AVG(CAST(TIME_12 AS SIGNED)),0) TIME_12, ROUND(AVG(CAST(TIME_13 AS SIGNED)),0) TIME_13, ROUND(AVG(CAST(TIME_14 AS SIGNED)),0) TIME_14, ROUND(AVG(CAST(TIME_15 AS SIGNED)),0) TIME_15
		       , ROUND(AVG(CAST(TIME_16 AS SIGNED)),0) TIME_16, ROUND(AVG(CAST(TIME_17 AS SIGNED)),0) TIME_17, ROUND(AVG(CAST(TIME_18 AS SIGNED)),0) TIME_18, ROUND(AVG(CAST(TIME_19 AS SIGNED)),0) TIME_19
		       , ROUND(AVG(CAST(TIME_20 AS SIGNED)),0) TIME_20, ROUND(AVG(CAST(TIME_21 AS SIGNED)),0) TIME_21, ROUND(AVG(CAST(TIME_22 AS SIGNED)),0) TIME_22, ROUND(AVG(CAST(TIME_23 AS SIGNED)),0) TIME_23
			FROM (
			     SELECT A.N_DAY, A.N_MON_TYPE, COUNT(B.N_DAY) + 1 AS RK
			     FROM (
			          SELECT   
		             	N_DAY, A.N_MON_TYPE,
			            AVG(CAST(TIME_00 AS SIGNED))+AVG(CAST(TIME_01 AS SIGNED))+AVG(CAST(TIME_02 AS SIGNED))+AVG(CAST(TIME_03 AS SIGNED))+AVG(CAST(TIME_04 AS SIGNED))+AVG(CAST(TIME_05 AS SIGNED))+AVG(CAST(TIME_06 AS SIGNED))+AVG(CAST(TIME_07 AS SIGNED))+
			            AVG(CAST(TIME_08 AS SIGNED))+AVG(CAST(TIME_09 AS SIGNED))+AVG(CAST(TIME_10 AS SIGNED))+AVG(CAST(TIME_11 AS SIGNED))+AVG(CAST(TIME_12 AS SIGNED))+AVG(CAST(TIME_13 AS SIGNED))+AVG(CAST(TIME_14 AS SIGNED))+AVG(CAST(TIME_15 AS SIGNED))+
                        AVG(CAST(TIME_16 AS SIGNED))+AVG(CAST(TIME_17 AS SIGNED))+AVG(CAST(TIME_18 AS SIGNED))+AVG(CAST(TIME_19 AS SIGNED))+AVG(CAST(TIME_20 AS SIGNED))+AVG(CAST(TIME_21 AS SIGNED))+AVG(CAST(TIME_22 AS SIGNED))+AVG(CAST(TIME_23 AS SIGNED)) AS AVG_HAP
			          FROM TB_MON_MAP A, TB_MON_ACCRUE_RESOURCE B
			          WHERE A.N_MON_ID = B.N_MON_ID AND A.S_MAP_KEY = B.S_MAP_KEY AND B.N_DAY BETWEEN #{S_ST_DT} AND #{S_ED_DT} AND A.N_MON_ID IN (SELECT N_MON_ID FROM TB_USER_MON_LIST WHERE S_USER_ID =  #{SESSION_USER_ID})
			          		<if test="N_MON_TYPE != '' and N_MON_TYPE != null"> AND	A.N_MON_TYPE IN (${N_MON_TYPE}) </if>
							<if test="N_GROUP_CODE != '' and N_GROUP_CODE != null">AND A.N_GROUP_CODE = (SELECT N_GROUP_CODE FROM TB_SVR_GROUP WHERE IFNULL(N_UP_CODE, N_GROUP_CODE) = #{N_GROUP_CODE} AND F_USE = 'Y')</if>
							<if test="N_TYPE_CODE != '' and N_TYPE_CODE != null"> AND A.N_MON_ID IN (SELECT N_MON_ID FROM TB_MON_INFO WHERE N_TYPE_CODE = #{N_TYPE_CODE})</if>   
			          GROUP BY N_DAY, N_MON_TYPE
			     ) A LEFT OUTER JOIN
			     (
			          SELECT   
			            N_DAY, A.N_MON_TYPE,
			            AVG(CAST(TIME_00 AS SIGNED))+AVG(CAST(TIME_01 AS SIGNED))+AVG(CAST(TIME_02 AS SIGNED))+AVG(CAST(TIME_03 AS SIGNED))+AVG(CAST(TIME_04 AS SIGNED))+AVG(CAST(TIME_05 AS SIGNED))+AVG(CAST(TIME_06 AS SIGNED))+AVG(CAST(TIME_07 AS SIGNED))+
			            AVG(CAST(TIME_08 AS SIGNED))+AVG(CAST(TIME_09 AS SIGNED))+AVG(CAST(TIME_10 AS SIGNED))+AVG(CAST(TIME_11 AS SIGNED))+AVG(CAST(TIME_12 AS SIGNED))+AVG(CAST(TIME_13 AS SIGNED))+AVG(CAST(TIME_14 AS SIGNED))+AVG(CAST(TIME_15 AS SIGNED))+
                        AVG(CAST(TIME_16 AS SIGNED))+AVG(CAST(TIME_17 AS SIGNED))+AVG(CAST(TIME_18 AS SIGNED))+AVG(CAST(TIME_19 AS SIGNED))+AVG(CAST(TIME_20 AS SIGNED))+AVG(CAST(TIME_21 AS SIGNED))+AVG(CAST(TIME_22 AS SIGNED))+AVG(CAST(TIME_23 AS SIGNED)) AS AVG_HAP
			          FROM TB_MON_MAP A, TB_MON_ACCRUE_RESOURCE B
			          WHERE A.N_MON_ID = B.N_MON_ID AND A.S_MAP_KEY = B.S_MAP_KEY AND B.N_DAY BETWEEN #{S_ST_DT} AND #{S_ED_DT} AND A.N_MON_ID IN (SELECT N_MON_ID FROM TB_USER_MON_LIST WHERE S_USER_ID =  #{SESSION_USER_ID})
	          			<if test="N_MON_TYPE != '' and N_MON_TYPE != null"> AND	A.N_MON_TYPE IN (${N_MON_TYPE}) </if>
						<if test="N_GROUP_CODE != '' and N_GROUP_CODE != null">AND A.N_GROUP_CODE = (SELECT N_GROUP_CODE FROM TB_SVR_GROUP WHERE IFNULL(N_UP_CODE, N_GROUP_CODE) = #{N_GROUP_CODE} AND F_USE = 'Y')</if>
						<if test="N_TYPE_CODE != '' and N_TYPE_CODE != null"> AND A.N_MON_ID IN (SELECT N_MON_ID FROM TB_MON_INFO WHERE N_TYPE_CODE = #{N_TYPE_CODE})</if>   
			          GROUP BY N_DAY, N_MON_TYPE
			     ) B
			     ON A.N_MON_TYPE = B.N_MON_TYPE AND A.AVG_HAP &lt; B.AVG_HAP
			     GROUP BY A.N_DAY, A.N_MON_TYPE
			) A, TB_MON_ACCRUE_RESOURCE B
			WHERE A.RK = 1 AND A.N_DAY = B.N_DAY AND A.N_MON_TYPE = (SELECT N_MON_TYPE FROM TB_MON_MAP WHERE N_MON_ID = B.N_MON_ID AND S_MAP_KEY = B.S_MAP_KEY) 
			    <if test="N_MON_TYPE != '' and N_MON_TYPE != null"> AND	A.N_MON_TYPE IN (${N_MON_TYPE}) </if>
				<if test="N_GROUP_CODE != '' and N_GROUP_CODE != null">AND A.N_GROUP_CODE = (SELECT N_GROUP_CODE FROM TB_SVR_GROUP WHERE IFNULL(N_UP_CODE, N_GROUP_CODE) = #{N_GROUP_CODE} AND F_USE = 'Y')</if>
				<if test="N_TYPE_CODE != '' and N_TYPE_CODE != null"> AND B.N_MON_ID IN (SELECT N_MON_ID FROM TB_MON_INFO WHERE N_TYPE_CODE = #{N_TYPE_CODE})</if>   
			GROUP BY A.N_DAY, A.N_MON_TYPE
			UNION ALL 
			SELECT   
			     1 AS ORD, CAST(N_DAY AS CHAR) AS S_BASE_NAME, N_DAY, A.N_MON_TYPE, (SELECT S_DESC FROM TB_MON_TYPE_CODE WHERE N_MON_TYPE = A.N_MON_TYPE) AS S_TYPE_NAME
			     , ROUND(AVG(CAST(TIME_00 AS SIGNED)),0) TIME_00, ROUND(AVG(CAST(TIME_01 AS SIGNED)),0) TIME_01, ROUND(AVG(CAST(TIME_02 AS SIGNED)),0) TIME_02, ROUND(AVG(CAST(TIME_03 AS SIGNED)),0) TIME_03
			     , ROUND(AVG(CAST(TIME_04 AS SIGNED)),0) TIME_04, ROUND(AVG(CAST(TIME_05 AS SIGNED)),0) TIME_05, ROUND(AVG(CAST(TIME_06 AS SIGNED)),0) TIME_06, ROUND(AVG(CAST(TIME_07 AS SIGNED)),0) TIME_07
			     , ROUND(AVG(CAST(TIME_08 AS SIGNED)),0) TIME_08, ROUND(AVG(CAST(TIME_09 AS SIGNED)),0) TIME_09, ROUND(AVG(CAST(TIME_10 AS SIGNED)),0) TIME_10, ROUND(AVG(CAST(TIME_11 AS SIGNED)),0) TIME_11
			     , ROUND(AVG(CAST(TIME_12 AS SIGNED)),0) TIME_12, ROUND(AVG(CAST(TIME_13 AS SIGNED)),0) TIME_13, ROUND(AVG(CAST(TIME_14 AS SIGNED)),0) TIME_14, ROUND(AVG(CAST(TIME_15 AS SIGNED)),0) TIME_15
			     , ROUND(AVG(CAST(TIME_16 AS SIGNED)),0) TIME_16, ROUND(AVG(CAST(TIME_17 AS SIGNED)),0) TIME_17, ROUND(AVG(CAST(TIME_18 AS SIGNED)),0) TIME_18, ROUND(AVG(CAST(TIME_19 AS SIGNED)),0) TIME_19
			     , ROUND(AVG(CAST(TIME_20 AS SIGNED)),0) TIME_20, ROUND(AVG(CAST(TIME_21 AS SIGNED)),0) TIME_21, ROUND(AVG(CAST(TIME_22 AS SIGNED)),0) TIME_22, ROUND(AVG(CAST(TIME_23 AS SIGNED)),0) TIME_23
			FROM TB_MON_MAP A, TB_MON_ACCRUE_RESOURCE B
			WHERE A.N_MON_ID = B.N_MON_ID AND A.S_MAP_KEY = B.S_MAP_KEY AND B.N_DAY BETWEEN #{S_ST_DT} AND #{S_ED_DT} AND A.N_MON_ID IN (SELECT N_MON_ID FROM TB_USER_MON_LIST WHERE S_USER_ID =  #{SESSION_USER_ID})
				<if test="N_MON_TYPE != '' and N_MON_TYPE != null"> AND	A.N_MON_TYPE IN (${N_MON_TYPE}) </if>
				<if test="N_GROUP_CODE != '' and N_GROUP_CODE != null">AND A.N_GROUP_CODE = (SELECT N_GROUP_CODE FROM TB_SVR_GROUP WHERE IFNULL(N_UP_CODE, N_GROUP_CODE) = #{N_GROUP_CODE} AND F_USE = 'Y')</if>
				<if test="N_TYPE_CODE != '' and N_TYPE_CODE != null"> AND A.N_MON_ID IN (SELECT N_MON_ID FROM TB_MON_INFO WHERE N_TYPE_CODE = #{N_TYPE_CODE})</if>   
			GROUP BY N_DAY, N_MON_TYPE
		) XX
		ORDER BY ORD, S_TYPE_NAME, S_BASE_NAME
	</sql>

    <select id="ResourceHistoryRetrieveListDayQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
	    /* history_stats.ResourceHistoryRetrieveListQry */ 
		SELECT AA.*
	    FROM ( <include refid="SQL_ResourceHistoryRetrieveDayQry"/> ) AA
	    LIMIT #{firstRecordIndex}, #{lastRecordIndex}
    </select>
    
    <select id="ResourceHistoryRetrieveExcelDayQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
	    <include refid="SQL_ResourceHistoryRetrieveDayQry"/>
    </select>
    
    <select id="ResourceHistoryRetrieveChartDayQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		<include refid="SQL_ResourceHistoryRetrieveDayQry"/>
	</select>
	<!--  리소스 이력 날짜별 종료 -->
    
	<!--  리소스 이력 월별 시작 maria db에서 안돌아가는 중..-->
	<sql id="SQL_ResourceHistoryRetrieveMonthQry">
		SELECT 
			@NUM := @NUM + 1 NUM
			, A.N_MON_ID, A.S_MON_NAME AS S_BASE_NAME, A.S_MON_IP
			, B.N_MON_TYPE, (SELECT S_DESC FROM TB_MON_TYPE_CODE WHERE N_MON_TYPE = B.N_MON_TYPE) S_TYPE_NAME
			, B.S_MAP_KEY, B.S_MON_NAME
			, DATE_FORMAT(STR_TO_DATE(CONCAT(SUBSTR(N_DAY, 1, 6), '01') , '%Y%m%d'), '%Y-%m') AS N_DAY
			, ROUND(AVG(CAST(TIME_00 AS SIGNED)),0) TIME_00, ROUND(AVG(CAST(TIME_01 AS SIGNED)),0) TIME_01, ROUND(AVG(CAST(TIME_02 AS SIGNED)),0) TIME_02, ROUND(AVG(CAST(TIME_03 AS SIGNED)),0) TIME_03
		  	, ROUND(AVG(CAST(TIME_04 AS SIGNED)),0) TIME_04, ROUND(AVG(CAST(TIME_05 AS SIGNED)),0) TIME_05, ROUND(AVG(CAST(TIME_06 AS SIGNED)),0) TIME_06, ROUND(AVG(CAST(TIME_07 AS SIGNED)),0) TIME_07
		   	, ROUND(AVG(CAST(TIME_08 AS SIGNED)),0) TIME_08, ROUND(AVG(CAST(TIME_09 AS SIGNED)),0) TIME_09, ROUND(AVG(CAST(TIME_10 AS SIGNED)),0) TIME_10, ROUND(AVG(CAST(TIME_11 AS SIGNED)),0) TIME_11
		   	, ROUND(AVG(CAST(TIME_12 AS SIGNED)),0) TIME_12, ROUND(AVG(CAST(TIME_13 AS SIGNED)),0) TIME_13, ROUND(AVG(CAST(TIME_14 AS SIGNED)),0) TIME_14, ROUND(AVG(CAST(TIME_15 AS SIGNED)),0) TIME_15
		   	, ROUND(AVG(CAST(TIME_16 AS SIGNED)),0) TIME_16, ROUND(AVG(CAST(TIME_17 AS SIGNED)),0) TIME_17, ROUND(AVG(CAST(TIME_18 AS SIGNED)),0) TIME_18, ROUND(AVG(CAST(TIME_19 AS SIGNED)),0) TIME_19
		   	, ROUND(AVG(CAST(TIME_20 AS SIGNED)),0) TIME_20, ROUND(AVG(CAST(TIME_21 AS SIGNED)),0) TIME_21, ROUND(AVG(CAST(TIME_22 AS SIGNED)),0) TIME_22, ROUND(AVG(CAST(TIME_23 AS SIGNED)),0) TIME_23
		FROM TB_MON_INFO A, TB_MON_MAP B, TB_MON_ACCRUE_RESOURCE C, (SELECT @NUM := 0) R 
		WHERE A.N_MON_ID = B.N_MON_ID AND A.N_MON_ID = C.N_MON_ID
			AND C.N_DAY &gt;= CAST(DATE_FORMAT(STR_TO_DATE(CONCAT(SUBSTR(#{S_ST_DT}, 1, 6), '01'), '%Y%m%d'), '%Y%m%d') AS SIGNED)  
			AND C.N_DAY &lt; CAST(DATE_FORMAT(ADDDATE(STR_TO_DATE(CONCAT(SUBSTR(#{S_ED_DT}, 1, 6), '01'), '%Y%m%d'), INTERVAL 1 MONTH), '%Y%m%d') AS SIGNED) 
			AND B.S_MAP_KEY = C.S_MAP_KEY
		    AND A.N_MON_ID IN (SELECT N_MON_ID FROM TB_USER_MON_LIST WHERE S_USER_ID =  #{SESSION_USER_ID})
			<if test="N_GROUP_CODE != '' and N_GROUP_CODE != null">AND A.N_GROUP_CODE = (SELECT N_GROUP_CODE FROM TB_SVR_GROUP WHERE IFNULL(N_UP_CODE, N_GROUP_CODE) = #{N_GROUP_CODE} AND F_USE = 'Y')</if>
		    <if test="N_TYPE_CODE != '' and N_TYPE_CODE != null"> AND A.N_TYPE_CODE = #{N_TYPE_CODE}</if>
		 	<if test="N_MON_TYPE != '' and N_MON_TYPE != null"> AND	B.N_MON_TYPE IN (${N_MON_TYPE}) </if>
		 	<if test="SEARCH_TYPE != null and SEARCH_TYPE != '' and SEARCH_TYPE == 'ID'">
				AND A.N_MON_ID LIKE CONCAT('%', #{SEARCH_KEYWORD}, '%')
			</if>
			<if test="SEARCH_TYPE != null and SEARCH_TYPE != '' and SEARCH_TYPE == 'NM'">
				AND A.S_MON_NAME LIKE CONCAT('%', #{SEARCH_KEYWORD}, '%')
			</if>
			<if test="SEARCH_TYPE != null and SEARCH_TYPE != '' and SEARCH_TYPE == 'IP'">
				AND A.S_MON_IP LIKE CONCAT('%', #{SEARCH_KEYWORD}, '%')
			</if>
		GROUP BY A.N_MON_ID, A.S_MON_NAME, A.S_MON_IP, B.N_MON_TYPE, B.S_MAP_KEY, B.N_MON_TYPE, B.S_MON_NAME, DATE_FORMAT(STR_TO_DATE(CONCAT(SUBSTR(C.N_DAY, 1, 6), '01') , '%Y%m%d'), '%Y-%m')
		ORDER BY N_DAY, N_MON_ID, N_MON_TYPE, S_MAP_KEY
	</sql>

    <select id="ResourceHistoryRetrieveListMonthQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
	    /* history_stats.ResourceHistoryRetrieveListMonthQry */ 
		SELECT @NUM AS TOTAL_COUNT, AA.*
	    FROM ( <include refid="SQL_ResourceHistoryRetrieveMonthQry"/> ) AA
	    LIMIT #{firstRecordIndex}, #{lastRecordIndex}
    </select>
    
    <select id="ResourceHistoryRetrieveExcelMonthQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
	    <include refid="SQL_ResourceHistoryRetrieveMonthQry"/>
    </select>
    
    <select id="ResourceHistoryRetrieveChartMonthQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		<include refid="SQL_ResourceHistoryRetrieveMonthQry"/>
	</select>
	<!--  리소스 이력 월별 종료 -->    
    	
	<select id="ResourceHistoryRetrieveQry_x123" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT /* history_stats.ResourceHistoryRetrieveQry_x123 */
				'최대' S_BASE_NAME
				, MAX(TO_NUMBER(TIME_00)) TIME_00, MAX(TO_NUMBER(TIME_01)) TIME_01, MAX(TO_NUMBER(TIME_02)) TIME_02, MAX(TO_NUMBER(TIME_03)) TIME_03
                , MAX(TO_NUMBER(TIME_04)) TIME_04, MAX(TO_NUMBER(TIME_05)) TIME_05, MAX(TO_NUMBER(TIME_06)) TIME_06, MAX(TO_NUMBER(TIME_07)) TIME_07
                , MAX(TO_NUMBER(TIME_08)) TIME_08, MAX(TO_NUMBER(TIME_09)) TIME_09, MAX(TO_NUMBER(TIME_10)) TIME_10, MAX(TO_NUMBER(TIME_11)) TIME_11
                , MAX(TO_NUMBER(TIME_12)) TIME_12, MAX(TO_NUMBER(TIME_13)) TIME_13, MAX(TO_NUMBER(TIME_14)) TIME_14, MAX(TO_NUMBER(TIME_15)) TIME_15
                , MAX(TO_NUMBER(TIME_16)) TIME_16, MAX(TO_NUMBER(TIME_17)) TIME_17, MAX(TO_NUMBER(TIME_18)) TIME_18, MAX(TO_NUMBER(TIME_19)) TIME_19
                , MAX(TO_NUMBER(TIME_20)) TIME_20, MAX(TO_NUMBER(TIME_21)) TIME_21, MAX(TO_NUMBER(TIME_22)) TIME_22, MAX(TO_NUMBER(TIME_23)) TIME_23
		FROM
				(SELECT * FROM TB_MON_ACCRUE_RESOURCE WHERE N_MON_ID IN (SELECT N_MON_ID FROM TB_USER_MON_LIST WHERE S_USER_ID = #{SESSION_USER_ID})) A
		WHERE
				N_DAY BETWEEN #{S_ST_DT} AND #{S_ED_DT}
		AND		S_MAP_KEY IN (SELECT S_MAP_KEY FROM TB_MON_MAP WHERE N_MON_TYPE = #{N_MON_TYPE})
		<if test="N_GROUP_CODE != '' and N_GROUP_CODE != null">
			AND		N_MON_ID IN (SELECT N_MON_ID FROM TB_MON_INFO WHERE N_GROUP_CODE = #{N_GROUP_CODE})
		</if>
		<if test="N_MON_ID != '' and N_MON_ID != null">
			AND		N_MON_ID = #{N_MON_ID}
		</if>
		UNION ALL
		SELECT
			<if test="S_REPORT_GUBUN == 'DAY'">
				SUBSTR(N_DAY, 1, 4) || '-' || SUBSTR(N_DAY, 5,2) || '-' || SUBSTR(N_DAY, LENGTH(N_DAY)-1) S_BASE_NAME
			</if>
			<if test="S_REPORT_GUBUN == 'MONTH'">
				SUBSTR(SUBSTR(N_DAY, 1,6), 1, 4) || '-' || SUBSTR(SUBSTR(N_DAY, 1,6), LENGTH(SUBSTR(N_DAY, 1,6))-1) S_BASE_NAME
			</if>
			<if test="S_REPORT_GUBUN == 'SERVER'">
				(SELECT S_MON_NAME FROM TB_MON_INFO WHERE N_MON_ID = A.N_MON_ID) S_BASE_NAME
			</if>
				, ROUND(AVG(TO_NUMBER(TIME_00)),0) TIME_00, ROUND(AVG(TO_NUMBER(TIME_01)),0) TIME_01, ROUND(AVG(TO_NUMBER(TIME_02)),0) TIME_02, ROUND(AVG(TO_NUMBER(TIME_03)),0) TIME_03
                , ROUND(AVG(TO_NUMBER(TIME_04)),0) TIME_04, ROUND(AVG(TO_NUMBER(TIME_05)),0) TIME_05, ROUND(AVG(TO_NUMBER(TIME_06)),0) TIME_06, ROUND(AVG(TO_NUMBER(TIME_07)),0) TIME_07
                , ROUND(AVG(TO_NUMBER(TIME_08)),0) TIME_08, ROUND(AVG(TO_NUMBER(TIME_09)),0) TIME_09, ROUND(AVG(TO_NUMBER(TIME_10)),0) TIME_10, ROUND(AVG(TO_NUMBER(TIME_11)),0) TIME_11
                , ROUND(AVG(TO_NUMBER(TIME_12)),0) TIME_12, ROUND(AVG(TO_NUMBER(TIME_13)),0) TIME_13, ROUND(AVG(TO_NUMBER(TIME_14)),0) TIME_14, ROUND(AVG(TO_NUMBER(TIME_15)),0) TIME_15
                , ROUND(AVG(TO_NUMBER(TIME_16)),0) TIME_16, ROUND(AVG(TO_NUMBER(TIME_17)),0) TIME_17, ROUND(AVG(TO_NUMBER(TIME_18)),0) TIME_18, ROUND(AVG(TO_NUMBER(TIME_19)),0) TIME_19
                , ROUND(AVG(TO_NUMBER(TIME_20)),0) TIME_20, ROUND(AVG(TO_NUMBER(TIME_21)),0) TIME_21, ROUND(AVG(TO_NUMBER(TIME_22)),0) TIME_22, ROUND(AVG(TO_NUMBER(TIME_23)),0) TIME_23
		FROM
				(SELECT * FROM TB_MON_ACCRUE_RESOURCE WHERE N_MON_ID IN (SELECT N_MON_ID FROM TB_USER_MON_LIST WHERE S_USER_ID = #{SESSION_USER_ID})) A
		WHERE
				N_DAY BETWEEN #{S_ST_DT} AND #{S_ED_DT}
		AND		S_MAP_KEY IN (SELECT S_MAP_KEY FROM TB_MON_MAP WHERE N_MON_TYPE = #{N_MON_TYPE})
		<if test="N_GROUP_CODE != '' and N_GROUP_CODE != null">
			AND		N_MON_ID IN (SELECT N_MON_ID FROM TB_MON_INFO WHERE N_GROUP_CODE = #{N_GROUP_CODE})
		</if>
		<if test="N_MON_ID != '' and N_MON_ID != null">
			AND		N_MON_ID = #{N_MON_ID}
		</if>
		GROUP BY
			<if test="S_REPORT_GUBUN == 'DAY'">
				N_DAY
			</if>
			<if test="S_REPORT_GUBUN == 'MONTH'">
				SUBSTR(N_DAY, 1,6)
			</if>
			<if test="S_REPORT_GUBUN == 'SERVER'">
				N_MON_ID
			</if>

	</select>

	<sql id="SQL_ProcessHistoryRetrieve">
        /* history_stats.SQL_ProcessHistoryRetrieve */
        SELECT
         S_BASE_NAME,
         TIME_00,
         TIME_01,
         TIME_02,
         TIME_03,
         TIME_04,
         TIME_05,
         TIME_06,
         TIME_07,
         TIME_08,
         TIME_09,
         TIME_10,
         TIME_11,
         TIME_12,
         TIME_13,
         TIME_14,
         TIME_15,
         TIME_16,
         TIME_17,
         TIME_18,
         TIME_19,
         TIME_20,
         TIME_21,
         TIME_22,
         TIME_23
       FROM (
              SELECT
                0 AS                      ROW_INDEX,
                '최대'                      S_BASE_NAME,
                MAX(CAST(TIME_00 AS SIGNED)) TIME_00,
                MAX(CAST(TIME_01 AS SIGNED)) TIME_01,
                MAX(CAST(TIME_02 AS SIGNED)) TIME_02,
                MAX(CAST(TIME_03 AS SIGNED)) TIME_03,
                MAX(CAST(TIME_04 AS SIGNED)) TIME_04,
                MAX(CAST(TIME_05 AS SIGNED)) TIME_05,
                MAX(CAST(TIME_06 AS SIGNED)) TIME_06,
                MAX(CAST(TIME_07 AS SIGNED)) TIME_07,
                MAX(CAST(TIME_08 AS SIGNED)) TIME_08,
                MAX(CAST(TIME_09 AS SIGNED)) TIME_09,
                MAX(CAST(TIME_10 AS SIGNED)) TIME_10,
                MAX(CAST(TIME_11 AS SIGNED)) TIME_11,
                MAX(CAST(TIME_12 AS SIGNED)) TIME_12,
                MAX(CAST(TIME_13 AS SIGNED)) TIME_13,
                MAX(CAST(TIME_14 AS SIGNED)) TIME_14,
                MAX(CAST(TIME_15 AS SIGNED)) TIME_15,
                MAX(CAST(TIME_16 AS SIGNED)) TIME_16,
                MAX(CAST(TIME_17 AS SIGNED)) TIME_17,
                MAX(CAST(TIME_18 AS SIGNED)) TIME_18,
                MAX(CAST(TIME_19 AS SIGNED)) TIME_19,
                MAX(CAST(TIME_20 AS SIGNED)) TIME_20,
                MAX(CAST(TIME_21 AS SIGNED)) TIME_21,
                MAX(CAST(TIME_22 AS SIGNED)) TIME_22,
                MAX(CAST(TIME_23 AS SIGNED)) TIME_23
              FROM
              <if test="N_MON_TYPE == 3">
              (SELECT * FROM TB_MON_ACCRUE_PROCESS WHERE N_MON_ID IN (SELECT N_MON_ID FROM TB_USER_MON_LIST WHERE S_USER_ID = #{SESSION_USER_ID})) A
              </if>
              <if test="N_MON_TYPE == 4">
              (SELECT * FROM TB_MON_ACCRUE_SERVICE WHERE N_MON_ID IN (SELECT N_MON_ID FROM TB_USER_MON_LIST WHERE S_USER_ID = #{SESSION_USER_ID})) A
              </if>
              WHERE N_DAY BETWEEN #{S_ST_DT} AND #{S_ED_DT}
                  AND S_MAP_KEY IN (SELECT S_MAP_KEY FROM TB_MON_MAP WHERE N_MON_TYPE = #{N_MON_TYPE})
              <if test="N_GROUP_CODE != '' and N_GROUP_CODE != null">
                  <if test="N_GROUP_CODE % 10000 > 0">
                      AND		N_MON_ID IN (SELECT N_MON_ID FROM TB_MON_INFO WHERE N_GROUP_CODE = #{N_GROUP_CODE})
                  </if>
                  <if test="N_GROUP_CODE % 10000 == 0">
                      AND		N_MON_ID IN (SELECT N_MON_ID FROM TB_MON_INFO WHERE N_GROUP_CODE IN (SELECT N_GROUP_CODE FROM TB_SVR_GROUP WHERE N_UP_CODE = #{N_GROUP_CODE} AND F_USE = 'Y'))
                  </if>
              </if>
              <if test="N_MON_ID != '' and N_MON_ID != null">
                  AND		N_MON_ID = #{N_MON_ID}
              </if>
              UNION ALL
              SELECT
                1 AS                                                                                         ROW_INDEX,
                <if test="S_REPORT_GUBUN == 'DAY'">
                    concat(SUBSTR(N_DAY, 1, 4), '-', SUBSTR(N_DAY, 5, 2), '-', SUBSTR(N_DAY, LENGTH(N_DAY) -1))                 S_BASE_NAME,
				</if>
				<if test="S_REPORT_GUBUN == 'MONTH'">

					concat(SUBSTR(N_DAY, 1,6), 1, 4) , '-' , SUBSTR(SUBSTR(N_DAY, 1,6), LENGTH(SUBSTR(N_DAY, 1,6))-1) S_BASE_NAME
				</if>
				<if test="S_REPORT_GUBUN == 'SERVER'">
					(SELECT S_MON_NAME FROM TB_MON_INFO WHERE N_MON_ID = A.N_MON_ID) S_BASE_NAME
				</if>

                ROUND(AVG(CAST(TIME_00 AS SIGNED)), 0)                                                          TIME_00,
                ROUND(AVG(CAST(TIME_01 AS SIGNED)), 0)                                                          TIME_01,
                ROUND(AVG(CAST(TIME_02 AS SIGNED)), 0)                                                          TIME_02,
                ROUND(AVG(CAST(TIME_03 AS SIGNED)), 0)                                                          TIME_03,
                ROUND(AVG(CAST(TIME_04 AS SIGNED)), 0)                                                          TIME_04,
                ROUND(AVG(CAST(TIME_05 AS SIGNED)), 0)                                                          TIME_05,
                ROUND(AVG(CAST(TIME_06 AS SIGNED)), 0)                                                          TIME_06,
                ROUND(AVG(CAST(TIME_07 AS SIGNED)), 0)                                                          TIME_07,
                ROUND(AVG(CAST(TIME_08 AS SIGNED)), 0)                                                          TIME_08,
                ROUND(AVG(CAST(TIME_09 AS SIGNED)), 0)                                                          TIME_09,
                ROUND(AVG(CAST(TIME_10 AS SIGNED)), 0)                                                          TIME_10,
                ROUND(AVG(CAST(TIME_11 AS SIGNED)), 0)                                                          TIME_11,
                ROUND(AVG(CAST(TIME_12 AS SIGNED)), 0)                                                          TIME_12,
                ROUND(AVG(CAST(TIME_13 AS SIGNED)), 0)                                                          TIME_13,
                ROUND(AVG(CAST(TIME_14 AS SIGNED)), 0)                                                          TIME_14,
                ROUND(AVG(CAST(TIME_15 AS SIGNED)), 0)                                                          TIME_15,
                ROUND(AVG(CAST(TIME_16 AS SIGNED)), 0)                                                          TIME_16,
                ROUND(AVG(CAST(TIME_17 AS SIGNED)), 0)                                                          TIME_17,
                ROUND(AVG(CAST(TIME_18 AS SIGNED)), 0)                                                          TIME_18,
                ROUND(AVG(CAST(TIME_19 AS SIGNED)), 0)                                                          TIME_19,
                ROUND(AVG(CAST(TIME_20 AS SIGNED)), 0)                                                          TIME_20,
                ROUND(AVG(CAST(TIME_21 AS SIGNED)), 0)                                                          TIME_21,
                ROUND(AVG(CAST(TIME_22 AS SIGNED)), 0)                                                          TIME_22,
                ROUND(AVG(CAST(TIME_23 AS SIGNED)), 0)                                                          TIME_23
              FROM
                <if test="N_MON_TYPE == 3">
                (SELECT * FROM TB_MON_ACCRUE_PROCESS WHERE N_MON_ID IN (SELECT N_MON_ID FROM TB_USER_MON_LIST WHERE S_USER_ID = #{SESSION_USER_ID})) A
                </if>
                <if test="N_MON_TYPE == 4">
                (SELECT * FROM TB_MON_ACCRUE_SERVICE WHERE N_MON_ID IN (SELECT N_MON_ID FROM TB_USER_MON_LIST WHERE S_USER_ID = #{SESSION_USER_ID})) A
                </if>
              WHERE N_DAY BETWEEN #{S_ST_DT} AND #{S_ED_DT}
                AND S_MAP_KEY IN (SELECT S_MAP_KEY FROM TB_MON_MAP WHERE N_MON_TYPE = #{N_MON_TYPE})
              <if test="N_GROUP_CODE != '' and N_GROUP_CODE != null">
                    <if test="N_GROUP_CODE % 10000 > 0">
                        AND		N_MON_ID IN (SELECT N_MON_ID FROM TB_MON_INFO WHERE N_GROUP_CODE = #{N_GROUP_CODE})
                    </if>
                    <if test="N_GROUP_CODE % 10000 == 0">
                        AND		N_MON_ID IN (SELECT N_MON_ID FROM TB_MON_INFO WHERE N_GROUP_CODE IN (SELECT N_GROUP_CODE FROM TB_SVR_GROUP WHERE N_UP_CODE = #{N_GROUP_CODE} AND F_USE = 'Y'))
                    </if>
                </if>
                <if test="N_TYPE_CODE != '' and N_TYPE_CODE != null">
                    AND		N_MON_ID IN (SELECT N_MON_ID FROM TB_MON_INFO WHERE N_TYPE_CODE = #{N_TYPE_CODE})
                </if>
              GROUP BY
                <if test="S_REPORT_GUBUN == 'DAY'">
                    N_DAY
                </if>
                <if test="S_REPORT_GUBUN == 'MONTH'">
                    SUBSTR(N_DAY, 1,6)
                </if>
                <if test="S_REPORT_GUBUN == 'SERVER'">
                    N_MON_ID
                </if>
        ) A
	</sql>

	<select id="ProcessHistoryRetrieveListQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT /* history_stats.ProcessHistoryRetrieveListQry */ *
		FROM (
			<include refid="SQL_ProcessHistoryRetrieve"/>
		) A
		LIMIT #{firstRecordIndex}, #{lastRecordIndex}
	</select>

	<select id="ProcessHistoryRetrieveChartQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		/* history_stats.ProcessHistoryRetrieveChartQry */
		<include refid="SQL_ProcessHistoryRetrieve"/>
	</select>

	<select id="ServiceHistoryRetrieveQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT /* history_stats.ServiceHistoryRetrieveQry */
				'최대' S_BASE_NAME
				, MAX(TO_NUMBER(TIME_00)) TIME_00, MAX(TO_NUMBER(TIME_01)) TIME_01, MAX(TO_NUMBER(TIME_02)) TIME_02, MAX(TO_NUMBER(TIME_03)) TIME_03
                , MAX(TO_NUMBER(TIME_04)) TIME_04, MAX(TO_NUMBER(TIME_05)) TIME_05, MAX(TO_NUMBER(TIME_06)) TIME_06, MAX(TO_NUMBER(TIME_07)) TIME_07
                , MAX(TO_NUMBER(TIME_08)) TIME_08, MAX(TO_NUMBER(TIME_09)) TIME_09, MAX(TO_NUMBER(TIME_10)) TIME_10, MAX(TO_NUMBER(TIME_11)) TIME_11
                , MAX(TO_NUMBER(TIME_12)) TIME_12, MAX(TO_NUMBER(TIME_13)) TIME_13, MAX(TO_NUMBER(TIME_14)) TIME_14, MAX(TO_NUMBER(TIME_15)) TIME_15
                , MAX(TO_NUMBER(TIME_16)) TIME_16, MAX(TO_NUMBER(TIME_17)) TIME_17, MAX(TO_NUMBER(TIME_18)) TIME_18, MAX(TO_NUMBER(TIME_19)) TIME_19
                , MAX(TO_NUMBER(TIME_20)) TIME_20, MAX(TO_NUMBER(TIME_21)) TIME_21, MAX(TO_NUMBER(TIME_22)) TIME_22, MAX(TO_NUMBER(TIME_23)) TIME_23
		FROM
				(SELECT * FROM TB_MON_ACCRUE_SERVICE WHERE N_MON_ID IN (SELECT N_MON_ID FROM TB_USER_MON_LIST WHERE S_USER_ID = #{SESSION_USER_ID})) A
		WHERE
				N_DAY BETWEEN #{S_ST_DT} AND #{S_ED_DT}
		AND		S_MAP_KEY IN (SELECT S_MAP_KEY FROM TB_MON_MAP WHERE N_MON_TYPE = #{N_MON_TYPE})
		<if test="N_GROUP_CODE != '' and N_GROUP_CODE != null">
			AND		N_MON_ID IN (SELECT N_MON_ID FROM TB_MON_INFO WHERE N_GROUP_CODE = #{N_GROUP_CODE})
		</if>
		<if test="N_MON_ID != '' and N_MON_ID != null">
			AND		N_MON_ID = #{N_MON_ID}
		</if>
		UNION ALL
		SELECT
			<if test="S_REPORT_GUBUN == 'DAY'">
				SUBSTR(N_DAY, 1, 4) || '-' || SUBSTR(N_DAY, 5,2) || '-' || SUBSTR(N_DAY, LENGTH(N_DAY)-1) S_BASE_NAME
			</if>
			<if test="S_REPORT_GUBUN == 'MONTH'">
				SUBSTR(SUBSTR(N_DAY, 1,6), 1, 4) || '-' || SUBSTR(SUBSTR(N_DAY, 1,6), LENGTH(SUBSTR(N_DAY, 1,6))-1) S_BASE_NAME
			</if>
			<if test="S_REPORT_GUBUN == 'SERVER'">
				(SELECT S_MON_NAME FROM TB_MON_INFO WHERE N_MON_ID = A.N_MON_ID) S_BASE_NAME
			</if>
				, ROUND(AVG(TO_NUMBER(TIME_00)),0) TIME_00, ROUND(AVG(TO_NUMBER(TIME_01)),0) TIME_01, ROUND(AVG(TO_NUMBER(TIME_02)),0) TIME_02, ROUND(AVG(TO_NUMBER(TIME_03)),0) TIME_03
                , ROUND(AVG(TO_NUMBER(TIME_04)),0) TIME_04, ROUND(AVG(TO_NUMBER(TIME_05)),0) TIME_05, ROUND(AVG(TO_NUMBER(TIME_06)),0) TIME_06, ROUND(AVG(TO_NUMBER(TIME_07)),0) TIME_07
                , ROUND(AVG(TO_NUMBER(TIME_08)),0) TIME_08, ROUND(AVG(TO_NUMBER(TIME_09)),0) TIME_09, ROUND(AVG(TO_NUMBER(TIME_10)),0) TIME_10, ROUND(AVG(TO_NUMBER(TIME_11)),0) TIME_11
                , ROUND(AVG(TO_NUMBER(TIME_12)),0) TIME_12, ROUND(AVG(TO_NUMBER(TIME_13)),0) TIME_13, ROUND(AVG(TO_NUMBER(TIME_14)),0) TIME_14, ROUND(AVG(TO_NUMBER(TIME_15)),0) TIME_15
                , ROUND(AVG(TO_NUMBER(TIME_16)),0) TIME_16, ROUND(AVG(TO_NUMBER(TIME_17)),0) TIME_17, ROUND(AVG(TO_NUMBER(TIME_18)),0) TIME_18, ROUND(AVG(TO_NUMBER(TIME_19)),0) TIME_19
                , ROUND(AVG(TO_NUMBER(TIME_20)),0) TIME_20, ROUND(AVG(TO_NUMBER(TIME_21)),0) TIME_21, ROUND(AVG(TO_NUMBER(TIME_22)),0) TIME_22, ROUND(AVG(TO_NUMBER(TIME_23)),0) TIME_23
		FROM
				(SELECT * FROM TB_MON_ACCRUE_SERVICE WHERE N_MON_ID IN (SELECT N_MON_ID FROM TB_USER_MON_LIST WHERE S_USER_ID = #{SESSION_USER_ID})) A
		WHERE
				N_DAY BETWEEN #{S_ST_DT} AND #{S_ED_DT}
		AND		S_MAP_KEY IN (SELECT S_MAP_KEY FROM TB_MON_MAP WHERE N_MON_TYPE = #{N_MON_TYPE})
		<if test="N_GROUP_CODE != '' and N_GROUP_CODE != null">
			AND		N_MON_ID IN (SELECT N_MON_ID FROM TB_MON_INFO WHERE N_GROUP_CODE = #{N_GROUP_CODE})
		</if>
		<if test="N_MON_ID != '' and N_MON_ID != null">
			AND		N_MON_ID = #{N_MON_ID}
		</if>
		GROUP BY
			<if test="S_REPORT_GUBUN == 'DAY'">
				N_DAY
			</if>
			<if test="S_REPORT_GUBUN == 'MONTH'">
				SUBSTR(N_DAY, 1,6)
			</if>
			<if test="S_REPORT_GUBUN == 'SERVER'">
				N_MON_ID
			</if>
		ORDER BY
                (CASE WHEN S_BASE_NAME = '최대' THEN '0' ELSE '1' END), S_BASE_NAME, N_MON_TYPE
	</select>

	<select id="AlarmSendHistoryRetrieveQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT /* history_stats.AlarmSendHistoryRetrieveQry */ * FROM (
    		SELECT
    				ROW_NUMBER() OVER (ORDER BY
													<if test="sort == null">D_SEND_TIME DESC</if>
													<if test="sort != null">
														<choose>
															<when test="sort.size() == 0">
																D_SEND_TIME DESC
															</when>
															<otherwise>
																<include refid="SQL_OderBy"/>
															</otherwise>
														</choose>
													</if>) NUM,
    				FOUND_ROWS() AS TOTAL_COUNT
    				, S_USER_ID, S_ALM_KEY, D_SEND_TIME, N_SEND_CODE, S_SEND_VALUE, S_FAIL_MSG
					, S_USER_NAME, S_MON_NAME, S_ALM_RATING_NAME, N_ALM_RATING
    		FROM
					(
						SELECT
								S_USER_ID, S_ALM_KEY, DATE_FORMAT(D_SEND_TIME, '%Y-%m-%d %H:%i:%s') D_SEND_TIME, N_SEND_CODE, S_SEND_VALUE, S_FAIL_MSG
								, (SELECT S_USER_NAME FROM TB_USER_INFO WHERE S_USER_ID = A.S_USER_ID) S_USER_NAME
								, (SELECT S_MON_NAME FROM TB_MON_INFO WHERE N_MON_ID = (SELECT N_MON_ID FROM TB_ALM WHERE S_ALM_KEY = A.S_ALM_KEY)) S_MON_NAME
								, (SELECT S_ALM_RATING_NAME FROM TB_ALM_RATING_CODE WHERE N_ALM_RATING = (SELECT N_ALM_RATING FROM TB_ALM WHERE S_ALM_KEY = A.S_ALM_KEY)) S_ALM_RATING_NAME
								, (SELECT N_ALM_RATING FROM TB_ALM_RATING_CODE WHERE N_ALM_RATING = (SELECT N_ALM_RATING FROM TB_ALM WHERE S_ALM_KEY = A.S_ALM_KEY)) N_ALM_RATING
						FROM
								(SELECT * FROM TB_ALM_SEND_HISTORY WHERE N_MON_ID IN (SELECT N_MON_ID FROM TB_USER_MON_LIST WHERE S_USER_ID = #{SESSION_USER_ID})) A
						WHERE
								D_SEND_TIME BETWEEN STR_TO_DATE(concat(#{S_ST_DT} , ' 00:00:00'), '%Y-%m-%d %H:%i:%s') AND STR_TO_DATE(concat(#{S_ED_DT} , ' 23:59:59'), '%Y-%m-%d %H:%i:%s')
							<if test="S_USER_ID != null and S_USER_ID != ''">
								AND S_USER_ID = #{S_USER_ID}
							</if>
							<if test="N_SEND_CODE != null and N_SEND_CODE != ''">
								AND N_SEND_CODE = #{N_SEND_CODE}
							</if>
							<if test="N_GROUP_CODE != null and N_GROUP_CODE != ''">
								<if test="N_GROUP_CODE % 10000 > 0">
									AND S_ALM_KEY IN (SELECT S_ALM_KEY FROM TB_ALM WHERE N_MON_ID IN (SELECT N_MON_ID FROM TB_MON_INFO WHERE N_GROUP_CODE = #{N_GROUP_CODE}))
								</if>
								<if test="N_GROUP_CODE % 10000 == 0">
									AND S_ALM_KEY IN (SELECT S_ALM_KEY
														FROM TB_ALM
													   WHERE N_MON_ID IN (SELECT N_MON_ID
																			FROM TB_MON_INFO
																		   WHERE N_GROUP_CODE IN (SELECT N_GROUP_CODE FROM TB_SVR_GROUP WHERE N_UP_CODE = #{N_GROUP_CODE} AND F_USE = 'Y')))
								</if>
							</if>
							<if test="N_TYPE_CODE != null and N_TYPE_CODE != ''">
								AND S_ALM_KEY IN (SELECT S_ALM_KEY FROM TB_ALM WHERE N_MON_ID IN (SELECT N_MON_ID FROM TB_MON_INFO WHERE N_TYPE_CODE = #{N_TYPE_CODE}))
							</if>
							<if test="N_ALM_RATING != null and N_ALM_RATING != ''">
								AND S_ALM_KEY IN (SELECT S_ALM_KEY FROM TB_ALM WHERE N_ALM_RATING = #{N_ALM_RATING})
							</if>
					) A
		) X
		LIMIT #{firstRecordIndex}, #{lastRecordIndex}
	</select>

	<select id="AlarmSendHistoryRetrieveCntQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT /* history_stats.AlarmSendHistoryRetrieveCntQry */
				COUNT(*) CNT
		FROM
				(SELECT * FROM TB_ALM_SEND_HISTORY WHERE N_MON_ID IN (SELECT N_MON_ID FROM TB_USER_MON_LIST WHERE S_USER_ID = #{SESSION_USER_ID})) A
		WHERE
				D_SEND_TIME BETWEEN STR_TO_DATE(concat(#{S_ST_DT} , ' 00:00:00'), '%Y-%m-%d %H:%i:%s') AND STR_TO_DATE(concat(#{S_ED_DT} , ' 23:59:59'), '%Y-%m-%d %H:%i:%s')
			<if test="S_USER_ID != null and S_USER_ID != ''">
				AND S_USER_ID = #{S_USER_ID}
			</if>
			<if test="N_SEND_CODE != null and N_SEND_CODE != ''">
				AND N_SEND_CODE = #{N_SEND_CODE}
			</if>
			<if test="N_GROUP_CODE != null and N_GROUP_CODE != ''">
				AND S_ALM_KEY IN (SELECT S_ALM_KEY FROM TB_ALM WHERE N_MON_ID IN (SELECT N_MON_ID FROM TB_MON_INFO WHERE N_GROUP_CODE = #{N_GROUP_CODE}))
			</if>
			<if test="N_MON_ID != null and N_MON_ID != ''">
				AND S_ALM_KEY IN (SELECT S_ALM_KEY FROM TB_ALM WHERE N_MON_ID = #{N_MON_ID})
			</if>
			<if test="N_ALM_RATING != null and N_ALM_RATING != ''">
				AND S_ALM_KEY IN (SELECT S_ALM_KEY FROM TB_ALM WHERE N_ALM_RATING = #{N_ALM_RATING})
			</if>
	</select>

	<select id="AlarmSendHistoryRetrieveExcelQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
			SELECT /* history_stats.AlarmSendHistoryRetrieveExcelQry */
					S_USER_ID, S_ALM_KEY, DATE_FORMAT(D_SEND_TIME, '%Y-%m-%d %H:%i:%s') D_SEND_TIME, N_SEND_CODE, S_SEND_VALUE, S_FAIL_MSG
					, (SELECT S_USER_NAME FROM TB_USER_INFO WHERE S_USER_ID = A.S_USER_ID) S_USER_NAME
					, (SELECT S_MON_NAME FROM TB_MON_INFO WHERE N_MON_ID = (SELECT N_MON_ID FROM TB_ALM WHERE S_ALM_KEY = A.S_ALM_KEY)) S_MON_NAME
					, (SELECT S_ALM_RATING_NAME FROM TB_ALM_RATING_CODE WHERE N_ALM_RATING = (SELECT N_ALM_RATING FROM TB_ALM WHERE S_ALM_KEY = A.S_ALM_KEY)) S_ALM_RATING_NAME
			FROM
					(SELECT * FROM TB_ALM_SEND_HISTORY WHERE N_MON_ID IN (SELECT N_MON_ID FROM TB_USER_MON_LIST WHERE S_USER_ID = #{SESSION_USER_ID})) A
			WHERE
		D_SEND_TIME BETWEEN STR_TO_DATE(concat(#{S_ST_DT} , ' 00:00:00'), '%Y-%m-%d %H:%i:%s') AND STR_TO_DATE(concat(#{S_ED_DT} , ' 23:59:59'), '%Y-%m-%d %H:%i:%s')
				<if test="S_USER_ID != null and S_USER_ID != ''">
					AND S_USER_ID = #{S_USER_ID}
				</if>
				<if test="N_SEND_CODE != null and N_SEND_CODE != ''">
					AND N_SEND_CODE = #{N_SEND_CODE}
				</if>
				<if test="N_GROUP_CODE != null and N_GROUP_CODE != ''">
					AND S_ALM_KEY IN (SELECT S_ALM_KEY FROM TB_ALM WHERE N_MON_ID IN (SELECT N_MON_ID FROM TB_MON_INFO WHERE N_GROUP_CODE = #{N_GROUP_CODE}))
				</if>
				<if test="N_TYPE_CODE != null and N_TYPE_CODE != ''">
					AND S_ALM_KEY IN (SELECT S_ALM_KEY FROM TB_ALM WHERE N_MON_ID IN (SELECT N_MON_ID FROM TB_MON_INFO WHERE N_TYPE_CODE = #{N_TYPE_CODE}))
				</if>
				<if test="N_ALM_RATING != null and N_ALM_RATING != ''">
					AND S_ALM_KEY IN (SELECT S_ALM_KEY FROM TB_ALM WHERE N_ALM_RATING = #{N_ALM_RATING})
				</if>
	</select>

	<select id="statsErrorHistoryRetrieveQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT /* history_stats.statsErrorHistoryRetrieveQry */ @NUM AS TOTAL_COUNT, X.*
		FROM (
			<include refid="SQL_statsErrorHistoryQry"></include>
		) X
		LIMIT #{firstRecordIndex}, #{lastRecordIndex}
	</select>

	<select id="statsErrorHistoryRetrieveExcelQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		<include refid="SQL_statsErrorHistoryQry"></include>
	</select>
	
	<sql id="SQL_statsErrorHistoryQry">
    		SELECT
    				@NUM := @NUM + 1 NUM
    				, S_ALM_KEY, D_UPDATE_TIME, N_ALM_STATUS, N_ALM_RATING AS N_ALM_RATING, CONCAT(S_USER_ID, ' / ', S_USER_NAME) AS S_USER_ID, S_PROCESS, S_MSG
					, N_ALM_STATUS_NAME, S_MON_NAME, S_USER_NAME, S_ALM_RATING_NAME, S_MON_IP, DTL_S_MSG
    		FROM
					(
						SELECT
								S_ALM_KEY, DATE_FORMAT(D_UPDATE_TIME, '%Y-%m-%d %H:%i:%s') D_UPDATE_TIME, N_ALM_STATUS, N_ALM_RATING, S_USER_ID, S_PROCESS
								, (SELECT S_MON_NAME FROM TB_MON_INFO WHERE N_MON_ID = A.N_MON_ID) S_MON_NAME
								, (SELECT S_MON_IP FROM TB_MON_INFO WHERE N_MON_ID = A.N_MON_ID) S_MON_IP
								, (SELECT S_ALM_STATUS_NAME FROM TB_ALM_STATUS_CODE WHERE N_ALM_STATUS = A.N_ALM_STATUS) N_ALM_STATUS_NAME
								, (SELECT S_USER_NAME FROM TB_USER_INFO WHERE S_USER_ID = A.S_USER_ID) S_USER_NAME
								, (SELECT S_ALM_RATING_NAME FROM TB_ALM_RATING_CODE WHERE N_ALM_RATING = A.N_ALM_RATING) S_ALM_RATING_NAME
<!-- 								, CONCAT((SELECT S_ALM_MSG FROM TB_ALM_CODE WHERE 
								 		N_ALM_TYPE = (SELECT N_ALM_TYPE FROM TB_ALM WHERE N_MON_ID = A.N_MON_ID AND S_ALM_KEY = A.S_ALM_KEY)
											AND 
										N_ALM_CODE = (SELECT N_ALM_CODE FROM TB_ALM WHERE N_MON_ID = A.N_MON_ID AND S_ALM_KEY = A.S_ALM_KEY))
									, ' ['
									, IFNULL(S_MSG, '')
									, ']'
								) AS S_MSG -->
								, f_make_only_alm_msg(A.S_ALM_KEY, A.N_ALM_STATUS, A.D_UPDATE_TIME) S_MSG
								, (SELECT S_ALM_MSG FROM TB_ALM_CODE
									WHERE N_ALM_TYPE = (SELECT N_ALM_TYPE FROM TB_ALM WHERE N_MON_ID = A.N_MON_ID AND S_ALM_KEY = A.S_ALM_KEY)
									  AND N_ALM_CODE = (SELECT N_ALM_CODE FROM TB_ALM WHERE N_MON_ID = A.N_MON_ID AND S_ALM_KEY = A.S_ALM_KEY)) DTL_S_MSG
						FROM
								(SELECT * FROM TB_ALM_HISTORY WHERE N_MON_ID IN (SELECT N_MON_ID FROM TB_USER_MON_LIST WHERE S_USER_ID = #{SESSION_USER_ID})) A
						WHERE
		             		D_UPDATE_TIME BETWEEN STR_TO_DATE(CONCAT(#{S_ST_DT} , '000000'), '%Y%m%d%H%i%s') AND STR_TO_DATE(CONCAT(#{S_ED_DT} , '235959'), '%Y%m%d%H%i%s')
							<if test="S_USER_ID != null and S_USER_ID != ''">
								AND S_USER_ID = #{S_USER_ID}
							</if>
							<if test="N_ALM_STATUS != null and N_ALM_STATUS != ''">
								AND N_ALM_STATUS = #{N_ALM_STATUS}
							</if>
							<if test="N_GROUP_CODE != null and N_GROUP_CODE != ''">
								AND S_ALM_KEY IN (SELECT S_ALM_KEY FROM TB_ALM WHERE N_MON_ID IN (SELECT N_MON_ID FROM TB_MON_INFO WHERE N_GROUP_CODE IN (SELECT N_GROUP_CODE FROM TB_SVR_GROUP WHERE IFNULL(N_UP_CODE, N_GROUP_CODE) = #{N_GROUP_CODE} AND F_USE = 'Y')))
							</if>
							<if test="N_TYPE_CODE != null and N_TYPE_CODE != ''">
								AND S_ALM_KEY IN (SELECT S_ALM_KEY FROM TB_ALM WHERE N_MON_ID IN (SELECT N_MON_ID FROM TB_MON_INFO WHERE N_TYPE_CODE = #{N_TYPE_CODE}))
							</if>
							<if test="N_ALM_RATING != null and N_ALM_RATING != ''">
								AND N_ALM_RATING = #{N_ALM_RATING}
							</if>
							<if test="PHONE_ALM_CODE == 1">
								AND EXISTS
										(
											SELECT
													1
											FROM
													TB_ALM
											WHERE
													N_MON_ID = A.N_MON_ID
											AND		S_ALM_KEY = A.S_ALM_KEY
											AND		N_ALM_TYPE = 14002
											AND		N_ALM_CODE BETWEEN 1000 AND 2999
										)
							</if>
							<if test="PHONE_ALM_CODE == 2">
								AND NOT EXISTS
										(
											SELECT
													1
											FROM
													TB_ALM
											WHERE
													N_MON_ID = A.N_MON_ID
											AND		S_ALM_KEY = A.S_ALM_KEY
											AND		N_ALM_TYPE = 14002
											AND		N_ALM_CODE BETWEEN 1000 AND 2999
										)
							</if>
					) A
					, (SELECT @NUM := 0) R
		    ORDER BY
			<if test="sort == null">D_UPDATE_TIME DESC</if>
			<if test="sort != null">
				<choose>
					<when test="sort.size() == 0">
						D_UPDATE_TIME DESC
					</when>
					<otherwise>
						<include refid="SQL_OderBy"/>
					</otherwise>
				</choose>
			</if>
	</sql>

	<select id="statsErrorHistoryRetrieveCntQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT /* history_stats.statsErrorHistoryRetrieveCntQry */
				COUNT(*) CNT
		FROM
				(SELECT * FROM TB_ALM_HISTORY WHERE N_MON_ID IN (SELECT N_MON_ID FROM TB_USER_MON_LIST WHERE S_USER_ID = #{SESSION_USER_ID})) A
		WHERE
		        D_UPDATE_TIME BETWEEN STR_TO_DATE(CONCAT(#{S_ST_DT} , '000000'), '%Y%m%d%H%i%s') AND STR_TO_DATE(CONCAT(#{S_ED_DT} , '235959'), '%Y%m%d%H%i%s')
				<if test="S_USER_ID != null and S_USER_ID != ''">
					AND S_USER_ID = #{S_USER_ID}
				</if>
				<if test="N_ALM_STATUS != null and N_ALM_STATUS != ''">
					AND N_ALM_STATUS = #{N_ALM_STATUS}
				</if>
				<if test="N_GROUP_CODE != null and N_GROUP_CODE != ''">
					AND S_ALM_KEY IN (SELECT S_ALM_KEY FROM TB_ALM WHERE N_MON_ID IN (SELECT N_MON_ID FROM TB_MON_INFO WHERE N_GROUP_CODE = #{N_GROUP_CODE}))
				</if>
				<if test="N_MON_ID != null and N_MON_ID != ''">
					AND S_ALM_KEY IN (SELECT S_ALM_KEY FROM TB_ALM WHERE N_MON_ID = #{N_MON_ID})
				</if>
				<if test="N_ALM_RATING != null and N_ALM_RATING != ''">
					AND S_ALM_KEY = #{N_ALM_RATING}
				</if>
				<if test="PHONE_ALM_CODE == 1">
					AND EXISTS
							(
								SELECT
										1
								FROM
										TB_ALM
								WHERE
										N_MON_ID = A.N_MON_ID
								AND		S_ALM_KEY = A.S_ALM_KEY
								AND		N_ALM_TYPE = 14002
								AND		N_ALM_CODE BETWEEN 1000 AND 2999
							)
				</if>
				<if test="PHONE_ALM_CODE == 2">
					AND NOT EXISTS
							(
								SELECT
										1
								FROM
										TB_ALM
								WHERE
										N_MON_ID = A.N_MON_ID
								AND		S_ALM_KEY = A.S_ALM_KEY
								AND		N_ALM_TYPE = 14002
								AND		N_ALM_CODE BETWEEN 1000 AND 2999
							)
				</if>
	</select>
	
	<select id="serviceVariationHistoryQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT 
			DATE_FORMAT(COLLECT_DATE, '%Y-%m-%d') S_COLLECT_DATE
			, IFNULL(MAX(CALL_TOTAL), 0) CALL_TOTAL
			, IFNULL(MAX(IN_TOTAL), 0) IN_TOTAL
			, IFNULL(MAX(EST_TOTAL), 0) EST_TOTAL
			, IFNULL(MAX(ANS_RATE), 0) ANS_RATE
			, IFNULL(MAX(CALL_ABANDON), 0) CALL_ABANDON
			, IFNULL(MAX(CUSTWAIT_MAX), 0) CUSTWAIT_MAX
			, IFNULL(MAX(CHAT_TOTAL), 0) CHAT_TOTAL
			, IFNULL(MAX(VARS_TOTAL), 0) VARS_TOTAL
			, IFNULL(MAX(AP_INVOKE_TOTAL), 0) + IFNULL(MAX(AP_INQUIRY_TOTAL), 0) AP_TOTAL
			, IFNULL(MAX(AP_INVOKE_TOTAL), 0) AP_INVOKE_TOTAL
			, IFNULL(MAX(AP_INQUIRY_TOTAL), 0) AP_INQUIRY_TOTAL
			, IFNULL(MAX(IP_INQUIRY_TOTAL), 0) IP_INQUIRY_TOTAL
			, IFNULL(MAX(CENTER_TOT), 0) CENTER_TOT
			, IFNULL(MAX(BRANCH_TOT), 0) BRANCH_TOT
			, IFNULL(MAX(ARS_TOT), 0) ARS_TOT
			, IFNULL(MAX(CHAT_TOT), 0) CHAT_TOT
			, IFNULL(MAX(CALL_IDLE), 0) CALL_IDLE
			, IFNULL(MAX(CHAT_CONSULT), 0) CHAT_CONSULT
		FROM TB_DASH_SERVICE_COUNT_HISTORY A
		WHERE
		<![CDATA[ 
			COLLECT_DATE > DATE_ADD(STR_TO_DATE(#{S_ST_DT}, '%Y%m%d'), INTERVAL -1 MONTH) 
			AND DATE_FORMAT(COLLECT_DATE, '%Y%m%d') <= #{S_ST_DT}
		]]>
		GROUP BY S_COLLECT_DATE
		ORDER BY S_COLLECT_DATE DESC
	</select>
	
	<select id="serviceVariationHistoryQry2" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT 
			DATE_FORMAT(COLLECT_DATE, '%Y-%m-%d') S_COLLECT_DATE
			, IFNULL(MAX(IPCC_TRUNK), 0) AS IPCC_TRUNK 
			, IFNULL(MAX(IPT_TRUNK), 0) AS IPT_TRUNK
			, IFNULL(MAX(IVR_SESSION), 0) AS IVR_SESSION 
		FROM
			TB_DASH_PBX_IVR_COUNT_HISTORY
		WHERE			
		<![CDATA[ 
			COLLECT_DATE > DATE_ADD(STR_TO_DATE(#{S_ST_DT}, '%Y%m%d'), INTERVAL -1 MONTH) 
			AND DATE_FORMAT(COLLECT_DATE, '%Y%m%d') <= #{S_ST_DT}
		]]>
		GROUP BY S_COLLECT_DATE
		ORDER BY S_COLLECT_DATE DESC
	</select>
	
	<select id="serviceVariationHistoryQry3" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT 
			DATE_FORMAT(COLLECT_DATE, '%Y-%m-%d') S_COLLECT_DATE
			, IFNULL(MAX(QNA), 0) AS QNA 
			, IFNULL(MAX(CUST_OFFER), 0) AS CUST_OFFER
			, IFNULL(MAX(COMPLAINT), 0) AS COMPLAINT
		FROM TB_DASH_DASHBOARD_COUNT_HISTORY 
		WHERE
		<![CDATA[ 
			COLLECT_DATE > DATE_ADD(STR_TO_DATE(#{S_ST_DT}, '%Y%m%d'), INTERVAL -1 MONTH) 
			AND DATE_FORMAT(COLLECT_DATE, '%Y%m%d') <= #{S_ST_DT}
		]]>
		GROUP BY S_COLLECT_DATE
		ORDER BY S_COLLECT_DATE DESC
	</select>
	
	<select id="serviceVariationHistoryQry4" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT 
			DATE_FORMAT(D_UPDATE_TIME, '%Y-%m-%d') S_COLLECT_DATE
			, IFNULL(MAX(JIJUM_CALLS), 0) AS JIJUM_CALLS
			, IFNULL(MAX(JIJUM_TRANS), 0) AS JIJUM_TRANS
			, IFNULL(MAX(CENTER_TRANS), 0) AS CENTER_TRANS
			, IFNULL(MAX(MAX_INQUEUE), 0) AS MAX_INQUEUE 
		FROM
			tb_dash_cms_service_count
		WHERE			
		<![CDATA[ 
			D_UPDATE_TIME > DATE_ADD(STR_TO_DATE(#{S_ST_DT}, '%Y%m%d'), INTERVAL -1 MONTH) 
			AND DATE_FORMAT(D_UPDATE_TIME, '%Y%m%d') <= #{S_ST_DT}
		]]>
		GROUP BY S_COLLECT_DATE
		ORDER BY S_COLLECT_DATE DESC
	</select>
	
	<select id="recVariationHistoryQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT
			DATE_FORMAT(COLLECT_DATE, '%Y-%m-%d') S_COLLECT_DATE 
			, IFNULL(MAX(IPCC), 0) AS IPCC
			, IFNULL(MAX(IPT), 0) AS IPT
			, IFNULL(MAX(FACE_TO_FACE), 0) AS FACE_TO_FACE
			, IFNULL(MAX(PART), 0) AS PART
			, IFNULL(MAX(TRANSFER_CHANNEL), 0) AS TRANSFER_CHANNEL 
			, IFNULL(MAX(TRANSFER_PEEK), 0) AS TRANSFER_PEEK
	 		, IFNULL(MAX(TRANSFER_CALL), 0) AS TRANSFER_CALL
			, IFNULL(MAX(HOTLINE), 0) AS HOTLINE
			, IFNULL(MAX(SCREEN), 0) AS SCREEN
		FROM TB_HTTP_RECORD_COUNT_HISTORY 
		WHERE
		<![CDATA[ 
			COLLECT_DATE > DATE_ADD(STR_TO_DATE(#{S_ST_DT}, '%Y%m%d'), INTERVAL -1 MONTH) 
			AND DATE_FORMAT(COLLECT_DATE, '%Y%m%d') <= #{S_ST_DT}
		]]>
		GROUP BY S_COLLECT_DATE
		ORDER BY S_COLLECT_DATE DESC
	</select>
	
	<select id="serviceVariationAllHistoryQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT A.S_COLLECT_DATE
			, MAX(CALL_TOTAL) CALL_TOTAL
			, MAX(IN_TOTAL) IN_TOTAL
			, MAX(EST_TOTAL) EST_TOTAL
			, MAX(ANS_RATE) ANS_RATE
			, MAX(CALL_ABANDON) CALL_ABANDON
			, MAX(CUSTWAIT_MAX) CUSTWAIT_MAX
			, MAX(CHAT_TOTAL) CHAT_TOTAL
			, MAX(VARS_TOTAL) VARS_TOTAL
			, MAX(AP_TOTAL) AP_TOTAL
			, MAX(AP_INVOKE_TOTAL) AP_INVOKE_TOTAL
			, MAX(AP_INQUIRY_TOTAL) AP_INQUIRY_TOTAL
			, MAX(IP_INQUIRY_TOTAL) IP_INQUIRY_TOTAL
			, MAX(CENTER_TOT) CENTER_TOT
			, MAX(BRANCH_TOT) BRANCH_TOT
			, MAX(ARS_TOT) ARS_TOT
			, MAX(CHAT_TOT) CHAT_TOT
			, MAX(CALL_IDLE) CALL_IDLE
			, MAX(CHAT_CONSULT) CHAT_CONSULT
			, MAX(IPCC_TRUNK) IPCC_TRUNK
			, MAX(IPT_TRUNK) IPT_TRUNK
			, MAX(IVR_SESSION) IVR_SESSION
			, MAX(QNA) QNA
			, MAX(CUST_OFFER) CUST_OFFER
			, MAX(COMPLAINT) COMPLAINT
			, MAX(JIJUM_CALLS) AS JIJUM_CALLS
			, MAX(JIJUM_TRANS) JIJUM_TRANS
			, MAX(CENTER_TRANS) CENTER_TRANS
			, MAX(MAX_INQUEUE) MAX_INQUEUE
		FROM (
			SELECT 
				DATE_FORMAT(COLLECT_DATE, '%Y-%m-%d') S_COLLECT_DATE
				, IFNULL(MAX(CALL_TOTAL), 0) CALL_TOTAL
				, IFNULL(MAX(IN_TOTAL), 0) IN_TOTAL
				, IFNULL(MAX(EST_TOTAL), 0) EST_TOTAL
				, IFNULL(MAX(ANS_RATE), 0) ANS_RATE
				, IFNULL(MAX(CALL_ABANDON), 0) CALL_ABANDON
				, IFNULL(MAX(CUSTWAIT_MAX), 0) CUSTWAIT_MAX
				, IFNULL(MAX(CHAT_TOTAL), 0) CHAT_TOTAL
				, IFNULL(MAX(VARS_TOTAL), 0) VARS_TOTAL
				, IFNULL(MAX(AP_INVOKE_TOTAL), 0) + IFNULL(MAX(AP_INQUIRY_TOTAL), 0) AP_TOTAL
				, IFNULL(MAX(AP_INVOKE_TOTAL), 0) AP_INVOKE_TOTAL
				, IFNULL(MAX(AP_INQUIRY_TOTAL), 0) AP_INQUIRY_TOTAL
				, IFNULL(MAX(IP_INQUIRY_TOTAL), 0) IP_INQUIRY_TOTAL
				, IFNULL(MAX(CENTER_TOT), 0) CENTER_TOT
				, IFNULL(MAX(BRANCH_TOT), 0) BRANCH_TOT
				, IFNULL(MAX(ARS_TOT), 0) ARS_TOT
				, IFNULL(MAX(CHAT_TOT), 0) CHAT_TOT
				, IFNULL(MAX(CALL_IDLE), 0) CALL_IDLE
				, IFNULL(MAX(CHAT_CONSULT), 0) CHAT_CONSULT
			FROM TB_DASH_SERVICE_COUNT_HISTORY A
			WHERE
			<![CDATA[ 
				COLLECT_DATE > DATE_ADD(STR_TO_DATE(#{S_ST_DT}, '%Y%m%d'), INTERVAL -1 MONTH) 
				AND DATE_FORMAT(COLLECT_DATE, '%Y%m%d') <= #{S_ST_DT}
			]]>
			GROUP BY S_COLLECT_DATE
		) A LEFT OUTER JOIN (		
			SELECT 
				DATE_FORMAT(COLLECT_DATE, '%Y-%m-%d') S_COLLECT_DATE
				, IFNULL(MAX(IPCC_TRUNK), 0) AS IPCC_TRUNK 
				, IFNULL(MAX(IPT_TRUNK), 0) AS IPT_TRUNK
				, IFNULL(MAX(IVR_SESSION), 0) AS IVR_SESSION 
			FROM
				TB_DASH_PBX_IVR_COUNT_HISTORY
			WHERE			
			<![CDATA[ 
				COLLECT_DATE > DATE_ADD(STR_TO_DATE(#{S_ST_DT}, '%Y%m%d'), INTERVAL -1 MONTH) 
				AND DATE_FORMAT(COLLECT_DATE, '%Y%m%d') <= #{S_ST_DT}
			]]>
			GROUP BY S_COLLECT_DATE
			ORDER BY S_COLLECT_DATE 
		) B
		ON A.S_COLLECT_DATE = B.S_COLLECT_DATE
		LEFT OUTER JOIN 
		(
			SELECT 
				DATE_FORMAT(COLLECT_DATE, '%Y-%m-%d') S_COLLECT_DATE
				, IFNULL(MAX(QNA), 0) AS QNA 
				, IFNULL(MAX(CUST_OFFER), 0) AS CUST_OFFER
				, IFNULL(MAX(COMPLAINT), 0) AS COMPLAINT
			FROM TB_DASH_DASHBOARD_COUNT_HISTORY
			WHERE
			<![CDATA[ 
				COLLECT_DATE > DATE_ADD(STR_TO_DATE(#{S_ST_DT}, '%Y%m%d'), INTERVAL -1 MONTH) 
				AND DATE_FORMAT(COLLECT_DATE, '%Y%m%d') <= #{S_ST_DT}
			]]>
			GROUP BY S_COLLECT_DATE
			ORDER BY S_COLLECT_DATE 
		) C 
		ON A.S_COLLECT_DATE = C.S_COLLECT_DATE
		LEFT OUTER JOIN 
		(	
			SELECT 
				DATE_FORMAT(D_UPDATE_TIME, '%Y-%m-%d') S_COLLECT_DATE
				, IFNULL(MAX(JIJUM_CALLS), 0) AS JIJUM_CALLS 
				, IFNULL(MAX(JIJUM_TRANS), 0) AS JIJUM_TRANS 
				, IFNULL(MAX(CENTER_TRANS), 0) AS CENTER_TRANS 
				, IFNULL(MAX(MAX_INQUEUE), 0) AS MAX_INQUEUE 
			FROM
				tb_dash_cms_service_count
			WHERE			 
			<![CDATA[ 
				D_UPDATE_TIME > DATE_ADD(STR_TO_DATE(#{S_ST_DT}, '%Y%m%d'), INTERVAL -1 MONTH) 
				AND DATE_FORMAT(D_UPDATE_TIME, '%Y%m%d') <= #{S_ST_DT}
			]]>
			GROUP BY S_COLLECT_DATE
			ORDER BY S_COLLECT_DATE 
		) D
		ON A.S_COLLECT_DATE = D.S_COLLECT_DATE
		GROUP BY S_COLLECT_DATE
		ORDER BY S_COLLECT_DATE DESC
	</select>

	<!-- 콜이력 -->
	<select id="statsCallHistoryRetrieveDayQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT /* history_stats.statsCallHistoryRetrieveQry */
			TT.*
			, DATE_FORMAT(N_DAY, '%Y-%m-%d') S_DATE
			, TT.BONSA_IN_COUNT + TT.BONSA_OUT_COUNT AS BONSA_TOTAL
			, TT.CCENTER_IN_COUNT + TT.CCENTER_OUT_COUNT AS CCENTER_TOTAL
			, TT.JIJUM_IN_COUNT + TT.JIJUM_OUT_COUNT AS JIJUM_TOTAL
		FROM (
			SELECT
				  N_DAY
				, SUM(CASE WHEN N_CLUSTER = 0 THEN N_INBOUND  ELSE 0 END) AS BONSA_IN_COUNT
				, SUM(CASE WHEN N_CLUSTER = 1 THEN N_INBOUND  ELSE 0 END) AS CCENTER_IN_COUNT
				, SUM(CASE WHEN N_CLUSTER = 2 THEN N_INBOUND  ELSE 0 END) AS JIJUM_IN_COUNT
				, SUM(CASE WHEN N_CLUSTER = 0 THEN N_OUTBOUND ELSE 0 END) AS BONSA_OUT_COUNT
				, SUM(CASE WHEN N_CLUSTER = 1 THEN N_OUTBOUND ELSE 0 END) AS CCENTER_OUT_COUNT
				, SUM(CASE WHEN N_CLUSTER = 2 THEN N_OUTBOUND ELSE 0 END) AS JIJUM_OUT_COUNT
			FROM
				TB_TAPI_CALL_ACCRUE
			WHERE
				N_DAY BETWEEN #{S_ST_DT} AND #{S_ED_DT}
				<if test="N_CLUSTER != null and N_CLUSTER != ''">
					AND N_CLUSTER = #{N_CLUSTER}
				</if>
			GROUP BY N_DAY
		) TT
	</select>
	
	<select id="statsCallHistoryRetrieveMonthQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT /* history_stats.statsCallHistoryRetrieveMonthQry */
			TT.*
			, DATE_FORMAT(CONCAT(TT.N_DAY,'01'), '%Y-%m') S_DATE
			, TT.BONSA_IN_COUNT + TT.BONSA_OUT_COUNT AS BONSA_TOTAL
			, TT.CCENTER_IN_COUNT + TT.CCENTER_OUT_COUNT AS CCENTER_TOTAL
			, TT.JIJUM_IN_COUNT + TT.JIJUM_OUT_COUNT AS JIJUM_TOTAL
		FROM (
			SELECT
				  SUBSTRING(N_DAY, 1, 6) AS N_DAY
				, SUM(CASE WHEN N_CLUSTER = 0 THEN N_INBOUND  ELSE 0 END) AS BONSA_IN_COUNT
				, SUM(CASE WHEN N_CLUSTER = 1 THEN N_INBOUND  ELSE 0 END) AS CCENTER_IN_COUNT
				, SUM(CASE WHEN N_CLUSTER = 2 THEN N_INBOUND  ELSE 0 END) AS JIJUM_IN_COUNT
				, SUM(CASE WHEN N_CLUSTER = 0 THEN N_OUTBOUND ELSE 0 END) AS BONSA_OUT_COUNT
				, SUM(CASE WHEN N_CLUSTER = 1 THEN N_OUTBOUND ELSE 0 END) AS CCENTER_OUT_COUNT
				, SUM(CASE WHEN N_CLUSTER = 2 THEN N_OUTBOUND ELSE 0 END) AS JIJUM_OUT_COUNT
			FROM
				TB_TAPI_CALL_ACCRUE
			WHERE
				SUBSTRING(N_DAY, 1, 6) BETWEEN SUBSTRING(#{S_ST_DT}, 1, 6) AND SUBSTRING(#{S_ED_DT}, 1, 6)
				<if test="N_CLUSTER != null and N_CLUSTER != ''">
					AND N_CLUSTER = #{N_CLUSTER}
				</if>
			GROUP BY SUBSTRING(N_DAY, 1, 6)
		) TT
	</select>
	
	
	<!-- 일일보고서 서버정보 -->
	<select id="DayReportServerRetrieveListQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		/* history_stats.DayReportServerRetrieveListQry */
		WITH A AS (
		SELECT * 
 		FROM (
                    <foreach collection="tableList" item="table" separator="UNION ALL">
                      SELECT * FROM ${table} A
                    </foreach>
                ) C
		<where>
			<choose>
				<when test="R_TYPE == 1 ">
				   date_format(D_INS_DATE, '%Y%m%d') BETWEEN date_format(STR_TO_DATE(#{T_ST_DT}, '%Y-%m-%d'), '%Y%m%d') AND date_format(STR_TO_DATE(#{T_ED_DT}, '%Y-%m-%d'), '%Y%m%d')
				</when>
<!-- 			<when test="R_TYPE == '2' ">
				   AND date_format(D_INS_DATE, '%Y%m%d') = date_format(D_INS_DATE, '%Y%m%d') 
				</when> -->
				<otherwise>
				 	date_format(D_INS_DATE, '%Y%m%d') = date_format(STR_TO_DATE(#{S_ST_DT}, '%Y-%m-%d'), '%Y%m%d')
				</otherwise>
			</choose>
		</where>
		)
		, P AS (
			SELECT S_MAP_KEY
		            , N_MON_ID
		            , AVG(N_PER_USE) AS AVG_USE 
	 		FROM (
	                    <foreach collection="preTableList" item="table" separator="UNION ALL">
	                      SELECT * FROM ${table} A
	                    </foreach>
	                ) C
			<where>
				<choose>
					<when test="R_TYPE == 1 ">
					  AND date_format(D_INS_DATE, '%Y%m%d') BETWEEN date_format(STR_TO_DATE(#{P_ST_DT}, '%Y-%m-%d'), '%Y%m%d') AND date_format(STR_TO_DATE(#{P_ED_DT}, '%Y-%m-%d'), '%Y%m%d')
					</when>
<!-- 				<when test="R_TYPE == 2 ">
					 AND date_format(D_INS_DATE, '%Y%m%d') = date_format(D_INS_DATE, '%Y%m%d')
					</when> -->
					<otherwise>
						AND date_format(D_INS_DATE, '%Y%m%d') = date_format(STR_TO_DATE(#{PRE_DT}, '%Y-%m-%d'), '%Y%m%d')
					</otherwise>
				</choose>
			</where>
			GROUP BY S_MAP_KEY, N_MON_ID
		)
		,Q AS (SELECT S_MAP_KEY
		            , N_MON_ID
		            , AVG(N_PER_USE) AS AVG_USE
		            , MAX(N_PER_USE) AS MAX_USE
		            , D_INS_DATE 
		            FROM A
		            GROUP BY S_MAP_KEY, N_MON_ID )
		            
		SELECT Z.*
		        , (Z.N_AVG_USE - Z.PRE_AVG_USE) AS INCREASE
		FROM (        
		SELECT ROW_NUMBER() OVER (ORDER BY N_MON_ID, S_MAP_KEY) NUM
				, B.S_MON_NAME -- 장비명
				, B.S_MON_IP -- 장비 IP 
				, CASE IFNULL(C.S_MON_NAME, 'CPU') when '' THEN 'CPU' ELSE IFNULL(C.S_MON_NAME, 'CPU') END AS  S_MAP_NAME -- 자원명 
				, D.S_GROUP_NAME -- 그룹 명  
				, E.S_TYPE_NAME -- 구분 명 
				, IFNULL( (SELECT N_PER_USE FROM A z WHERE z.S_MAP_KEY=Q.S_MAP_KEY AND z.N_MON_ID = Q.N_MON_ID ORDER BY Q.D_INS_DATE DESC LIMIT 1),0) AS N_CUR_USE -- 현재 
				, ROUND(IFNULL(Q.AVG_USE,0), 2) AS N_AVG_USE -- 평균 		 
				, IFNULL(Q.MAX_USE,0) AS N_MAX_USE -- 피크
				, date_format(Q.D_INS_DATE, '%Y-%m-%d %H:%i:%s') AS D_MAX_DATE -- 피크데이
				, Q.S_MAP_KEY
				, Q.N_MON_ID
				, ROUND(IFNULL(P.AVG_USE,0), 2) AS PRE_AVG_USE -- 전평균
				, COUNT(*) OVER () AS TOTAL_COUNT
		FROM Q
		LEFT JOIN TB_MON_INFO B ON Q.N_MON_ID = B.N_MON_ID
		LEFT JOIN TB_MON_MAP C ON Q.S_MAP_KEY = C.S_MAP_KEY AND Q.N_MON_ID = C.N_MON_ID
		LEFT JOIN TB_SVR_GROUP D ON B.N_GROUP_CODE = D.N_GROUP_CODE
		LEFT JOIN TB_SVR_TYPE E ON B.N_TYPE_CODE = E.N_TYPE_CODE
		LEFT JOIN P ON Q.S_MAP_KEY = P.S_MAP_KEY AND Q.N_MON_ID = P.N_MON_ID
		) Z
		
		<if test="excelYn != null and excelYn != '' and excelYn == 'no'">
			LIMIT #{firstRecordIndex}, #{lastRecordIndex}
		</if>
		<!--  SELECT /* history_stats.statsErrorHistoryRetrieveQry */ * FROM (
			SELECT ROW_NUMBER() OVER (ORDER BY N_MON_ID, S_MAP_KEY) NUM,
				COUNT(*) OVER () AS TOTAL_COUNT,
				S_MON_NAME, S_MON_IP, S_MAP_NAME, N_CUR_USE, N_AVG_USE, N_MAX_USE, D_MAX_DATE 
			FROM (
					SELECT 
						A.N_MON_ID, A.S_MAP_KEY, C.S_MON_NAME, C.S_MON_IP, B.S_MON_NAME AS S_MAP_NAME,
					(SELECT N_PER_USE FROM ${S_TABLE} WHERE N_MON_ID = A.N_MON_ID AND S_MAP_KEY = A.S_MAP_KEY AND DATEDIFF(D_INS_DATE, STR_TO_DATE(CONCAT(#{S_ST_DT}, ' 00:00:00'), '%Y-%m-%d %H:%i:%s')) = 0 ORDER BY D_INS_DATE DESC LIMIT 1) AS N_CUR_USE,	
						ROUND(AVG(N_PER_USE), 2) AS N_AVG_USE, 
						MAX(N_PER_USE) AS N_MAX_USE, 
						(SELECT DATE_FORMAT(D_INS_DATE, '%Y-%m-%d %H:%i:%s') AS D_INS_DATE FROM ${S_TABLE} WHERE N_MON_ID = A.N_MON_ID AND S_MAP_KEY = A.S_MAP_KEY AND DATEDIFF(D_INS_DATE, STR_TO_DATE(CONCAT(#{S_ST_DT}, ' 00:00:00'), '%Y-%m-%d %H:%i:%s')) = 0 ORDER BY N_PER_USE DESC LIMIT 1) AS D_MAX_DATE
					FROM 
					(SELECT * FROM ${S_TABLE} WHERE DATEDIFF(D_INS_DATE, STR_TO_DATE(CONCAT(#{S_ST_DT}, ' 00:00:00'), '%Y-%m-%d %H:%i:%s')) = 0) A
					, (SELECT N_MON_ID, S_MAP_KEY, CASE S_MON_NAME WHEN LENGTH(S_MON_NAME) > 0 THEN 'CPU' ELSE S_MON_NAME END AS S_MON_NAME FROM TB_MON_MAP) B
					, TB_MON_INFO C
					WHERE B.N_MON_ID = A.N_MON_ID AND B.S_MAP_KEY = A.S_MAP_KEY AND C.N_MON_ID = A.N_MON_ID
					GROUP BY A.N_MON_ID, A.S_MAP_KEY, B.S_MON_NAME, C.S_MON_NAME, C.S_MON_IP
				)	 T
			ORDER BY NUM 
			) X 
		WHERE
			num BETWEEN #{firstRecordIndex} + 1 AND #{lastRecordIndex}  -->
			
	</select>

	<!-- 일일보고서 서버정보 -->
	<select id="DayReportHistoryServerQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT /* history_stats.statsErrorHistoryRetrieveQry */ * FROM (
			SELECT ROW_NUMBER() OVER (ORDER BY N_MON_ID, S_MAP_KEY) NUM,
				COUNT(*) OVER () AS TOTAL_COUNT,
				S_MON_NAME, S_MON_IP, S_MAP_NAME, N_CUR_USE, N_AVG_USE, N_MAX_USE, D_MAX_DATE 
				FROM (
				SELECT 
     				A.N_MON_ID, A.S_MAP_KEY, C.S_MON_NAME, C.S_MON_IP, B.S_MON_NAME AS S_MAP_NAME,
					(SELECT N_PER_USE FROM ${S_TABLE} WHERE N_MON_ID = A.N_MON_ID AND S_MAP_KEY = A.S_MAP_KEY AND DATEDIFF(D_INS_DATE, STR_TO_DATE(CONCAT(#{S_ST_DT}, ' 00:00:00'), '%Y-%m-%d %H:%i:%s')) = 0 ORDER BY D_INS_DATE DESC LIMIT 1) AS N_CUR_USE,	
					ROUND(AVG(N_PER_USE), 2) AS N_AVG_USE, 
					MAX(N_PER_USE) AS N_MAX_USE, 
					(SELECT DATE_FORMAT(D_INS_DATE, '%Y-%m-%d %H:%i:%s') AS D_INS_DATE FROM ${S_TABLE} WHERE N_MON_ID = A.N_MON_ID AND S_MAP_KEY = A.S_MAP_KEY AND DATEDIFF(D_INS_DATE, STR_TO_DATE(CONCAT(#{S_ST_DT}, ' 00:00:00'), '%Y-%m-%d %H:%i:%s')) = 0 ORDER BY N_PER_USE DESC LIMIT 1) AS D_MAX_DATE
				FROM 
				(SELECT * FROM ${S_TABLE} WHERE DATEDIFF(D_INS_DATE, STR_TO_DATE(CONCAT(#{S_ST_DT}, ' 00:00:00'), '%Y-%m-%d %H:%i:%s')) = 0) A
				, (SELECT N_MON_ID, S_MAP_KEY, CASE S_MON_NAME WHEN LENGTH(S_MON_NAME) > 0 THEN 'CPU' ELSE S_MON_NAME END AS S_MON_NAME FROM TB_MON_MAP) B
				, TB_MON_INFO C
				WHERE B.N_MON_ID = A.N_MON_ID AND B.S_MAP_KEY = A.S_MAP_KEY AND C.N_MON_ID = A.N_MON_ID
				GROUP BY A.N_MON_ID, A.S_MAP_KEY, B.S_MON_NAME, C.S_MON_NAME, C.S_MON_IP
			) T
			ORDER BY NUM 
		) X
	</select>
	
	<!-- 일일보고서 장애이력 -->
	<select id="DayReportErrorRetrieveListQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT /* history_stats.statsErrorHistoryRetrieveQry */ * FROM (
    		SELECT
    				ROW_NUMBER() OVER (ORDER BY D_UPDATE_TIME DESC) NUM,
					COUNT(*) OVER () AS TOTAL_COUNT
    				, S_ALM_KEY, D_UPDATE_TIME, N_ALM_STATUS, N_ALM_RATING, S_USER_ID, S_PROCESS, S_MSG
					, N_ALM_STATUS_NAME, S_MON_NAME, S_USER_NAME, S_ALM_RATING_NAME, S_MON_IP
    		FROM
					(
						SELECT
								S_ALM_KEY, DATE_FORMAT(D_UPDATE_TIME, '%Y-%m-%d %H:%i-%s') D_UPDATE_TIME, N_ALM_STATUS, N_ALM_RATING, S_USER_ID, S_PROCESS
								, (SELECT S_MON_NAME FROM TB_MON_INFO WHERE N_MON_ID = A.N_MON_ID) S_MON_NAME
								, (SELECT S_MON_IP FROM TB_MON_INFO WHERE N_MON_ID = A.N_MON_ID) S_MON_IP
								, (SELECT S_ALM_STATUS_NAME FROM TB_ALM_STATUS_CODE WHERE N_ALM_STATUS = A.N_ALM_STATUS) N_ALM_STATUS_NAME
								, (SELECT S_USER_NAME FROM TB_USER_INFO WHERE S_USER_ID = A.S_USER_ID) S_USER_NAME
								, (SELECT S_ALM_RATING_NAME FROM TB_ALM_RATING_CODE WHERE N_ALM_RATING = A.N_ALM_RATING) S_ALM_RATING_NAME
								, CONCAT((SELECT S_ALM_MSG FROM TB_ALM_CODE WHERE N_ALM_TYPE = A.N_ALM_TYPE AND N_ALM_CODE = A.N_ALM_CODE) ,F_ALM_SUB_MSG(A.N_MON_ID, A.N_ALM_TYPE, A.N_ALM_CODE, A.N_ALM_STATUS, S_MSG)) AS S_MSG
						FROM
								(SELECT AL.N_MON_ID, AL.S_ALM_KEY, HIS.N_ALM_STATUS, AL.N_ALM_TYPE, AL.N_ALM_CODE, HIS.S_USER_ID, HIS.N_ALM_RATING, HIS.D_UPDATE_TIME, HIS.S_PROCESS, HIS.S_MSG FROM TB_ALM AL, TB_ALM_HISTORY HIS WHERE AL.N_MON_ID = HIS.N_MON_ID AND  AL.N_MON_ID IN (SELECT N_MON_ID FROM TB_USER_MON_LIST WHERE S_USER_ID = #{SESSION_USER_ID})) A
						<!--
						WHERE D_UPDATE_TIME BETWEEN STR_TO_DATE(CONCAT(#{S_ST_DT}, ' 00:00:00'), '%Y-%m-%d %H:%i:%s') AND STR_TO_DATE(CONCAT(#{S_ST_DT}, ' 23:59:59'), '%Y-%m-%d %H:%i:%s')
						-->
				<where>
					<choose>
						<when test="R_TYPE == 1 ">
						  date_format(D_UPDATE_TIME, '%Y%m%d') BETWEEN date_format(STR_TO_DATE(#{T_ST_DT}, '%Y-%m-%d'), '%Y%m%d') AND date_format(STR_TO_DATE(#{T_ED_DT}, '%Y-%m-%d'), '%Y%m%d')
						</when>
	<!-- 				<when test="R_TYPE == 2 ">
						 AND date_format(D_INS_DATE, '%Y%m%d') = date_format(D_INS_DATE, '%Y%m%d')
						</when> -->
						<otherwise>
						  date_format(D_UPDATE_TIME, '%Y%m%d') = date_format(STR_TO_DATE(#{S_ST_DT}, '%Y-%m-%d'), '%Y%m%d')
						</otherwise>
					</choose>
				</where>
					) A
		) X
		WHERE num BETWEEN #{firstRecordIndex} + 1 AND #{lastRecordIndex}
	</select>

	<!-- 일일보고서 장애이력 -->
	<select id="DayReportHistoryErrorQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT /* history_stats.statsErrorHistoryRetrieveQry */ * FROM (
    		SELECT
    				ROW_NUMBER() OVER (ORDER BY D_UPDATE_TIME DESC) NUM,
					COUNT(*) OVER () AS TOTAL_COUNT
    				, S_ALM_KEY, D_UPDATE_TIME, N_ALM_STATUS, N_ALM_RATING, S_USER_ID, S_PROCESS, S_MSG
					, N_ALM_STATUS_NAME, S_MON_NAME, S_USER_NAME, S_ALM_RATING_NAME, S_MON_IP
    		FROM
					(
						SELECT
								S_ALM_KEY, DATE_FORMAT(D_UPDATE_TIME, '%Y-%m-%d %H:%i-%s') D_UPDATE_TIME, N_ALM_STATUS, N_ALM_RATING, S_USER_ID, S_PROCESS
								, (SELECT S_MON_NAME FROM TB_MON_INFO WHERE N_MON_ID = A.N_MON_ID) S_MON_NAME
								, (SELECT S_MON_IP FROM TB_MON_INFO WHERE N_MON_ID = A.N_MON_ID) S_MON_IP
								, (SELECT S_ALM_STATUS_NAME FROM TB_ALM_STATUS_CODE WHERE N_ALM_STATUS = A.N_ALM_STATUS) N_ALM_STATUS_NAME
								, (SELECT S_USER_NAME FROM TB_USER_INFO WHERE S_USER_ID = A.S_USER_ID) S_USER_NAME
								, (SELECT S_ALM_RATING_NAME FROM TB_ALM_RATING_CODE WHERE N_ALM_RATING = A.N_ALM_RATING) S_ALM_RATING_NAME
								, CONCAT((SELECT S_ALM_MSG FROM TB_ALM_CODE WHERE N_ALM_TYPE = A.N_ALM_TYPE AND N_ALM_CODE = A.N_ALM_CODE) ,F_ALM_SUB_MSG(A.N_MON_ID, A.N_ALM_TYPE, A.N_ALM_CODE, A.N_ALM_STATUS, S_MSG)) AS S_MSG
						FROM
								(
								SELECT AL.N_MON_ID, AL.S_ALM_KEY, HIS.N_ALM_STATUS, AL.N_ALM_TYPE, AL.N_ALM_CODE, HIS.S_USER_ID, HIS.N_ALM_RATING, HIS.D_UPDATE_TIME, HIS.S_PROCESS, HIS.S_MSG 
								FROM TB_ALM AL, TB_ALM_HISTORY HIS 
								WHERE AL.N_MON_ID = HIS.N_MON_ID
								<if test="SESSION_USER_ID != null and SESSION_USER_ID != '' ">
								AND AL.N_MON_ID IN (SELECT N_MON_ID 
																FROM TB_USER_MON_LIST 
																WHERE S_USER_ID = #{SESSION_USER_ID})
								</if>
								) A
					<!--								
						WHERE
								D_UPDATE_TIME BETWEEN STR_TO_DATE(CONCAT(#{S_ST_DT}, ' 00:00:00'), '%Y-%m-%d %H:%i:%s') AND STR_TO_DATE(CONCAT(#{S_ST_DT}, ' 23:59:59'), '%Y-%m-%d %H:%i:%s')
  					-->		
					<where>
						<choose>
							<when test="R_TYPE == 1 ">
							  date_format(D_UPDATE_TIME, '%Y%m%d') BETWEEN date_format(STR_TO_DATE(#{T_ST_DT}, '%Y-%m-%d'), '%Y%m%d') AND date_format(STR_TO_DATE(#{T_ED_DT}, '%Y-%m-%d'), '%Y%m%d')
							</when>
		<!-- 				<when test="R_TYPE == 2 ">
							 AND date_format(D_INS_DATE, '%Y%m%d') = date_format(D_INS_DATE, '%Y%m%d')
							</when> -->
							<otherwise>
							  date_format(D_UPDATE_TIME, '%Y%m%d') = date_format(STR_TO_DATE(#{S_ST_DT}, '%Y-%m-%d'), '%Y%m%d')
							</otherwise>
						</choose>
					</where>
					) A
		) X
	</select>
	
	<!-- 일일보고서 콜통계 -->
	<select id="DayReportCallRetrieveListQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT * FROM (
			SELECT
				COUNT(*) OVER () AS TOTAL_COUNT
				, ROW_NUMBER() OVER (ORDER BY ORG_NM ASC) NUM
				, ORG_NM as BRANCH_NAME
				, NVL(CALL_COUNT_OUTBOUND,0) as OUTBOUND
				, NVL(CALL_COUNT_INBOUND,0) as INBOUND
			FROM
			(
				SELECT  ORG_NM, CALL_COUNT_OUTBOUND, CALL_COUNT_INBOUND
				FROM TB_ORG_INFO AA
					LEFT OUTER JOIN (SELECT BRANCH_CODE, CALL_COUNT AS CALL_COUNT_OUTBOUND FROM TB_CDR_ACCRUE_DAILY A WHERE CDR_DATE=#{S_ST_DT} AND N_TYPE='2') OUTBOUND
					ON AA.ORG_ID=OUTBOUND.BRANCH_CODE
					LEFT OUTER JOIN (SELECT BRANCH_CODE, CALL_COUNT AS CALL_COUNT_INBOUND FROM TB_CDR_ACCRUE_DAILY A WHERE CDR_DATE=#{S_ST_DT} AND N_TYPE='3') INBOUND
					ON AA.ORG_ID=INBOUND.BRANCH_CODE
			) A
			WHERE (CALL_COUNT_OUTBOUND != 0 OR CALL_COUNT_INBOUND != 0)
		) X 
		WHERE
			num BETWEEN #{firstRecordIndex} + 1 AND #{lastRecordIndex}
	</select>

	<!-- 일일보고서 콜통계 -->
	<select id="DayReportHistoryCallQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT * FROM (
			SELECT
				COUNT(*) OVER () AS TOTAL_COUNT
				, ROW_NUMBER() OVER (ORDER BY ORG_NM ASC) NUM
				, ORG_NM as BRANCH_NAME
				, NVL(CALL_COUNT_OUTBOUND,0) as OUTBOUND
				, NVL(CALL_COUNT_INBOUND,0) as INBOUND
			FROM
			(
				SELECT  ORG_NM, CALL_COUNT_OUTBOUND, CALL_COUNT_INBOUND
				FROM TB_ORG_INFO AA
					LEFT OUTER JOIN (SELECT BRANCH_CODE, CALL_COUNT AS CALL_COUNT_OUTBOUND FROM TB_CDR_ACCRUE_DAILY A WHERE CDR_DATE=#{S_ST_DT} AND N_TYPE='2') OUTBOUND
					ON AA.ORG_ID=OUTBOUND.BRANCH_CODE
					LEFT OUTER JOIN (SELECT BRANCH_CODE, CALL_COUNT AS CALL_COUNT_INBOUND FROM TB_CDR_ACCRUE_DAILY A WHERE CDR_DATE=#{S_ST_DT} AND N_TYPE='3') INBOUND
					ON AA.ORG_ID=INBOUND.BRANCH_CODE
			) A
		) X
		WHERE (CALL_COUNT_OUTBOUND != 0 OR CALL_COUNT_INBOUND != 0)
	</select>
	
	
	   <select id="IpphoneStatusListQry" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		SELECT COUNT(*) OVER () AS TOTAL_COUNT
			, MON_ID
			, NAME
			, MODEL
			, STATUS
			, STATUSREASON
			, PROTOCOL
			, DESCRIPTION
			, IPADDRESS1
			, DIRECTNUM1
			, LINESTATUS1
			, DIRECTNUM2
			, LINESTATUS2
			, IPADDTYPE1
			, IPATTRIBUTE1
			, IPADDRESS2
			, IPADDTYPE2
			, IPATTRIBUTE2
			, COLLECT_DATE
	    FROM tb_http_ipphone_info
	   <where>
	   		1 = 1
	   <choose>
		   	<when test="phone_state !='Registered' ">AND STATUS != 'Registered'</when>
		   	<otherwise>AND STATUS = 'Registered'</otherwise>
	   </choose>
		<if test="ip_address != '' and ip_address != null"> AND IPADDRESS1 LIKE CONCAT('%', #{ip_address}, '%') </if>
		<if test="search_phone != '' and search_phone != null"> AND DIRECTNUM1 LIKE CONCAT('%', #{search_phone}, '%') </if>
	   </where>
	   ORDER BY NAME, DIRECTNUM1
	   <if test="excelYn != null and excelYn != '' and excelYn == 'no'">
			LIMIT #{firstRecordIndex}, #{lastRecordIndex}
		</if>
	    
    </select>
    
</mapper>