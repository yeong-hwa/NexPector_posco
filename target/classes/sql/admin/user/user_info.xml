<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="user_info">

	<sql id="SQL_OderBy">
		<foreach collection="sort" item="s" separator=",">
			${s.field} ${s.dir}
		</foreach>
	</sql>

	<select id="select_list" resultType="hashmap" parameterType="hashmap">
		SELECT /* user_info.select_list */
			@NUM AS TOTAL_COUNT, X.*
		FROM (
			SELECT
				@NUM := @NUM + 1 NUM
				, S_USER_ID AS KEY_COL, S_USER_ID, S_USER_NAME, S_USER_EMAIL, N_GROUP_CODE
				, (SELECT S_GROUP_NAME FROM TB_SVR_GROUP WHERE N_GROUP_CODE = A.N_GROUP_CODE AND F_USE = 'Y') GROUP_NAME
				, N_PER_CODE, (SELECT S_PER_NAME FROM TB_USER_PERMISSION WHERE N_PER_CODE = A.N_PER_CODE) PER_NAME
				, F_USE
				, DATE_FORMAT(D_IN_DATE, '%Y-%m-%d %H:%i:%s') AS D_IN_DATE, DATE_FORMAT(D_UP_DATE, '%Y-%m-%d %H:%i:%s') AS D_UP_DATE
				, CONCAT((SELECT IFNULL(COL1, ' ') FROM TB_USER_ALM_SEND_INFO WHERE S_USER_ID = A.S_USER_ID LIMIT 1), (SELECT CASE WHEN COUNT(*) > 1 THEN CONCAT('외', COUNT(*) - 1, ' 건') ELSE '' END FROM TB_USER_ALM_SEND_INFO WHERE S_USER_ID = A.S_USER_ID) ) S_SMS_NO
				, CASE
					WHEN (SELECT CAST(S_VALUE AS UNSIGNED) FROM TB_USER_PW_RULE_DEFAULT WHERE N_IDX = 102) &lt;= N_LOGIN_FAIL_CNT THEN 'Y'
					ELSE 'N'
					END AS ID_LOCK
				, S_ACCESS_IP
		  	FROM TB_USER_INFO A, (SELECT @NUM := 0) R
			<where>
				<if test="S_USER_ID != '' and S_USER_ID != null">
					AND S_USER_ID LIKE CONCAT('%', #{S_USER_ID}, '%')
				</if>
				<if test="S_USER_NAME != '' and S_USER_NAME != null">
					AND S_USER_NAME LIKE CONCAT('%', #{S_USER_NAME}, '%')
				</if>
			</where>
			ORDER BY
			<if test="sort == null">D_UP_DATE</if>
			<if test="sort != null">
				<choose>
					<when test="sort.size() == 0">
						D_UP_DATE
					</when>
					<otherwise>
						<include refid="SQL_OderBy"/>
					</otherwise>
				</choose>
			</if>
		) X
		LIMIT #{firstRecordIndex}, #{lastRecordIndex}
	</select>

	<select id="selectUsedPwdList" parameterType="java.lang.String" resultType="java.lang.String">
		SELECT S_USER_PWD FROM TB_USER_INFO WHERE S_USER_ID = #{value}
		UNION
		SELECT S_USED_PWD1 FROM TB_USER_INFO WHERE S_USER_ID = #{value}
		UNION
		SELECT S_USED_PWD2 FROM TB_USER_INFO WHERE S_USER_ID = #{value}
		UNION
		SELECT S_USED_PWD3 FROM TB_USER_INFO WHERE S_USER_ID = #{value}
	</select>

	<insert id="insert_data" parameterType="hashmap" statementType="PREPARED">
		INSERT INTO TB_USER_INFO (
			S_USER_ID
			, S_USER_NAME
			, S_USER_PWD
			<if test="N_GROUP_CODE != null and N_GROUP_CODE != ''">
				, N_GROUP_CODE
			</if>
			, N_PER_CODE
			, F_USE
			, D_IN_DATE
			, D_UP_DATE
			, D_PASSWORD_CHANGE
			<if test="S_USER_EMAIL != null and S_USER_EMAIL != ''">
				, S_USER_EMAIL
			</if>
			<if test="S_ACCESS_IP != null and S_ACCESS_IP != ''">
				, S_ACCESS_IP
			</if>
		)
  		SELECT  
			#{S_USER_ID}
			, #{S_USER_NAME}
			, #{S_USER_PWD}
			<if test="N_GROUP_CODE != null and N_GROUP_CODE != ''">
				, #{N_GROUP_CODE}
			</if>
			, 0
			, #{F_USE}
			, NOW()
			, NOW()
			, NOW()
			<if test="S_USER_EMAIL != null and S_USER_EMAIL != ''">
				, #{S_USER_EMAIL}
			</if>
			<if test="S_ACCESS_IP != null and S_ACCESS_IP != ''">
				, #{S_ACCESS_IP}
			</if>
		FROM dual
	</insert>

	<update id="update_data" parameterType="hashmap" statementType="PREPARED">
  		UPDATE
			TB_USER_INFO
  		SET
			D_UP_DATE = NOW()
			<if test="S_USER_NAME != null and S_USER_NAME != ''">
 				, S_USER_NAME = #{S_USER_NAME}
  			</if>
 			<if test="S_USER_PWD != null and S_USER_PWD != ''">
				, S_USER_PWD = #{S_USER_PWD}
				, D_PASSWORD_CHANGE = NOW()
 			</if>
  			<if test="N_GROUP_CODE != null and N_GROUP_CODE != ''">
 				, N_GROUP_CODE = #{N_GROUP_CODE}
		    </if>
			<if test="S_USER_EMAIL != null and S_USER_EMAIL != ''">
				, S_USER_EMAIL = #{S_USER_EMAIL}
			</if>
  			<if test="F_USE != null and F_USE != ''">
 				, F_USE = #{F_USE}
		    </if>
			<if test="S_ACCESS_IP != null and S_ACCESS_IP != ''">
				, S_ACCESS_IP = #{S_ACCESS_IP}
			</if>
		WHERE
			S_USER_ID = #{S_USER_ID}
	</update>

	<delete id="delete_data" parameterType="hashmap" statementType="PREPARED">
		DELETE	FROM TB_USER_INFO
		WHERE
			S_USER_ID = #{S_USER_ID}
	</delete>

	<select id="dul_chk" resultType="hashMap" parameterType="hashmap">
		SELECT
			COUNT(*) CNT
		FROM
			TB_USER_INFO
		WHERE
			S_USER_ID = #{S_USER_ID}
	</select>

	<select id="user_detail" resultType="hashmap" parameterType="hashmap">
		SELECT /* user_info.detail_info */
			S_USER_ID, S_USER_NAME, S_USER_EMAIL
			, N_GROUP_CODE, N_PER_CODE
			, F_USE, D_IN_DATE, D_UP_DATE
			, CASE
				WHEN (SELECT CONVERT(S_VALUE, SIGNED) FROM TB_USER_PW_RULE_DEFAULT WHERE N_IDX = 102) &lt;= N_LOGIN_FAIL_CNT 
				THEN 'Y'
				ELSE
					'N'
			END AS ID_LOCK
			, A.S_ACCESS_IP
		FROM TB_USER_INFO A
		WHERE S_USER_ID = #{S_USER_ID}
	</select>

	<select id="sms_list" resultType="hashmap" parameterType="hashmap">
		SELECT /* user_info.detail_info */
			S_USER_ID, CONCAT(S_SMS_NAME, ';' , COL1) AS SMS_NO
		FROM
			TB_USER_ALM_SEND_INFO
		WHERE
			S_USER_ID = #{S_USER_ID}
	</select>

	<insert id="insAgent2" parameterType="java.util.HashMap" statementType="PREPARED">
		INSERT INTO /* user_info.insAgent2 */ 
			TB_USER_ALM_SEND_INFO(S_USER_ID, S_SMS_NAME, COL1, N_INDEX)
		SELECT * FROM (
			SELECT 'xx' user_id, 'yy' sms_name, 'zz' sms_no, 0 idx FROM dual WHERE 1 = 0
			<if test="sms_list != '' and sms_list != null">
				<foreach collection="sms_list" item="data" index= "index">
					UNION SELECT #{S_USER_ID} user_id, #{data.S_SMS_NAME} sms_name, #{data.S_SMS_NO} sms_no, #{data.N_INDEX} FROM dual
				</foreach>
			</if>
		) A
	</insert>
	
	<delete id="delAgent2" parameterType="java.util.HashMap" statementType="PREPARED">
		DELETE	FROM TB_USER_ALM_SEND_INFO
		WHERE S_USER_ID = #{S_USER_ID}
	</delete>

	<update id="updAgent" parameterType="hashmap" statementType="PREPARED">
		UPDATE
			TB_USER_INFO
		SET
			S_USER_NAME = #{S_USER_NAME}
			, S_USER_PWD = #{S_USER_PWD}
			, N_GROUP_CODE = #{N_GROUP_CODE}
			, F_USE = #{F_USE}
			, D_UP_DATE = NOW()
  		WHERE
			S_USER_ID = #{S_USER_ID}
	</update>

	<delete id="delAgent" parameterType="hashmap" statementType="PREPARED">
		DELETE	FROM TB_USER_INFO
		WHERE
			S_USER_ID = #{S_USER_ID}
	</delete>

	<select id="chkAgent" resultType="java.lang.String" parameterType="hashmap">
		SELECT
   			COUNT(*) CNT
   		FROM
			TB_USER_INFO
		WHERE
			S_USER_ID = #{S_USER_ID}
	</select>

	<select id="AgentExcelQry" resultType="java.util.LinkedHashMap" parameterType="hashmap">
		SELECT
			S_USER_ID, S_USER_NAME
			, N_GROUP_CODE, (SELECT S_GROUP_NAME FROM TB_USER_GROUP_INFO WHERE N_GROUP_CODE = A.N_GROUP_CODE) GROUP_NAME
			, N_PER_CODE, (SELECT S_PER_NAME FROM TB_USER_PERMISSION WHERE N_PER_CODE = A.N_PER_CODE) PER_NAME
			, F_USE, D_IN_DATE, D_UP_DATE
		FROM
			TB_USER_INFO A
		WHERE
			N_PER_CODE &lt; 999
		<if test="f_S_USER_ID != '' and f_S_USER_ID != null">
			AND S_USER_ID LIKE '%' || #{f_S_USER_ID} || '%'
		</if>
		<if test="f_S_USER_NAME != '' and f_S_USER_NAME != null">
			AND S_USER_NAME LIKE '%' || #{f_S_USER_NAME} || '%'
		</if>
		<if test="f_N_PER_CODE != '' and f_N_PER_CODE != null">
			AND N_PER_CODE LIKE '%' || #{f_N_PER_CODE} || '%'
		</if>
		<if test="f_N_GROUP_CODE != '' and f_N_GROUP_CODE != null">
			AND N_GROUP_CODE LIKE '%' || #{f_N_GROUP_CODE} || '%'
		</if>
		ORDER BY S_USER_ID
	</select>
  
	<select id="userLockInfo" resultType="hashmap" parameterType="hashmap" statementType="PREPARED">
		SELECT S_ID_LOCK
		FROM TB_USER_INFO
		WHERE S_USER_ID = #{S_USER_ID}
	</select>
  
	<update id="update_userUnlock" parameterType="hashmap" statementType="PREPARED">
  		UPDATE TB_USER_INFO 
  			SET N_LOGIN_FAIL_CNT = 0, S_ID_LOCK = #{S_ID_LOCK}
		WHERE S_USER_ID = #{S_USER_ID}
	</update>
  
	<update id="update_userLoginUpdateTime" parameterType="hashmap" statementType="PREPARED">
		UPDATE TB_USER_LOGIN
			SET D_UPDATE_TIME = NOW()
		WHERE S_USER_ID = #{S_USER_ID}
	</update>  
</mapper>